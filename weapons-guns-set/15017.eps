%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: 1609.i105.021.P.m005.c23.weapons guns.eps
%%Creator: Adobe Illustrator(R) 17.1
%%For: Agor
%%CreationDate: 9/13/2016
%%BoundingBox: 0 0 388 436
%%HiResBoundingBox: 0 0 387.5461 435.5889
%%CropBox: 0 0 387.5461 435.5889
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 17.1.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 17.1.0 x273 R agm 4.7709 ct 5.3840%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.5-c014 79.151739, 2013/04/03-12:12:15        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Print</rdf:li>
            </rdf:Alt>
         </dc:title>
         <xmp:MetadataDate>2016-09-13T09:41:17+05:00</xmp:MetadataDate>
         <xmp:ModifyDate>2016-09-13T09:41:17+05:00</xmp:ModifyDate>
         <xmp:CreateDate>2016-09-13T09:41:17+05:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CC (Windows)</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>228</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEC0ALQAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAC0AAAAAEA&#xA;AQLQAAAAAQAB/+IMWElDQ19QUk9GSUxFAAEBAAAMSExpbm8CEAAAbW50clJHQiBYWVogB84AAgAJ&#xA;AAYAMQAAYWNzcE1TRlQAAAAASUVDIHNSR0IAAAAAAAAAAAAAAAAAAPbWAAEAAAAA0y1IUCAgAAAA&#xA;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARY3BydAAAAVAAAAAz&#xA;ZGVzYwAAAYQAAABsd3RwdAAAAfAAAAAUYmtwdAAAAgQAAAAUclhZWgAAAhgAAAAUZ1hZWgAAAiwA&#xA;AAAUYlhZWgAAAkAAAAAUZG1uZAAAAlQAAABwZG1kZAAAAsQAAACIdnVlZAAAA0wAAACGdmlldwAA&#xA;A9QAAAAkbHVtaQAAA/gAAAAUbWVhcwAABAwAAAAkdGVjaAAABDAAAAAMclRSQwAABDwAAAgMZ1RS&#xA;QwAABDwAAAgMYlRSQwAABDwAAAgMdGV4dAAAAABDb3B5cmlnaHQgKGMpIDE5OTggSGV3bGV0dC1Q&#xA;YWNrYXJkIENvbXBhbnkAAGRlc2MAAAAAAAAAEnNSR0IgSUVDNjE5NjYtMi4xAAAAAAAAAAAAAAAS&#xA;c1JHQiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#xA;AAAAAAAAAAAAAFhZWiAAAAAAAADzUQABAAAAARbMWFlaIAAAAAAAAAAAAAAAAAAAAABYWVogAAAA&#xA;AAAAb6IAADj1AAADkFhZWiAAAAAAAABimQAAt4UAABjaWFlaIAAAAAAAACSgAAAPhAAAts9kZXNj&#xA;AAAAAAAAABZJRUMgaHR0cDovL3d3dy5pZWMuY2gAAAAAAAAAAAAAABZJRUMgaHR0cDovL3d3dy5p&#xA;ZWMuY2gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZGVzYwAA&#xA;AAAAAAAuSUVDIDYxOTY2LTIuMSBEZWZhdWx0IFJHQiBjb2xvdXIgc3BhY2UgLSBzUkdCAAAAAAAA&#xA;AAAAAAAuSUVDIDYxOTY2LTIuMSBEZWZhdWx0IFJHQiBjb2xvdXIgc3BhY2UgLSBzUkdCAAAAAAAA&#xA;AAAAAAAAAAAAAAAAAAAAAGRlc2MAAAAAAAAALFJlZmVyZW5jZSBWaWV3aW5nIENvbmRpdGlvbiBp&#xA;biBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAACxSZWZlcmVuY2UgVmlld2luZyBDb25kaXRpb24gaW4g&#xA;SUVDNjE5NjYtMi4xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB2aWV3AAAAAAATpP4AFF8uABDP&#xA;FAAD7cwABBMLAANcngAAAAFYWVogAAAAAABMCVYAUAAAAFcf521lYXMAAAAAAAAAAQAAAAAAAAAA&#xA;AAAAAAAAAAAAAAKPAAAAAnNpZyAAAAAAQ1JUIGN1cnYAAAAAAAAEAAAAAAUACgAPABQAGQAeACMA&#xA;KAAtADIANwA7AEAARQBKAE8AVABZAF4AYwBoAG0AcgB3AHwAgQCGAIsAkACVAJoAnwCkAKkArgCy&#xA;ALcAvADBAMYAywDQANUA2wDgAOUA6wDwAPYA+wEBAQcBDQETARkBHwElASsBMgE4AT4BRQFMAVIB&#xA;WQFgAWcBbgF1AXwBgwGLAZIBmgGhAakBsQG5AcEByQHRAdkB4QHpAfIB+gIDAgwCFAIdAiYCLwI4&#xA;AkECSwJUAl0CZwJxAnoChAKOApgCogKsArYCwQLLAtUC4ALrAvUDAAMLAxYDIQMtAzgDQwNPA1oD&#xA;ZgNyA34DigOWA6IDrgO6A8cD0wPgA+wD+QQGBBMEIAQtBDsESARVBGMEcQR+BIwEmgSoBLYExATT&#xA;BOEE8AT+BQ0FHAUrBToFSQVYBWcFdwWGBZYFpgW1BcUF1QXlBfYGBgYWBicGNwZIBlkGagZ7BowG&#xA;nQavBsAG0QbjBvUHBwcZBysHPQdPB2EHdAeGB5kHrAe/B9IH5Qf4CAsIHwgyCEYIWghuCIIIlgiq&#xA;CL4I0gjnCPsJEAklCToJTwlkCXkJjwmkCboJzwnlCfsKEQonCj0KVApqCoEKmAquCsUK3ArzCwsL&#xA;Igs5C1ELaQuAC5gLsAvIC+EL+QwSDCoMQwxcDHUMjgynDMAM2QzzDQ0NJg1ADVoNdA2ODakNww3e&#xA;DfgOEw4uDkkOZA5/DpsOtg7SDu4PCQ8lD0EPXg96D5YPsw/PD+wQCRAmEEMQYRB+EJsQuRDXEPUR&#xA;ExExEU8RbRGMEaoRyRHoEgcSJhJFEmQShBKjEsMS4xMDEyMTQxNjE4MTpBPFE+UUBhQnFEkUahSL&#xA;FK0UzhTwFRIVNBVWFXgVmxW9FeAWAxYmFkkWbBaPFrIW1hb6Fx0XQRdlF4kXrhfSF/cYGxhAGGUY&#xA;ihivGNUY+hkgGUUZaxmRGbcZ3RoEGioaURp3Gp4axRrsGxQbOxtjG4obshvaHAIcKhxSHHscoxzM&#xA;HPUdHh1HHXAdmR3DHeweFh5AHmoelB6+HukfEx8+H2kflB+/H+ogFSBBIGwgmCDEIPAhHCFIIXUh&#xA;oSHOIfsiJyJVIoIiryLdIwojOCNmI5QjwiPwJB8kTSR8JKsk2iUJJTglaCWXJccl9yYnJlcmhya3&#xA;JugnGCdJJ3onqyfcKA0oPyhxKKIo1CkGKTgpaymdKdAqAio1KmgqmyrPKwIrNitpK50r0SwFLDks&#xA;biyiLNctDC1BLXYtqy3hLhYuTC6CLrcu7i8kL1ovkS/HL/4wNTBsMKQw2zESMUoxgjG6MfIyKjJj&#xA;Mpsy1DMNM0YzfzO4M/E0KzRlNJ402DUTNU01hzXCNf02NzZyNq426TckN2A3nDfXOBQ4UDiMOMg5&#xA;BTlCOX85vDn5OjY6dDqyOu87LTtrO6o76DwnPGU8pDzjPSI9YT2hPeA+ID5gPqA+4D8hP2E/oj/i&#xA;QCNAZECmQOdBKUFqQaxB7kIwQnJCtUL3QzpDfUPARANER0SKRM5FEkVVRZpF3kYiRmdGq0bwRzVH&#xA;e0fASAVIS0iRSNdJHUljSalJ8Eo3Sn1KxEsMS1NLmkviTCpMcky6TQJNSk2TTdxOJU5uTrdPAE9J&#xA;T5NP3VAnUHFQu1EGUVBRm1HmUjFSfFLHUxNTX1OqU/ZUQlSPVNtVKFV1VcJWD1ZcVqlW91dEV5JX&#xA;4FgvWH1Yy1kaWWlZuFoHWlZaplr1W0VblVvlXDVchlzWXSddeF3JXhpebF69Xw9fYV+zYAVgV2Cq&#xA;YPxhT2GiYfViSWKcYvBjQ2OXY+tkQGSUZOllPWWSZedmPWaSZuhnPWeTZ+loP2iWaOxpQ2maafFq&#xA;SGqfavdrT2una/9sV2yvbQhtYG25bhJua27Ebx5veG/RcCtwhnDgcTpxlXHwcktypnMBc11zuHQU&#xA;dHB0zHUodYV14XY+dpt2+HdWd7N4EXhueMx5KnmJeed6RnqlewR7Y3vCfCF8gXzhfUF9oX4BfmJ+&#xA;wn8jf4R/5YBHgKiBCoFrgc2CMIKSgvSDV4O6hB2EgITjhUeFq4YOhnKG14c7h5+IBIhpiM6JM4mZ&#xA;if6KZIrKizCLlov8jGOMyo0xjZiN/45mjs6PNo+ekAaQbpDWkT+RqJIRknqS45NNk7aUIJSKlPSV&#xA;X5XJljSWn5cKl3WX4JhMmLiZJJmQmfyaaJrVm0Kbr5wcnImc951kndKeQJ6unx2fi5/6oGmg2KFH&#xA;obaiJqKWowajdqPmpFakx6U4pammGqaLpv2nbqfgqFKoxKk3qamqHKqPqwKrdavprFys0K1Erbiu&#xA;La6hrxavi7AAsHWw6rFgsdayS7LCszizrrQltJy1E7WKtgG2ebbwt2i34LhZuNG5SrnCuju6tbsu&#xA;u6e8IbybvRW9j74KvoS+/796v/XAcMDswWfB48JfwtvDWMPUxFHEzsVLxcjGRsbDx0HHv8g9yLzJ&#xA;Osm5yjjKt8s2y7bMNcy1zTXNtc42zrbPN8+40DnQutE80b7SP9LB00TTxtRJ1MvVTtXR1lXW2Ndc&#xA;1+DYZNjo2WzZ8dp22vvbgNwF3IrdEN2W3hzeot8p36/gNuC94UThzOJT4tvjY+Pr5HPk/OWE5g3m&#xA;lucf56noMui86Ubp0Opb6uXrcOv77IbtEe2c7ijutO9A78zwWPDl8XLx//KM8xnzp/Q09ML1UPXe&#xA;9m32+/eK+Bn4qPk4+cf6V/rn+3f8B/yY/Sn9uv5L/tz/bf///+4ADkFkb2JlAGTAAAAAAf/bAIQA&#xA;BgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoKDBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8f&#xA;Hx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f&#xA;Hx8fHx8fHx8fHx8fHx8f/8AAEQgBAADkAwERAAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQF&#xA;AwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAAAQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMB&#xA;AgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPBUtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdU&#xA;ZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eX&#xA;p7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZqbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUE&#xA;BQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEyobHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PS&#xA;NeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG&#xA;1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/a&#xA;AAwDAQACEQMRAD8A9U4q7FXYqlnmm7uLPyxq93bP6dxbWVxLDIKEq6RMynfbYjFXyzJ+fn5pLJDp&#xA;0GqopZlUXT28Ly/Ge/JOJpX+XFXs2p6D+cGmadc6jffmJbwWVlE89zMdJtzxjjSrNRQSaUrQDr92&#xA;KpJY/wCLtN1zyr5/1bzImu6NqLLpjutmlmY7XUBWJ3C/s+usZNRUfLFXt2KuxV2KuxV2KuxV2KuJ&#xA;CgkmgG5J6UxVCy6rpkQBlvIIwdgWkQCv0nBxDvTwlFAggEGoPQ4UMQ/Mn8xLXyRpMF+9st/LLOsb&#xA;WSzLFN6RVy0iAhuXEqBvQb9cFpphtt/zlF5En5f7i9Yi495ILZa/L/SDXI+JHvDLw5dxQy/85T+V&#xA;Humt00LVjQkCQpCFIHevq4DmgOoSMUj0Kj/0N5+W3Li2m6yprQ1gtdvn/pOTtrRP/Q2X5Xf761P/&#xA;AKR4/wDqrhVEj/nKj8pqf396Pb6s39cVZBpn57/lXqNolzDraorbNHJDOrq3dWHA7/LBYTSK/wCV&#xA;zfll/wBX2L/kXP8A9U8KHf8AK5vyy/6vsX/Iuf8A6p4q7/lc35Zf9X2L/kXP/wBU8VS/XPz4/L3T&#xA;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&#xA;firsVdirsVdirsVdirsVdirsVdirsVf/2Q==</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:InstanceID>xmp.iid:171be583-4f6a-9c4b-8a2c-fe8d5c7ae5d6</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:171be583-4f6a-9c4b-8a2c-fe8d5c7ae5d6</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:929817ad-2847-4333-8536-752164731439</stRef:instanceID>
            <stRef:documentID>xmp.did:f9cd65c3-464d-1a4b-abc9-e88c2b50b4a6</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:f9cd65c3-464d-1a4b-abc9-e88c2b50b4a6</stEvt:instanceID>
                  <stEvt:when>2016-09-07T14:18:54+05:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:171be583-4f6a-9c4b-8a2c-fe8d5c7ae5d6</stEvt:instanceID>
                  <stEvt:when>2016-09-13T09:41:17+05:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>True</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>429.333333</stDim:w>
            <stDim:h>450.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 10.01</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -435.589 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 435.589 li
387.546 435.589 li
387.546 0 li
cp
clp
142.209 116.218 mo
143.047 114.94 li
144.605 114.94 li
144.605 117.975 li
144.128 117.863 li
143.706 117.765 143.407 117.388 143.407 116.955 cv
143.407 116.208 li
142.209 116.218 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
.235294 .235294 .231373 rgb
f
86.8783 128.314 mo
84.096 128.314 li
84.096 121.616 li
86.8783 121.616 li
86.8783 128.314 li
cp
f
172.48 126.306 mo
82.8907 126.306 li
82.8907 123.624 li
172.48 123.624 li
172.48 126.306 li
cp
f
88.2161 150.54 mo
85.1345 152.54 82.0526 154.541 78.9709 156.541 cv
74.9139 150.291 72.1804 143.276 70.9391 135.929 cv
74.5619 135.317 78.1846 134.705 81.8073 134.093 cv
82.7976 139.955 84.9789 145.553 88.2161 150.54 cv
f
81.2834 155.04 mo
81.3165 155.018 81.3497 154.997 81.3828 154.975 cv
81.3828 154.975 81.3828 154.975 81.3828 154.975 cv
81.3497 154.997 81.3165 155.018 81.2834 155.04 cv
.73238 .73238 .730012 rgb
f
80.3778 155.628 mo
77.1461 150.649 74.7808 145.17 73.3727 139.422 cv
74.551 139.196 li
75.9288 144.792 78.2353 150.127 81.3828 154.975 cv
81.3497 154.997 81.3165 155.018 81.2834 155.04 cv
80.9815 155.236 80.6797 155.432 80.3778 155.628 cv
.2 .2 .192157 rgb
f
83.4871 153.609 mo
83.6165 153.525 83.7455 153.442 83.8749 153.358 cv
83.7456 153.442 83.6164 153.526 83.4871 153.609 cv
.73238 .73238 .730012 rgb
f
83.0911 153.867 mo
80.0871 149.239 77.8804 144.15 76.554 138.812 cv
77.7324 138.586 li
79.0284 143.772 81.176 148.716 84.0959 153.214 cv
84.0223 153.262 83.9486 153.31 83.8749 153.358 cv
83.7455 153.442 83.6165 153.525 83.4871 153.609 cv
83.3551 153.695 83.2231 153.781 83.0911 153.867 cv
.2 .2 .192157 rgb
f
85.8043 152.105 mo
85.8043 152.105 li
85.873 152.061 85.9415 152.016 86.0101 151.972 cv
85.9415 152.016 85.8729 152.061 85.8043 152.105 cv
.73238 .73238 .730012 rgb
f
85.8043 152.105 mo
83.0279 147.828 80.9802 143.13 79.7358 138.202 cv
80.9146 137.976 li
82.1284 142.752 84.1172 147.306 86.8092 151.453 cv
86.5428 151.626 86.2765 151.799 86.0101 151.972 cv
85.9415 152.016 85.873 152.061 85.8043 152.105 cv
.2 .2 .192157 rgb
f
64.1951 133.656 mo
64.2782 133.419 64.8318 133.253 64.7226 133.027 cv
64.5907 132.754 63.8221 132.53 63.5218 132.49 cv
63.1625 133.525 61.8307 136.237 64.5876 138.41 cv
65.1353 138.079 63.0657 136.874 64.1951 133.656 cv
cp
.235294 .235294 .231373 rgb
f
55.549 116.737 mo
53.0308 116.737 li
53.0308 115.235 li
55.549 115.235 li
55.549 116.737 li
cp
f
58.025 114.68 mo
57.2609 114.68 li
57.2609 112.286 li
58.025 112.286 li
58.025 114.68 li
cp
f
58.3445 117.136 mo
54.3909 117.136 li
54.3909 113.063 li
58.3445 113.063 li
58.3445 117.136 li
cp
f
80.9254 119.652 mo
61.3443 119.652 li
60.0073 119.652 59.1064 118.277 59.6431 117.05 cv
59.9019 116.456 li
60.5823 114.898 62.1639 113.94 63.8602 114.055 cv
80.7673 115.2 li
81.9701 115.277 82.9046 116.278 82.9046 117.481 cv
82.9046 117.673 li
82.9046 118.765 82.0182 119.652 80.9254 119.652 cv
70.2867 137.527 mo
70.2867 138.275 69.6781 138.883 68.9257 138.883 cv
61.5552 138.883 li
60.5919 138.883 59.9355 137.906 60.2997 137.014 cv
61.1143 134.997 li
61.3251 134.484 61.8188 134.149 62.3747 134.144 cv
68.9209 134.129 li
68.9305 134.129 li
69.6781 134.129 70.2867 134.738 70.2867 135.486 cv
70.2867 137.527 li
84.3424 131.254 mo
84.3424 119.652 li
84.0691 117.606 li
83.8295 115.833 82.4111 114.448 80.6283 114.265 cv
60.6591 112.186 li
57.7055 112.186 li
57.6854 112.643 57.6639 112.855 57.6639 113.222 cv
57.6639 114.744 56.4302 115.978 54.9084 115.978 cv
54.1818 115.978 54.9084 115.978 52.8139 115.986 cv
51.755 119.652 li
49.9389 121.775 li
49.9389 130.621 li
51.2567 130.252 52.287 130.468 52.9915 130.966 cv
53.624 131.412 53.9834 132.088 54.0409 132.783 cv
54.0841 133.295 53.9595 133.823 53.6528 134.268 cv
45.7647 149.364 li
55.1479 151.64 li
55.3875 150.562 li
54.688 149.412 li
57.683 143.072 li
59.3221 143.052 li
59.4035 142.434 li
58.6895 140.973 li
59.1256 139.899 li
70.8858 139.899 li
83.5325 137.474 li
83.5613 136.665 li
82.6938 136.156 li
82.6602 133.727 82.665 134.522 82.665 132.591 cv
84.3424 131.254 li
.341176 .341176 .337255 rgb
f
58.383 139.18 mo
53.1329 137.503 li
47.1819 148.721 li
54.1785 150.419 li
53.6008 149.469 li
58.383 139.18 li
.235294 .235294 .231373 rgb
f
49.9368 130.62 mo
4.1761 141.152 li
3.21345 141.377 2.27981 140.683 2.21667 139.697 cv
.563981 134.892 -.157352 129.478 .0285698 123.477 cv
-.0303145 122.555 .701378 121.775 1.6251 121.775 cv
49.9368 121.775 li
49.9368 130.62 li
f
48.9783 124.223 mo
48.9783 124.223 1.44583 122.733 1.6251 122.733 cv
48.9783 122.733 li
48.9783 124.223 li
.427451 .427451 .423529 rgb
f
81.3828 123.41 mo
81.3828 124.312 80.6513 125.043 79.749 125.043 cv
50.3938 125.043 li
49.4914 125.043 48.76 124.312 48.76 123.41 cv
48.76 122.507 49.4914 121.776 50.3938 121.776 cv
79.749 121.776 li
80.6513 121.776 81.3828 122.507 81.3828 123.41 cv
cp
.235294 .235294 .231373 rgb
f
84.3424 127.799 mo
67.0238 127.799 li
66.6635 127.799 66.3715 127.507 66.3715 127.147 cv
66.3715 127.133 li
66.3715 126.773 66.6635 126.481 67.0238 126.481 cv
84.3424 126.481 li
84.3424 127.799 li
cp
f
71.5365 131.912 mo
71.5247 131.912 li
71.2012 131.912 70.9391 131.65 70.9391 131.327 cv
70.9391 127.14 li
72.1221 127.14 li
72.1221 131.327 li
72.1221 131.65 71.86 131.912 71.5365 131.912 cv
f
69.6062 129.526 mo
69.6062 130.144 69.1056 130.644 68.488 130.644 cv
67.8705 130.644 67.3699 130.144 67.3699 129.526 cv
67.3699 128.909 67.8705 128.408 68.488 128.408 cv
69.1056 128.408 69.6062 128.909 69.6062 129.526 cv
cp
f
58.5788 127.799 mo
58.5788 128.316 58.1598 128.735 57.6429 128.735 cv
57.1261 128.735 56.7071 128.316 56.7071 127.799 cv
56.7071 127.282 57.1261 126.863 57.6429 126.863 cv
58.1598 126.863 58.5788 127.282 58.5788 127.799 cv
cp
f
55.549 127.14 mo
51.7152 127.14 li
51.7152 125.043 li
55.549 125.043 li
55.549 127.14 li
cp
f
72.1221 130.966 mo
72.1221 131.331 li
72.1221 132.131 71.4704 132.783 70.6701 132.783 cv
54.0409 132.783 li
53.9834 132.088 53.624 131.412 52.9915 130.966 cv
72.1221 130.966 li
f
54.3909 121.1 mo
49.9368 121.1 li
49.9368 118.887 li
54.3909 118.887 li
54.3909 121.1 li
cp
f
56.7854 113.262 mo
56.7854 114.299 55.945 115.139 54.9084 115.139 cv
53.8718 115.139 53.0315 114.299 53.0315 113.262 cv
53.0315 112.226 53.8718 111.385 54.9084 111.385 cv
55.945 111.385 56.7854 112.226 56.7854 113.262 cv
cp
.341176 .341176 .337255 rgb
f
56.0948 113.262 mo
56.0948 113.918 55.5636 114.449 54.9084 114.449 cv
54.2532 114.449 53.722 113.918 53.722 113.262 cv
53.722 112.607 54.2532 112.076 54.9084 112.076 cv
55.5636 112.076 56.0948 112.607 56.0948 113.262 cv
cp
.235294 .235294 .231373 rgb
f
89.494 129.25 mo
85.5603 129.25 li
85.5603 120.68 li
89.494 120.68 li
89.494 129.25 li
.341176 .341176 .337255 rgb
f
136.937 121.981 mo
136.937 127.947 li
136.937 128.623 136.401 129.179 135.725 129.198 cv
135.02 129.217 li
134.316 129.236 li
132.552 129.289 li
131.843 129.308 li
130.08 129.356 li
129.375 129.375 li
127.612 129.423 li
126.902 129.447 li
125.139 129.495 li
124.434 129.514 li
122.671 129.562 li
121.966 129.581 li
120.198 129.634 li
119.493 129.653 li
117.73 129.701 li
117.025 129.721 li
115.262 129.773 li
114.553 129.792 li
112.789 129.84 li
112.085 129.859 li
110.321 129.907 li
109.612 129.931 li
107.848 129.979 li
107.144 129.998 li
105.38 130.046 li
104.676 130.066 li
102.908 130.118 li
102.203 130.137 li
100.44 130.185 li
99.7351 130.204 li
97.9715 130.257 li
97.2623 130.276 li
95.4988 130.324 li
94.7942 130.343 li
93.0307 130.391 li
92.3214 130.415 li
90.5578 130.463 li
89.8534 130.483 li
89.4989 130.492 li
88.7944 130.511 88.2145 129.946 88.2145 129.246 cv
88.2145 120.687 li
88.2145 119.983 88.7944 119.417 89.4989 119.436 cv
89.8534 119.446 li
90.5578 119.465 li
92.3214 119.513 li
93.0307 119.537 li
94.7942 119.585 li
95.4988 119.604 li
97.2623 119.652 li
97.9715 119.671 li
99.7351 119.724 li
100.44 119.743 li
102.203 119.791 li
102.908 119.81 li
104.676 119.863 li
105.38 119.882 li
107.144 119.93 li
107.848 119.949 li
109.612 119.997 li
110.321 120.021 li
112.085 120.069 li
112.789 120.088 li
114.553 120.136 li
115.262 120.155 li
117.025 120.208 li
117.73 120.227 li
119.493 120.275 li
120.198 120.294 li
121.966 120.347 li
122.671 120.366 li
124.434 120.414 li
125.139 120.433 li
126.902 120.481 li
127.612 120.505 li
129.375 120.553 li
130.08 120.572 li
131.843 120.62 li
132.552 120.639 li
134.316 120.692 li
135.02 120.711 li
135.725 120.73 li
136.401 120.749 136.937 121.305 136.937 121.981 cv
.235294 .235294 .231373 rgb
f
171.731 126.863 mo
164.443 126.863 li
164.029 126.863 163.694 126.528 163.694 126.114 cv
163.694 123.815 li
163.694 123.402 164.029 123.067 164.443 123.067 cv
171.731 123.067 li
172.145 123.067 172.48 123.402 172.48 123.815 cv
172.48 126.114 li
172.48 126.528 172.145 126.863 171.731 126.863 cv
cp
.341176 .341176 .337255 rgb
f
171.681 124.125 mo
171.681 124.367 171.484 124.564 171.242 124.564 cv
164.932 124.564 li
164.689 124.564 164.493 124.367 164.493 124.125 cv
164.493 123.882 164.689 123.686 164.932 123.686 cv
171.242 123.686 li
171.484 123.686 171.681 123.882 171.681 124.125 cv
cp
.235294 .235294 .231373 rgb
f
171.681 125.843 mo
171.681 126.086 171.484 126.283 171.242 126.283 cv
164.932 126.283 li
164.689 126.283 164.493 126.086 164.493 125.843 cv
164.493 125.601 164.689 125.404 164.932 125.404 cv
171.242 125.404 li
171.484 125.404 171.681 125.601 171.681 125.843 cv
cp
f
134.316 120.692 mo
134.316 124.325 li
132.552 124.325 li
132.552 120.639 li
131.843 120.62 li
131.843 124.325 li
130.08 124.325 li
130.08 120.572 li
129.375 120.553 li
129.375 124.325 li
127.612 124.325 li
127.612 120.505 li
126.902 120.481 li
126.902 124.325 li
125.139 124.325 li
125.139 120.433 li
124.434 120.414 li
124.434 124.325 li
122.671 124.325 li
122.671 120.366 li
121.966 120.347 li
121.966 124.325 li
120.198 124.325 li
120.198 120.294 li
119.493 120.275 li
119.493 124.325 li
117.73 124.325 li
117.73 120.227 li
117.025 120.208 li
117.025 124.325 li
115.262 124.325 li
115.262 120.155 li
114.553 120.136 li
114.553 124.325 li
112.789 124.325 li
112.789 120.088 li
112.085 120.069 li
112.085 124.325 li
110.321 124.325 li
110.321 120.021 li
109.612 119.997 li
109.612 124.325 li
107.848 124.325 li
107.848 119.949 li
107.144 119.93 li
107.144 124.325 li
105.38 124.325 li
105.38 119.882 li
104.676 119.863 li
104.676 124.325 li
102.908 124.325 li
102.908 119.81 li
102.203 119.791 li
102.203 124.325 li
100.44 124.325 li
100.44 119.743 li
99.7351 119.724 li
99.7351 124.325 li
97.9715 124.325 li
97.9715 119.671 li
97.2623 119.652 li
97.2623 124.325 li
95.4988 124.325 li
95.4988 119.604 li
94.7942 119.585 li
94.7942 124.325 li
93.0307 124.325 li
93.0307 119.537 li
92.3214 119.513 li
92.3214 124.325 li
90.5578 124.325 li
90.5578 119.465 li
89.8534 119.446 li
89.8534 130.483 li
90.5578 130.463 li
90.5578 125.605 li
92.3214 125.605 li
92.3214 130.415 li
93.0307 130.391 li
93.0307 125.605 li
94.7942 125.605 li
94.7942 130.343 li
95.4988 130.324 li
95.4988 125.605 li
97.2623 125.605 li
97.2623 130.276 li
97.9715 130.257 li
97.9715 125.605 li
99.7351 125.605 li
99.7351 130.204 li
100.44 130.185 li
100.44 125.605 li
102.203 125.605 li
102.203 130.137 li
102.908 130.118 li
102.908 125.605 li
104.676 125.605 li
104.676 130.066 li
105.38 130.046 li
105.38 125.605 li
107.144 125.605 li
107.144 129.998 li
107.848 129.979 li
107.848 125.605 li
109.612 125.605 li
109.612 129.931 li
110.321 129.907 li
110.321 125.605 li
112.085 125.605 li
112.085 129.859 li
112.789 129.84 li
112.789 125.605 li
114.553 125.605 li
114.553 129.792 li
115.262 129.773 li
115.262 125.605 li
117.025 125.605 li
117.025 129.721 li
117.73 129.701 li
117.73 125.605 li
119.493 125.605 li
119.493 129.653 li
120.198 129.634 li
120.198 125.605 li
121.966 125.605 li
121.966 129.581 li
122.671 129.562 li
122.671 125.605 li
124.434 125.605 li
124.434 129.514 li
125.139 129.495 li
125.139 125.605 li
126.902 125.605 li
126.902 129.447 li
127.612 129.423 li
127.612 125.605 li
129.375 125.605 li
129.375 129.375 li
130.08 129.356 li
130.08 125.605 li
131.843 125.605 li
131.843 129.308 li
132.552 129.289 li
132.552 125.605 li
134.316 125.605 li
134.316 129.236 li
135.02 129.217 li
135.02 125.605 li
135.02 124.325 li
135.02 120.711 li
134.316 120.692 li
.113725 .113725 .105882 rgb
f
144.245 122.727 mo
137.896 122.727 li
137.896 122.311 li
143.276 115.407 li
144.245 115.407 li
144.245 122.727 li
cp
142.808 114.449 mo
136.937 121.981 li
136.937 123.685 li
145.204 123.685 li
145.204 114.449 li
142.808 114.449 li
cp
.235294 .235294 .231373 rgb
f
144.245 119.932 mo
138.688 119.932 li
137.896 122.088 li
144.245 122.088 li
144.245 119.932 li
cp
f
72.1221 138.41 mo
81.1076 136.006 li
81.8864 132.783 li
81.8864 136.605 li
72.1221 138.41 li
.505882 .505882 .501961 rgb
f
72.593 130.205 mo
72.593 128.295 li
83.1842 128.295 li
73.5199 129.087 li
72.593 130.205 li
f
47.1819 148.721 mo
54.9084 134.093 li
60.2614 134.093 li
54.9084 135.45 li
53.622 137.659 li
53.1329 137.503 li
47.1819 148.721 li
f
47.1819 148.721 mo
47.1819 148.721 li
53.1329 137.503 li
53.622 137.659 li
47.1819 148.721 li
.427451 .427451 .423529 rgb
f
135.884 121.769 mo
135.02 121.769 li
135.02 121.669 li
135.698 121.688 li
135.884 121.769 li
134.316 121.769 mo
132.552 121.769 li
132.552 121.598 li
134.316 121.649 li
134.316 121.769 li
131.843 121.769 mo
130.08 121.769 li
130.08 121.531 li
131.843 121.579 li
131.843 121.769 li
129.375 121.769 mo
127.612 121.769 li
127.612 121.464 li
129.375 121.512 li
129.375 121.769 li
126.902 121.769 mo
125.139 121.769 li
125.139 121.392 li
126.876 121.439 li
126.902 121.44 li
126.902 121.769 li
124.434 121.769 mo
122.671 121.769 li
122.671 121.325 li
124.434 121.373 li
124.434 121.769 li
121.966 121.769 mo
120.198 121.769 li
120.198 121.253 li
121.966 121.304 li
121.966 121.769 li
119.493 121.769 mo
117.73 121.769 li
117.73 121.186 li
119.493 121.234 li
119.493 121.769 li
117.025 121.769 mo
115.262 121.769 li
115.262 121.114 li
117.025 121.165 li
117.025 121.769 li
114.553 121.769 mo
112.789 121.769 li
112.789 121.047 li
114.553 121.095 li
114.553 121.769 li
112.085 121.769 mo
110.321 121.769 li
110.321 120.98 li
112.085 121.028 li
112.085 121.769 li
109.612 121.769 mo
107.848 121.769 li
107.848 120.908 li
109.586 120.955 li
109.612 120.956 li
109.612 121.769 li
107.144 121.769 mo
105.38 121.769 li
105.38 120.841 li
107.144 120.889 li
107.144 121.769 li
104.676 121.769 mo
102.908 121.769 li
102.908 120.769 li
104.676 120.82 li
104.676 121.769 li
102.203 121.769 mo
100.44 121.769 li
100.44 120.702 li
102.203 120.75 li
102.203 121.769 li
99.7351 121.769 mo
97.9715 121.769 li
97.9715 120.63 li
99.7351 120.681 li
99.7351 121.769 li
97.2623 121.769 mo
95.4988 121.769 li
95.4988 120.563 li
97.2623 120.611 li
97.2623 121.769 li
94.7942 121.769 mo
93.0307 121.769 li
93.0307 120.496 li
94.7942 120.544 li
94.7942 121.769 li
92.3214 121.769 mo
90.5578 121.769 li
90.5578 120.424 li
92.2955 120.471 li
92.3214 120.472 li
92.3214 121.769 li
89.8534 121.769 mo
89.173 121.769 li
89.173 120.687 li
89.173 120.526 89.3036 120.394 89.4639 120.394 cv
89.8534 120.405 li
89.8534 121.769 li
f
135.02 121.769 mo
134.316 121.769 li
134.316 121.649 li
135.02 121.669 li
135.02 121.769 li
132.552 121.769 mo
131.843 121.769 li
131.843 121.579 li
132.526 121.597 li
132.552 121.598 li
132.552 121.769 li
130.08 121.769 mo
129.375 121.769 li
129.375 121.512 li
130.08 121.531 li
130.08 121.769 li
127.612 121.769 mo
126.902 121.769 li
126.902 121.44 li
127.579 121.463 li
127.612 121.464 li
127.612 121.769 li
125.139 121.769 mo
124.434 121.769 li
124.434 121.373 li
125.139 121.392 li
125.139 121.769 li
122.671 121.769 mo
121.966 121.769 li
121.966 121.304 li
122.645 121.324 li
122.671 121.325 li
122.671 121.769 li
120.198 121.769 mo
119.493 121.769 li
119.493 121.234 li
120.172 121.252 li
120.198 121.253 li
120.198 121.769 li
117.73 121.769 mo
117.025 121.769 li
117.025 121.165 li
117.704 121.185 li
117.73 121.186 li
117.73 121.769 li
115.262 121.769 mo
114.553 121.769 li
114.553 121.095 li
115.236 121.113 li
115.262 121.114 li
115.262 121.769 li
112.789 121.769 mo
112.085 121.769 li
112.085 121.028 li
112.789 121.047 li
112.789 121.769 li
110.321 121.769 mo
109.612 121.769 li
109.612 120.956 li
110.288 120.979 li
110.321 120.98 li
110.321 121.769 li
107.848 121.769 mo
107.144 121.769 li
107.144 120.889 li
107.848 120.908 li
107.848 121.769 li
105.38 121.769 mo
104.676 121.769 li
104.676 120.82 li
105.354 120.84 li
105.38 120.841 li
105.38 121.769 li
102.908 121.769 mo
102.203 121.769 li
102.203 120.75 li
102.881 120.768 li
102.908 120.769 li
102.908 121.769 li
100.44 121.769 mo
99.7351 121.769 li
99.7351 120.681 li
100.413 120.701 li
100.44 120.702 li
100.44 121.769 li
97.9715 121.769 mo
97.2623 121.769 li
97.2623 120.611 li
97.946 120.629 li
97.9715 120.63 li
97.9715 121.769 li
95.4988 121.769 mo
94.7942 121.769 li
94.7942 120.544 li
95.4988 120.563 li
95.4988 121.769 li
93.0307 121.769 mo
92.3214 121.769 li
92.3214 120.472 li
92.9984 120.495 li
93.0307 120.496 li
93.0307 121.769 li
90.5578 121.769 mo
89.8534 121.769 li
89.8534 120.405 li
90.5578 120.424 li
90.5578 121.769 li
.337255 .337255 .329412 rgb
f
155.452 382.409 mo
155.46 376.956 li
159.961 376.962 li
159.954 382.416 li
155.452 382.409 li
cp
.113725 .113725 .105882 rgb
f
109.03 383.693 mo
109.042 375.679 li
155.847 375.76 li
155.836 383.773 li
109.03 383.693 li
f
153.777 387.124 mo
153.791 374.734 li
157.135 374.739 li
157.121 387.129 li
153.777 387.124 li
cp
.235294 .235294 .231373 rgb
f
142.21 386.684 mo
142.223 375.156 li
145.567 375.16 li
145.554 386.689 li
142.21 386.684 li
f
108.794 384.715 mo
108.808 374.656 li
112.152 374.661 li
112.138 384.72 li
108.794 384.715 li
f
121.313 384.294 mo
121.326 375.097 li
124.67 375.102 li
124.657 384.299 li
121.313 384.294 li
f
166.227 423.658 mo
162.862 423.658 li
161.257 423.658 160.042 422.21 160.321 420.63 cv
163.626 401.903 li
170.756 401.74 li
168.794 421.335 li
168.662 422.654 167.552 423.658 166.227 423.658 cv
cp
.113725 .113725 .105882 rgb
f
115.154 412.695 mo
115.26 412.394 115.965 412.182 115.826 411.894 cv
115.658 411.547 114.679 411.261 114.297 411.21 cv
113.84 412.528 112.144 415.981 115.654 418.747 cv
116.351 418.326 113.716 416.791 115.154 412.695 cv
cp
f
122.909 417.623 mo
122.909 418.575 122.134 419.349 121.176 419.349 cv
111.794 419.349 li
110.567 419.349 109.732 418.105 110.195 416.97 cv
111.232 414.402 li
111.501 413.749 112.129 413.322 112.837 413.316 cv
121.17 413.298 li
121.182 413.298 li
122.134 413.298 122.909 414.072 122.909 415.024 cv
122.909 417.623 li
140.801 409.637 mo
140.801 401.903 li
98.9745 401.903 li
97.8874 401.903 97.0061 402.784 97.0061 403.871 cv
97.0061 406.64 li
97.0061 407.72 97.8798 408.53 98.9574 408.608 cv
99.7317 408.664 100.38 408.909 100.892 409.271 cv
101.697 409.839 102.155 410.699 102.228 411.583 cv
102.283 412.236 102.124 412.907 101.734 413.475 cv
91.6925 432.691 li
103.637 435.589 li
103.942 434.216 li
103.052 432.752 li
106.864 424.681 li
108.146 422.009 li
108.701 420.643 li
123.671 420.643 li
129.41 413.482 li
131.084 411.21 133.053 411.819 138.666 411.339 cv
140.801 409.637 li
f
93.4964 431.873 mo
103.332 413.251 li
110.146 413.251 li
103.332 414.979 li
93.4964 431.873 li
.337255 .337255 .329412 rgb
f
248.762 402.739 mo
1.2851 402.739 li
1.2851 385.932 li
248.762 385.932 li
248.762 402.739 li
.235294 .235294 .231373 rgb
f
142.816 404.277 mo
94.3536 404.277 li
93.2907 404.277 92.4292 403.415 92.4292 402.352 cv
92.4292 384.214 li
92.4292 383.151 93.2907 382.29 94.3536 382.29 cv
132.181 382.29 li
143.53 385.386 li
144.709 385.708 145.527 386.779 145.527 388.001 cv
145.527 401.566 li
145.527 403.063 144.313 404.277 142.816 404.277 cv
.341176 .341176 .337255 rgb
f
142.816 402.814 mo
94.3536 402.814 li
94.0986 402.814 93.8915 402.607 93.8915 402.352 cv
93.8915 384.213 li
93.8915 383.959 94.0986 383.752 94.3536 383.752 cv
131.986 383.752 li
143.144 386.797 li
143.685 386.944 144.064 387.44 144.064 388.001 cv
144.064 401.567 li
144.064 402.254 143.504 402.814 142.816 402.814 cv
.294118 .294118 .290196 rgb
f
2.75839 402.897 mo
2.75839 403.659 2.1409 404.277 1.37926 404.277 cv
.61749 404.277 4.93332e-006 403.659 4.93332e-006 402.897 cv
4.93332e-006 386.036 li
4.93332e-006 385.274 .61749 384.657 1.37926 384.657 cv
2.1409 384.657 2.75839 385.274 2.75839 386.036 cv
2.75839 402.897 li
cp
.113725 .113725 .105882 rgb
f
249.734 403.058 mo
249.734 403.731 249.188 404.277 248.515 404.277 cv
247.842 404.277 247.296 403.731 247.296 403.058 cv
247.296 385.632 li
247.296 384.959 247.842 384.413 248.515 384.413 cv
249.188 384.413 249.734 384.959 249.734 385.632 cv
249.734 403.058 li
cp
f
4.49255 390.583 mo
4.49255 387.969 li
91.6925 387.969 li
4.49255 390.583 li
.380392 .380392 .376471 rgb
f
149.397 390.583 mo
149.397 387.969 li
242.816 387.969 li
149.397 390.583 li
f
121.943 400.136 mo
93.4964 400.136 li
93.4964 396.114 li
117.961 396.114 li
120.16 396.114 121.943 397.896 121.943 400.095 cv
121.943 400.136 li
cp
.235294 .235294 .231373 rgb
f
220.196 422.562 mo
215.368 422.562 li
215.368 380.918 li
220.196 380.918 li
220.196 422.562 li
cp
.113725 .113725 .105882 rgb
f
222.361 174.847 mo
219.009 174.847 li
219.009 170.848 li
222.361 170.848 li
222.361 174.847 li
cp
.235294 .235294 .231373 rgb
f
43.8652 176.96 mo
4.38643 176.74 li
4.36839 179.971 li
43.8472 180.191 li
43.8652 176.96 li
cp
.407843 .403922 .403922 rgb
f
1.67822 190.344 mo
1.63044 190.338 li
.327045 190.165 -.300015 188.838 .139431 187.35 cv
1.9242 181.389 2.68913 175.15 2.39682 168.896 cv
2.32024 167.335 3.42804 166.253 4.9657 166.479 cv
5.02162 166.487 li
6.55684 166.713 7.88851 168.15 7.90217 169.697 cv
7.98134 175.9 7.00637 182.092 5.01398 188.007 cv
4.51324 189.481 2.97917 190.517 1.67822 190.344 cv
cp
.203922 .203922 .2 rgb
f
73.4544 227.706 mo
90.2419 200.239 li
107.127 188.047 li
108.219 187.259 108.465 185.735 107.677 184.643 cv
106.889 183.553 105.364 183.305 104.273 184.094 cv
86.5932 196.86 li
72.1124 224.455 li
67.1585 225.506 li
65.814 227.706 li
73.4544 227.706 li
.235294 .235294 .231373 rgb
f
101.147 190.182 mo
82.7465 200.151 li
82.2038 200.445 81.5255 200.244 81.2315 199.701 cv
80.9374 199.158 81.1392 198.48 81.6818 198.186 cv
100.082 188.217 li
100.625 187.923 101.303 188.124 101.597 188.667 cv
101.891 189.21 101.689 189.888 101.147 190.182 cv
107.849 185.44 mo
107.213 184.253 105.736 183.806 104.548 184.442 cv
77.9858 198.678 li
55.0454 223.439 li
48.0751 224.993 li
45.2211 227.706 li
54.5213 227.706 li
80.8686 202.666 li
106.852 188.74 li
108.039 188.104 108.485 186.626 107.849 185.44 cv
.341176 .341176 .337255 rgb
f
133.168 181.918 mo
130.526 181.918 li
130.526 177.804 li
133.168 177.804 li
133.168 181.918 li
cp
f
48.0392 184.687 mo
48.1273 184.436 48.7147 184.259 48.5989 184.02 cv
48.459 183.73 47.6433 183.492 47.3248 183.45 cv
46.9436 184.548 45.5305 187.426 48.4557 189.732 cv
49.0367 189.381 46.8408 188.102 48.0392 184.687 cv
cp
.235294 .235294 .231373 rgb
f
66.009 168.348 mo
62.9391 168.348 li
62.9391 166.518 li
66.009 166.518 li
66.009 168.348 li
cp
f
69.0274 165.841 mo
68.0959 165.841 li
68.0959 162.922 li
69.0274 162.922 li
69.0274 165.841 li
cp
f
69.4168 168.835 mo
64.5971 168.835 li
64.5971 163.869 li
69.4168 163.869 li
69.4168 168.835 li
cp
f
54.5028 188.795 mo
54.5028 189.588 53.8571 190.234 53.0587 190.234 cv
45.2381 190.234 li
44.2161 190.234 43.5195 189.196 43.9059 188.251 cv
44.7703 186.11 li
44.9941 185.566 45.5177 185.21 46.1077 185.205 cv
53.0536 185.19 li
53.0639 185.19 li
53.8571 185.19 54.5028 185.835 54.5028 186.629 cv
54.5028 188.795 li
69.4169 182.139 mo
69.4169 175.692 li
34.5531 175.692 li
33.647 175.692 32.9123 176.427 32.9123 177.333 cv
32.9123 179.64 li
32.9123 180.541 33.6406 181.216 34.539 181.281 cv
35.1842 181.327 35.7243 181.531 36.1514 181.834 cv
36.8227 182.306 37.2039 183.023 37.2651 183.761 cv
37.3108 184.305 37.1785 184.864 36.8531 185.337 cv
28.4834 201.355 li
38.4396 203.77 li
38.6939 202.626 li
37.9515 201.405 li
41.1295 194.678 li
42.8685 194.658 li
42.9551 194.002 li
42.1974 192.451 li
42.6602 191.312 li
55.1385 191.312 li
59.9217 185.343 li
59.903 183.988 62.0357 184.13 64.0634 184.272 cv
65.893 184.401 67.6372 184.529 67.6372 183.557 cv
69.4169 182.139 li
f
41.8721 190.549 mo
36.3014 188.769 li
29.9871 200.673 li
37.411 202.474 li
36.798 201.466 li
41.8721 190.549 li
.341176 .341176 .337255 rgb
f
67.5163 164.113 mo
67.5163 165.377 66.4918 166.401 65.2281 166.401 cv
63.9644 166.401 62.94 165.377 62.94 164.113 cv
62.94 162.849 63.9644 161.825 65.2281 161.825 cv
66.4918 161.825 67.5163 162.849 67.5163 164.113 cv
cp
f
66.6744 164.113 mo
66.6744 164.912 66.0268 165.559 65.2281 165.559 cv
64.4293 165.559 63.7818 164.912 63.7818 164.113 cv
63.7818 163.314 64.4293 162.667 65.2281 162.667 cv
66.0268 162.667 66.6744 163.314 66.6744 164.113 cv
cp
.235294 .235294 .231373 rgb
f
29.9871 200.673 mo
38.1854 185.151 li
43.8653 185.151 li
38.1854 186.591 li
36.8205 188.935 li
36.3014 188.769 li
29.9871 200.673 li
.427451 .427451 .423529 rgb
f
29.9871 200.673 mo
29.9871 200.673 li
36.3014 188.769 li
36.8205 188.935 li
29.9871 200.673 li
.505882 .505882 .501961 rgb
f
220.555 175.741 mo
105.7 175.741 li
105.7 169.954 li
220.555 169.954 li
220.555 175.741 li
cp
.341176 .341176 .337255 rgb
f
131.034 182.6 mo
41.8403 182.6 li
41.8403 168.174 li
131.034 168.174 li
131.034 182.6 li
.235294 .235294 .231373 rgb
f
108.481 170.816 mo
68.2521 170.816 li
68.2521 165.33 li
108.481 165.33 li
108.481 170.816 li
.341176 .341176 .337255 rgb
f
127.58 179.861 mo
127.58 185.347 li
48.9501 185.347 li
48.9501 179.861 li
127.58 179.861 li
cp
f
97.7129 165.33 mo
83.2873 165.33 li
83.2873 163.501 li
97.7129 163.501 li
97.7129 165.33 li
cp
.235294 .235294 .231373 rgb
f
45.2209 175.917 mo
38.4597 175.917 li
38.4597 169.292 li
45.2209 169.292 li
45.2209 175.917 li
cp
.341176 .341176 .337255 rgb
f
138.755 177.521 mo
136.114 177.521 li
136.114 168.174 li
138.755 168.174 li
138.755 177.521 li
cp
.235294 .235294 .231373 rgb
f
215.657 178.352 mo
141.652 178.352 li
140.726 178.352 139.975 177.601 139.975 176.676 cv
139.975 169.019 li
139.975 168.094 140.726 167.343 141.652 167.343 cv
215.657 167.343 li
216.582 167.343 217.333 168.094 217.333 169.019 cv
217.333 176.676 li
217.333 177.601 216.582 178.352 215.657 178.352 cv
cp
f
135.098 182.6 mo
132.456 182.6 li
132.456 168.174 li
135.098 168.174 li
135.098 182.6 li
cp
f
136.927 166.528 mo
134.644 166.528 li
136.668 155.305 li
136.927 155.305 li
136.927 166.528 li
cp
135.14 153.476 mo
132.456 168.357 li
138.756 168.357 li
138.756 153.476 li
135.14 153.476 li
cp
f
97.7281 172.34 mo
79.1068 172.34 li
78.2737 172.34 77.5983 171.664 77.5983 170.831 cv
77.5983 170.816 li
99.2367 170.816 li
99.2367 170.831 li
99.2367 171.664 98.5613 172.34 97.7281 172.34 cv
.2 .2 .192157 rgb
f
99.2367 170.816 mo
77.5983 170.816 li
77.5983 170.8 li
77.5983 169.967 78.2737 169.292 79.1068 169.292 cv
97.7281 169.292 li
98.5613 169.292 99.2367 169.967 99.2367 170.8 cv
99.2367 170.816 li
.270588 .270588 .266667 rgb
f
127.809 177.062 mo
127.809 177.315 127.604 177.521 127.351 177.521 cv
48.0898 177.521 li
47.8363 177.521 47.631 177.315 47.631 177.062 cv
47.631 176.808 47.8363 176.603 48.0898 176.603 cv
127.351 176.603 li
127.604 176.603 127.809 176.808 127.809 177.062 cv
cp
.113725 .113725 .105882 rgb
f
127.58 174.625 mo
127.58 175.046 127.239 175.387 126.818 175.387 cv
120.57 175.387 li
120.15 175.387 119.809 175.046 119.809 174.625 cv
119.809 174.205 120.15 173.863 120.57 173.863 cv
126.818 173.863 li
127.239 173.863 127.58 174.205 127.58 174.625 cv
cp
f
127.58 172.339 mo
127.58 172.76 127.239 173.101 126.818 173.101 cv
120.57 173.101 li
120.15 173.101 119.809 172.76 119.809 172.339 cv
119.809 171.919 120.15 171.578 120.57 171.578 cv
126.818 171.578 li
127.239 171.578 127.58 171.919 127.58 172.339 cv
cp
f
127.58 170.054 mo
127.58 170.475 127.239 170.816 126.818 170.816 cv
120.57 170.816 li
120.15 170.816 119.809 170.475 119.809 170.054 cv
119.809 169.633 120.15 169.292 120.57 169.292 cv
126.818 169.292 li
127.239 169.292 127.58 169.633 127.58 170.054 cv
cp
f
127.58 182.604 mo
127.58 185.347 li
68.5161 185.347 li
68.7478 184.823 69.0769 184.36 69.4671 183.969 cv
70.3083 183.128 71.4785 182.604 72.7707 182.604 cv
127.58 182.604 li
cp
.235294 .235294 .231373 rgb
f
114.374 187.883 mo
97.0263 187.883 li
97.0263 184.065 li
114.374 184.065 li
114.374 187.883 li
cp
f
133.983 211.226 mo
133.517 211.63 132.811 211.579 132.407 211.113 cv
118.702 195.298 li
118.298 194.831 118.348 194.126 118.814 193.721 cv
119.281 193.317 119.987 193.368 120.391 193.834 cv
134.096 209.649 li
134.5 210.116 134.45 210.822 133.983 211.226 cv
152.893 225.458 mo
147.39 224.455 li
119.23 190.555 li
106.852 183.922 li
105.664 183.286 104.187 183.733 103.551 184.919 cv
102.915 186.106 103.361 187.584 104.548 188.22 cv
116.183 194.455 li
146.312 227.706 li
154.93 227.706 li
152.893 225.458 li
.341176 .341176 .337255 rgb
f
95.8843 175.692 mo
80.8491 175.692 li
80.8491 173.132 li
95.8843 173.132 li
95.8843 175.692 li
cp
.113725 .113725 .105882 rgb
f
62.6662 175.692 mo
47.631 175.692 li
47.631 173.819 li
62.6662 173.819 li
62.6662 175.692 li
cp
f
57.2537 172.688 mo
47.631 172.688 li
47.631 170.816 li
57.2537 170.816 li
57.2537 172.688 li
cp
f
83.4066 176.528 mo
83.4066 174.806 li
83.6656 174.806 li
83.6656 176.528 li
83.4066 176.528 li
cp
.388235 .305882 .258824 rgb
f
85.0753 176.409 mo
85.0753 174.924 li
91.5134 174.924 li
91.93 174.924 93.5935 175.253 93.5935 175.659 cv
93.5935 175.674 li
93.5935 176.08 91.93 176.409 91.5134 176.409 cv
85.0753 176.409 li
cp
.796078 .733333 .627451 rgb
f
83.5362 176.647 mo
83.5362 174.687 li
90.7287 174.687 li
90.7287 176.647 li
83.5362 176.647 li
cp
.643137 .541176 .482353 rgb
f
83.14 176.647 mo
83.14 174.687 li
83.399 174.687 li
83.399 176.647 li
83.14 176.647 li
cp
f
84.7933 174.679 mo
84.7933 174.412 li
89.4562 174.412 li
89.4562 174.679 li
89.4562 175.098 89.1083 175.437 88.6791 175.437 cv
85.5704 175.437 li
85.1412 175.437 84.7933 175.098 84.7933 174.679 cv
cp
.388235 .305882 .258824 rgb
f
84.7933 176.921 mo
84.7933 176.654 li
84.7933 176.236 85.1412 175.897 85.5704 175.897 cv
88.6791 175.897 li
89.1083 175.897 89.4562 176.236 89.4562 176.654 cv
89.4562 176.921 li
84.7933 176.921 li
cp
f
83.4066 179.037 mo
83.4066 177.315 li
83.6656 177.315 li
83.6656 179.037 li
83.4066 179.037 li
cp
f
85.0753 178.918 mo
85.0753 177.434 li
91.5134 177.434 li
91.93 177.434 93.5935 177.763 93.5935 178.169 cv
93.5935 178.183 li
93.5935 178.589 91.93 178.918 91.5134 178.918 cv
85.0753 178.918 li
cp
.796078 .733333 .627451 rgb
f
83.5362 179.156 mo
83.5362 177.196 li
90.7287 177.196 li
90.7287 179.156 li
83.5362 179.156 li
cp
.643137 .541176 .482353 rgb
f
83.14 179.156 mo
83.14 177.196 li
83.399 177.196 li
83.399 179.156 li
83.14 179.156 li
cp
f
84.7933 177.189 mo
84.7933 176.921 li
89.4562 176.921 li
89.4562 177.189 li
89.4562 177.607 89.1083 177.946 88.6791 177.946 cv
85.5704 177.946 li
85.1412 177.946 84.7933 177.607 84.7933 177.189 cv
cp
.388235 .305882 .258824 rgb
f
84.7933 179.431 mo
84.7933 179.163 li
84.7933 178.745 85.1412 178.406 85.5704 178.406 cv
88.6791 178.406 li
89.1083 178.406 89.4562 178.745 89.4562 179.163 cv
89.4562 179.431 li
84.7933 179.431 li
cp
f
83.4066 181.546 mo
83.4066 179.824 li
83.6656 179.824 li
83.6656 181.546 li
83.4066 181.546 li
cp
f
85.0753 181.428 mo
85.0753 179.943 li
91.5134 179.943 li
91.93 179.943 93.5935 180.272 93.5935 180.678 cv
93.5935 180.693 li
93.5935 181.098 91.93 181.428 91.5134 181.428 cv
85.0753 181.428 li
cp
.796078 .733333 .627451 rgb
f
83.5362 181.665 mo
83.5362 179.705 li
90.7287 179.705 li
90.7287 181.665 li
83.5362 181.665 li
cp
.643137 .541176 .482353 rgb
f
83.14 181.665 mo
83.14 179.705 li
83.399 179.705 li
83.399 181.665 li
83.14 181.665 li
cp
f
84.7933 179.698 mo
84.7933 179.431 li
89.4562 179.431 li
89.4562 179.698 li
89.4562 180.116 89.1083 180.455 88.6791 180.455 cv
85.5704 180.455 li
85.1412 180.455 84.7933 180.116 84.7933 179.698 cv
cp
.388235 .305882 .258824 rgb
f
84.7933 181.94 mo
84.7933 181.673 li
84.7933 181.254 85.1412 180.915 85.5704 180.915 cv
88.6791 180.915 li
89.1083 180.915 89.4562 181.254 89.4562 181.673 cv
89.4562 181.94 li
84.7933 181.94 li
cp
f
83.4066 184.056 mo
83.4066 182.333 li
83.6656 182.333 li
83.6656 184.056 li
83.4066 184.056 li
cp
f
85.0753 183.937 mo
85.0753 182.452 li
91.5134 182.452 li
91.93 182.452 93.5935 182.781 93.5935 183.187 cv
93.5935 183.202 li
93.5935 183.608 91.93 183.937 91.5134 183.937 cv
85.0753 183.937 li
cp
.796078 .733333 .627451 rgb
f
83.5362 184.174 mo
83.5362 182.215 li
90.7287 182.215 li
90.7287 184.174 li
83.5362 184.174 li
cp
.643137 .541176 .482353 rgb
f
83.14 184.174 mo
83.14 182.215 li
83.399 182.215 li
83.399 184.174 li
83.14 184.174 li
cp
f
84.7933 182.207 mo
84.7933 181.94 li
89.4562 181.94 li
89.4562 182.207 li
89.4562 182.625 89.1083 182.964 88.6791 182.964 cv
85.5704 182.964 li
85.1412 182.964 84.7933 182.625 84.7933 182.207 cv
cp
.388235 .305882 .258824 rgb
f
84.7933 184.449 mo
84.7933 184.182 li
84.7933 183.764 85.1412 183.425 85.5704 183.425 cv
88.6791 183.425 li
89.1083 183.425 89.4562 183.764 89.4562 184.182 cv
89.4562 184.449 li
84.7933 184.449 li
cp
f
83.4066 186.565 mo
83.4066 184.843 li
83.6656 184.843 li
83.6656 186.565 li
83.4066 186.565 li
cp
f
85.0753 186.446 mo
85.0753 184.961 li
91.5134 184.961 li
91.93 184.961 93.5935 185.29 93.5935 185.696 cv
93.5935 185.711 li
93.5935 186.117 91.93 186.446 91.5134 186.446 cv
85.0753 186.446 li
cp
.796078 .733333 .627451 rgb
f
83.5362 186.684 mo
83.5362 184.724 li
90.7287 184.724 li
90.7287 186.684 li
83.5362 186.684 li
cp
.643137 .541176 .482353 rgb
f
83.14 186.684 mo
83.14 184.724 li
83.399 184.724 li
83.399 186.684 li
83.14 186.684 li
cp
f
84.7933 184.716 mo
84.7933 184.449 li
89.4562 184.449 li
89.4562 184.716 li
89.4562 185.135 89.1083 185.474 88.6791 185.474 cv
85.5704 185.474 li
85.1412 185.474 84.7933 185.135 84.7933 184.716 cv
cp
.388235 .305882 .258824 rgb
f
84.7933 186.958 mo
84.7933 186.691 li
84.7933 186.273 85.1412 185.934 85.5704 185.934 cv
88.6791 185.934 li
89.1083 185.934 89.4562 186.273 89.4562 186.691 cv
89.4562 186.958 li
84.7933 186.958 li
cp
f
83.4066 189.074 mo
83.4066 187.352 li
83.6656 187.352 li
83.6656 189.074 li
83.4066 189.074 li
cp
f
85.0753 188.955 mo
85.0753 187.471 li
91.5134 187.471 li
91.93 187.471 93.5935 187.8 93.5935 188.206 cv
93.5935 188.22 li
93.5935 188.626 91.93 188.955 91.5134 188.955 cv
85.0753 188.955 li
cp
.796078 .733333 .627451 rgb
f
83.5362 189.193 mo
83.5362 187.233 li
90.7287 187.233 li
90.7287 189.193 li
83.5362 189.193 li
cp
.643137 .541176 .482353 rgb
f
83.14 189.193 mo
83.14 187.233 li
83.399 187.233 li
83.399 189.193 li
83.14 189.193 li
cp
f
84.7933 187.226 mo
84.7933 186.958 li
89.4562 186.958 li
89.4562 187.226 li
89.4562 187.644 89.1083 187.983 88.6791 187.983 cv
85.5704 187.983 li
85.1412 187.983 84.7933 187.644 84.7933 187.226 cv
cp
.388235 .305882 .258824 rgb
f
84.7933 189.468 mo
84.7933 189.2 li
84.7933 188.782 85.1412 188.443 85.5704 188.443 cv
88.6791 188.443 li
89.1083 188.443 89.4562 188.782 89.4562 189.2 cv
89.4562 189.468 li
84.7933 189.468 li
cp
f
83.4066 191.583 mo
83.4066 189.861 li
83.6656 189.861 li
83.6656 191.583 li
83.4066 191.583 li
cp
f
85.0753 191.465 mo
85.0753 189.98 li
91.5134 189.98 li
91.93 189.98 93.5935 190.309 93.5935 190.715 cv
93.5935 190.73 li
93.5935 191.136 91.93 191.465 91.5134 191.465 cv
85.0753 191.465 li
cp
.796078 .733333 .627451 rgb
f
83.5362 191.702 mo
83.5362 189.742 li
90.7287 189.742 li
90.7287 191.702 li
83.5362 191.702 li
cp
.643137 .541176 .482353 rgb
f
83.14 191.702 mo
83.14 189.742 li
83.399 189.742 li
83.399 191.702 li
83.14 191.702 li
cp
f
84.7933 189.735 mo
84.7933 189.468 li
89.4562 189.468 li
89.4562 189.735 li
89.4562 190.153 89.1083 190.492 88.6791 190.492 cv
85.5704 190.492 li
85.1412 190.492 84.7933 190.153 84.7933 189.735 cv
cp
.388235 .305882 .258824 rgb
f
84.7933 191.977 mo
84.7933 191.71 li
84.7933 191.291 85.1412 190.952 85.5704 190.952 cv
88.6791 190.952 li
89.1083 190.952 89.4562 191.291 89.4562 191.71 cv
89.4562 191.977 li
84.7933 191.977 li
cp
f
83.4066 194.093 mo
83.4066 192.37 li
83.6656 192.37 li
83.6656 194.093 li
83.4066 194.093 li
cp
f
85.0753 193.974 mo
85.0753 192.489 li
91.5134 192.489 li
91.93 192.489 93.5935 192.818 93.5935 193.224 cv
93.5935 193.239 li
93.5935 193.645 91.93 193.974 91.5134 193.974 cv
85.0753 193.974 li
cp
.796078 .733333 .627451 rgb
f
83.5362 194.211 mo
83.5362 192.252 li
90.7287 192.252 li
90.7287 194.211 li
83.5362 194.211 li
cp
.643137 .541176 .482353 rgb
f
83.14 194.211 mo
83.14 192.252 li
83.399 192.252 li
83.399 194.211 li
83.14 194.211 li
cp
f
84.7933 192.244 mo
84.7933 191.977 li
89.4562 191.977 li
89.4562 192.244 li
89.4562 192.662 89.1083 193.001 88.6791 193.001 cv
85.5704 193.001 li
85.1412 193.001 84.7933 192.662 84.7933 192.244 cv
cp
.388235 .305882 .258824 rgb
f
84.7933 194.486 mo
84.7933 194.219 li
84.7933 193.801 85.1412 193.462 85.5704 193.462 cv
88.6791 193.462 li
89.1083 193.462 89.4562 193.801 89.4562 194.219 cv
89.4562 194.486 li
84.7933 194.486 li
cp
f
83.4066 196.602 mo
83.4066 194.879 li
83.6656 194.879 li
83.6656 196.602 li
83.4066 196.602 li
cp
f
85.0753 196.483 mo
85.0753 194.998 li
91.5134 194.998 li
91.93 194.998 93.5935 195.327 93.5935 195.733 cv
93.5935 195.748 li
93.5935 196.154 91.93 196.483 91.5134 196.483 cv
85.0753 196.483 li
cp
.796078 .733333 .627451 rgb
f
83.5362 196.721 mo
83.5362 194.761 li
90.7287 194.761 li
90.7287 196.721 li
83.5362 196.721 li
cp
.643137 .541176 .482353 rgb
f
83.14 196.721 mo
83.14 194.761 li
83.399 194.761 li
83.399 196.721 li
83.14 196.721 li
cp
f
84.7933 194.753 mo
84.7933 194.486 li
89.4562 194.486 li
89.4562 194.753 li
89.4562 195.172 89.1083 195.511 88.6791 195.511 cv
85.5704 195.511 li
85.1412 195.511 84.7933 195.172 84.7933 194.753 cv
cp
.388235 .305882 .258824 rgb
f
84.7933 196.995 mo
84.7933 196.728 li
84.7933 196.31 85.1412 195.971 85.5704 195.971 cv
88.6791 195.971 li
89.1083 195.971 89.4562 196.31 89.4562 196.728 cv
89.4562 196.995 li
84.7933 196.995 li
cp
f
83.4066 199.111 mo
83.4066 197.389 li
83.6656 197.389 li
83.6656 199.111 li
83.4066 199.111 li
cp
f
85.0753 198.992 mo
85.0753 197.508 li
91.5134 197.508 li
91.93 197.508 93.5935 197.837 93.5935 198.243 cv
93.5935 198.257 li
93.5935 198.663 91.93 198.992 91.5134 198.992 cv
85.0753 198.992 li
cp
.796078 .733333 .627451 rgb
f
83.5362 199.23 mo
83.5362 197.27 li
90.7287 197.27 li
90.7287 199.23 li
83.5362 199.23 li
cp
.643137 .541176 .482353 rgb
f
83.14 199.23 mo
83.14 197.27 li
83.399 197.27 li
83.399 199.23 li
83.14 199.23 li
cp
f
84.7933 197.263 mo
84.7933 196.995 li
89.4562 196.995 li
89.4562 197.263 li
89.4562 197.681 89.1083 198.02 88.6791 198.02 cv
85.5704 198.02 li
85.1412 198.02 84.7933 197.681 84.7933 197.263 cv
cp
.388235 .305882 .258824 rgb
f
84.7933 199.505 mo
84.7933 199.237 li
84.7933 198.819 85.1412 198.48 85.5704 198.48 cv
88.6791 198.48 li
89.1083 198.48 89.4562 198.819 89.4562 199.237 cv
89.4562 199.505 li
84.7933 199.505 li
cp
f
83.4066 201.62 mo
83.4066 199.898 li
83.6656 199.898 li
83.6656 201.62 li
83.4066 201.62 li
cp
f
85.0753 201.502 mo
85.0753 200.017 li
91.5134 200.017 li
91.93 200.017 93.5935 200.346 93.5935 200.752 cv
93.5935 200.767 li
93.5935 201.173 91.93 201.502 91.5134 201.502 cv
85.0753 201.502 li
cp
.796078 .733333 .627451 rgb
f
83.5362 201.739 mo
83.5362 199.779 li
90.7287 199.779 li
90.7287 201.739 li
83.5362 201.739 li
cp
.643137 .541176 .482353 rgb
f
83.14 201.739 mo
83.14 199.779 li
83.399 199.779 li
83.399 201.739 li
83.14 201.739 li
cp
f
84.7933 199.772 mo
84.7933 199.505 li
89.4562 199.505 li
89.4562 199.772 li
89.4562 200.19 89.1083 200.529 88.6791 200.529 cv
85.5704 200.529 li
85.1412 200.529 84.7933 200.19 84.7933 199.772 cv
cp
.388235 .305882 .258824 rgb
f
84.7933 202.014 mo
84.7933 201.747 li
84.7933 201.328 85.1412 200.989 85.5704 200.989 cv
88.6791 200.989 li
89.1083 200.989 89.4562 201.328 89.4562 201.747 cv
89.4562 202.014 li
84.7933 202.014 li
cp
f
83.4065 204.13 mo
83.4065 202.407 li
83.6656 202.407 li
83.6656 204.13 li
83.4065 204.13 li
f
85.0753 204.011 mo
85.0753 202.526 li
91.5134 202.526 li
91.93 202.526 93.5935 202.855 93.5935 203.261 cv
93.5935 203.276 li
93.5935 203.682 91.93 204.011 91.5134 204.011 cv
85.0753 204.011 li
.796078 .733333 .627451 rgb
f
83.5362 204.248 mo
83.5362 202.289 li
90.7287 202.289 li
90.7287 204.248 li
83.5362 204.248 li
.643137 .541176 .482353 rgb
f
83.14 204.248 mo
83.14 202.289 li
83.399 202.289 li
83.399 204.248 li
83.14 204.248 li
f
84.7933 202.281 mo
84.7933 202.014 li
89.4562 202.014 li
89.4562 202.281 li
89.4562 202.699 89.1083 203.038 88.6791 203.038 cv
85.5704 203.038 li
85.1412 203.038 84.7933 202.699 84.7933 202.281 cv
cp
.388235 .305882 .258824 rgb
f
84.7933 204.523 mo
84.7933 204.256 li
84.7933 203.838 85.1412 203.498 85.5704 203.498 cv
88.6791 203.498 li
89.1083 203.498 89.4563 203.838 89.4563 204.256 cv
89.4563 204.523 li
84.7933 204.523 li
f
83.4065 206.639 mo
83.4065 204.916 li
83.6656 204.916 li
83.6656 206.639 li
83.4065 206.639 li
f
85.0753 206.52 mo
85.0753 205.035 li
91.5134 205.035 li
91.93 205.035 93.5935 205.364 93.5935 205.77 cv
93.5935 205.785 li
93.5935 206.191 91.93 206.52 91.5134 206.52 cv
85.0753 206.52 li
.796078 .733333 .627451 rgb
f
83.5362 206.758 mo
83.5362 204.798 li
90.7287 204.798 li
90.7287 206.758 li
83.5362 206.758 li
.643137 .541176 .482353 rgb
f
83.14 206.758 mo
83.14 204.798 li
83.399 204.798 li
83.399 206.758 li
83.14 206.758 li
f
84.7933 204.79 mo
84.7933 204.523 li
89.4563 204.523 li
89.4563 204.79 li
89.4563 205.209 89.1083 205.548 88.6791 205.548 cv
85.5704 205.548 li
85.1412 205.548 84.7933 205.209 84.7933 204.79 cv
.388235 .305882 .258824 rgb
f
84.7933 207.032 mo
84.7933 206.765 li
84.7933 206.347 85.1412 206.008 85.5704 206.008 cv
88.6791 206.008 li
89.1083 206.008 89.4563 206.347 89.4563 206.765 cv
89.4563 207.032 li
84.7933 207.032 li
f
83.4066 209.148 mo
83.4066 207.426 li
83.6656 207.426 li
83.6656 209.148 li
83.4066 209.148 li
cp
f
85.0753 209.029 mo
85.0753 207.545 li
91.5134 207.545 li
91.93 207.545 93.5935 207.873 93.5935 208.279 cv
93.5935 208.294 li
93.5935 208.7 91.93 209.029 91.5134 209.029 cv
85.0753 209.029 li
.796078 .733333 .627451 rgb
f
83.5362 209.267 mo
83.5362 207.307 li
90.7287 207.307 li
90.7287 209.267 li
83.5362 209.267 li
.643137 .541176 .482353 rgb
f
83.14 209.267 mo
83.14 207.307 li
83.399 207.307 li
83.399 209.267 li
83.14 209.267 li
cp
f
84.7933 207.299 mo
84.7933 207.032 li
89.4563 207.032 li
89.4563 207.299 li
89.4563 207.718 89.1083 208.057 88.6791 208.057 cv
85.5704 208.057 li
85.1412 208.057 84.7933 207.718 84.7933 207.299 cv
.388235 .305882 .258824 rgb
f
84.7933 209.541 mo
84.7933 209.274 li
84.7933 208.856 85.1412 208.517 85.5704 208.517 cv
88.6791 208.517 li
89.1083 208.517 89.4562 208.856 89.4562 209.274 cv
89.4562 209.541 li
84.7933 209.541 li
cp
f
83.4066 211.657 mo
83.4066 209.935 li
83.6656 209.935 li
83.6656 211.657 li
83.4066 211.657 li
cp
f
85.0753 211.539 mo
85.0753 210.054 li
91.5134 210.054 li
91.93 210.054 93.5935 210.383 93.5935 210.789 cv
93.5935 210.804 li
93.5935 211.21 91.93 211.539 91.5134 211.539 cv
85.0753 211.539 li
cp
.796078 .733333 .627451 rgb
f
83.5362 211.776 mo
83.5362 209.816 li
90.7287 209.816 li
90.7287 211.776 li
83.5362 211.776 li
cp
.643137 .541176 .482353 rgb
f
83.14 211.776 mo
83.14 209.816 li
83.399 209.816 li
83.399 211.776 li
83.14 211.776 li
cp
f
84.7933 209.809 mo
84.7933 209.541 li
89.4562 209.541 li
89.4562 209.809 li
89.4562 210.227 89.1083 210.566 88.6791 210.566 cv
85.5704 210.566 li
85.1412 210.566 84.7933 210.227 84.7933 209.809 cv
cp
.388235 .305882 .258824 rgb
f
84.7933 212.051 mo
84.7933 211.784 li
84.7933 211.365 85.1412 211.026 85.5704 211.026 cv
88.6791 211.026 li
89.1083 211.026 89.4562 211.365 89.4562 211.784 cv
89.4562 212.051 li
84.7933 212.051 li
cp
f
83.4066 214.167 mo
83.4066 212.444 li
83.6656 212.444 li
83.6656 214.167 li
83.4066 214.167 li
cp
f
85.0753 214.048 mo
85.0753 212.563 li
91.5134 212.563 li
91.93 212.563 93.5935 212.892 93.5935 213.298 cv
93.5935 213.313 li
93.5935 213.719 91.93 214.048 91.5134 214.048 cv
85.0753 214.048 li
cp
.796078 .733333 .627451 rgb
f
83.5362 214.285 mo
83.5362 212.325 li
90.7287 212.325 li
90.7287 214.285 li
83.5362 214.285 li
cp
.643137 .541176 .482353 rgb
f
83.14 214.285 mo
83.14 212.325 li
83.399 212.325 li
83.399 214.285 li
83.14 214.285 li
cp
f
84.7933 212.318 mo
84.7933 212.051 li
89.4562 212.051 li
89.4562 212.318 li
89.4562 212.736 89.1083 213.075 88.6791 213.075 cv
85.5704 213.075 li
85.1412 213.075 84.7933 212.736 84.7933 212.318 cv
cp
.388235 .305882 .258824 rgb
f
84.7933 214.56 mo
84.7933 214.293 li
84.7933 213.875 85.1412 213.536 85.5704 213.536 cv
88.6791 213.536 li
89.1083 213.536 89.4562 213.875 89.4562 214.293 cv
89.4562 214.56 li
84.7933 214.56 li
cp
f
83.4066 216.676 mo
83.4066 214.954 li
83.6656 214.954 li
83.6656 216.676 li
83.4066 216.676 li
cp
f
85.0753 216.557 mo
85.0753 215.072 li
91.5134 215.072 li
91.93 215.072 93.5935 215.401 93.5935 215.807 cv
93.5935 215.822 li
93.5935 216.228 91.93 216.557 91.5134 216.557 cv
85.0753 216.557 li
cp
.796078 .733333 .627451 rgb
f
83.5362 216.795 mo
83.5362 214.835 li
90.7287 214.835 li
90.7287 216.795 li
83.5362 216.795 li
cp
.643137 .541176 .482353 rgb
f
83.14 216.795 mo
83.14 214.835 li
83.399 214.835 li
83.399 216.795 li
83.14 216.795 li
cp
f
84.7933 214.827 mo
84.7933 214.56 li
89.4562 214.56 li
89.4562 214.827 li
89.4562 215.246 89.1083 215.585 88.6791 215.585 cv
85.5704 215.585 li
85.1412 215.585 84.7933 215.246 84.7933 214.827 cv
cp
.388235 .305882 .258824 rgb
f
84.7933 217.069 mo
84.7933 216.802 li
84.7933 216.384 85.1412 216.045 85.5704 216.045 cv
88.6791 216.045 li
89.1083 216.045 89.4562 216.384 89.4562 216.802 cv
89.4562 217.069 li
84.7933 217.069 li
cp
f
83.4066 219.185 mo
83.4066 217.463 li
83.6656 217.463 li
83.6656 219.185 li
83.4066 219.185 li
cp
f
85.0753 219.066 mo
85.0753 217.581 li
91.5134 217.581 li
91.93 217.581 93.5935 217.911 93.5935 218.316 cv
93.5935 218.331 li
93.5935 218.737 91.93 219.066 91.5134 219.066 cv
85.0753 219.066 li
cp
.796078 .733333 .627451 rgb
f
83.5362 219.304 mo
83.5362 217.344 li
90.7287 217.344 li
90.7287 219.304 li
83.5362 219.304 li
cp
.643137 .541176 .482353 rgb
f
83.14 219.304 mo
83.14 217.344 li
83.399 217.344 li
83.399 219.304 li
83.14 219.304 li
cp
f
84.7933 217.336 mo
84.7933 217.069 li
89.4562 217.069 li
89.4562 217.336 li
89.4562 217.755 89.1083 218.094 88.6791 218.094 cv
85.5704 218.094 li
85.1412 218.094 84.7933 217.755 84.7933 217.336 cv
cp
.388235 .305882 .258824 rgb
f
84.7933 219.578 mo
84.7933 219.311 li
84.7933 218.893 85.1412 218.554 85.5704 218.554 cv
88.6791 218.554 li
89.1083 218.554 89.4562 218.893 89.4562 219.311 cv
89.4562 219.578 li
84.7933 219.578 li
cp
f
149.87 174.879 mo
143.231 174.879 li
142.75 174.879 142.36 174.489 142.36 174.008 cv
142.36 171.687 li
142.36 171.206 142.75 170.816 143.231 170.816 cv
149.87 170.816 li
150.351 170.816 150.741 171.206 150.741 171.687 cv
150.741 174.008 li
150.741 174.489 150.351 174.879 149.87 174.879 cv
cp
.113725 .113725 .105882 rgb
f
160.613 174.879 mo
153.974 174.879 li
153.493 174.879 153.103 174.489 153.103 174.008 cv
153.103 171.687 li
153.103 171.206 153.493 170.816 153.974 170.816 cv
160.613 170.816 li
161.094 170.816 161.484 171.206 161.484 171.687 cv
161.484 174.008 li
161.484 174.489 161.094 174.879 160.613 174.879 cv
cp
f
171.356 174.879 mo
164.717 174.879 li
164.236 174.879 163.846 174.489 163.846 174.008 cv
163.846 171.687 li
163.846 171.206 164.236 170.816 164.717 170.816 cv
171.356 170.816 li
171.837 170.816 172.227 171.206 172.227 171.687 cv
172.227 174.008 li
172.227 174.489 171.837 174.879 171.356 174.879 cv
cp
f
182.099 174.879 mo
175.461 174.879 li
174.979 174.879 174.589 174.489 174.589 174.008 cv
174.589 171.687 li
174.589 171.206 174.979 170.816 175.461 170.816 cv
182.099 170.816 li
182.58 170.816 182.97 171.206 182.97 171.687 cv
182.97 174.008 li
182.97 174.489 182.58 174.879 182.099 174.879 cv
cp
f
192.842 174.879 mo
186.204 174.879 li
185.722 174.879 185.332 174.489 185.332 174.008 cv
185.332 171.687 li
185.332 171.206 185.722 170.816 186.204 170.816 cv
192.842 170.816 li
193.323 170.816 193.713 171.206 193.713 171.687 cv
193.713 174.008 li
193.713 174.489 193.323 174.879 192.842 174.879 cv
cp
f
203.585 174.879 mo
196.947 174.879 li
196.465 174.879 196.075 174.489 196.075 174.008 cv
196.075 171.687 li
196.075 171.206 196.465 170.816 196.947 170.816 cv
203.585 170.816 li
204.066 170.816 204.456 171.206 204.456 171.687 cv
204.456 174.008 li
204.456 174.489 204.066 174.879 203.585 174.879 cv
cp
f
214.328 174.879 mo
207.69 174.879 li
207.209 174.879 206.818 174.489 206.818 174.008 cv
206.818 171.687 li
206.818 171.206 207.209 170.816 207.69 170.816 cv
214.328 170.816 li
214.809 170.816 215.2 171.206 215.2 171.687 cv
215.2 174.008 li
215.2 174.489 214.809 174.879 214.328 174.879 cv
cp
f
142.284 228.052 mo
82.5643 228.052 li
81.1259 228.052 79.9597 226.886 79.9597 225.448 cv
79.9597 203.793 li
79.9597 202.355 81.1259 201.189 82.5643 201.189 cv
142.284 201.189 li
143.722 201.189 144.888 202.355 144.888 203.793 cv
144.888 225.448 li
144.888 226.886 143.722 228.052 142.284 228.052 cv
.431373 .458824 .305882 rgb
f
141.483 226.057 mo
141.368 226.057 141.251 226.037 141.136 225.997 cv
117.798 217.691 li
117.262 217.499 116.981 216.909 117.173 216.373 cv
117.324 215.949 117.722 215.687 118.146 215.687 cv
118.26 215.687 118.377 215.706 118.491 215.746 cv
141.829 224.053 li
142.365 224.244 142.645 224.834 142.454 225.37 cv
142.305 225.793 141.906 226.057 141.483 226.057 cv
.321569 .345098 .227451 rgb
f
105.341 213.194 mo
105.227 213.194 105.11 213.175 104.995 213.135 cv
82.3211 205.066 li
81.7852 204.875 81.505 204.284 81.6964 203.748 cv
81.8457 203.325 82.2438 203.063 82.6689 203.063 cv
82.7836 203.063 82.9001 203.082 83.0143 203.122 cv
105.688 211.19 li
106.224 211.382 106.504 211.971 106.313 212.508 cv
106.164 212.931 105.767 213.194 105.341 213.194 cv
f
118.807 213.194 mo
118.382 213.194 117.985 212.931 117.836 212.508 cv
117.645 211.971 117.924 211.382 118.46 211.19 cv
141.136 203.122 li
141.251 203.082 141.367 203.062 141.482 203.062 cv
141.906 203.062 142.303 203.325 142.454 203.748 cv
142.645 204.284 142.365 204.875 141.829 205.066 cv
119.154 213.135 li
119.039 213.175 118.922 213.194 118.807 213.194 cv
f
82.6675 226.057 mo
82.2425 226.057 81.8457 225.793 81.6964 225.37 cv
81.505 224.834 81.7852 224.244 82.3211 224.053 cv
105.66 215.746 li
105.775 215.706 105.892 215.687 106.007 215.687 cv
106.432 215.687 106.828 215.949 106.977 216.373 cv
107.169 216.909 106.889 217.499 106.353 217.691 cv
83.0143 225.997 li
82.8995 226.037 82.7826 226.057 82.6675 226.057 cv
f
358.38 159.671 mo
358.513 159.816 358.417 160.031 358.145 160.165 cv
357.776 160.349 357.23 160.339 356.971 160.105 cv
355.734 158.992 355.061 156.896 355.714 153.595 cv
356.589 153.786 357.419 153.968 358.207 154.14 cv
357.196 156.825 357.452 158.662 358.38 159.671 cv
cp
.113725 .113725 .105882 rgb
f
361.696 160.929 mo
361.499 160.975 li
361.347 161.001 361.189 161.021 361.031 161.034 cv
360.215 161.139 359.353 161.192 358.471 161.192 cv
357.009 161.192 355.93 161.146 354.62 160.929 cv
353.52 160.751 352.711 159.803 352.711 158.677 cv
352.711 155.445 li
355.758 155.386 li
357.134 155.359 li
360.459 155.3 li
361.558 155.28 362.46 156.143 362.486 157.242 cv
362.506 157.947 362.559 158.684 362.651 159.461 cv
362.684 159.744 362.631 160.02 362.506 160.25 cv
362.401 160.468 362.236 160.652 362.025 160.777 cv
361.927 160.843 361.815 160.896 361.696 160.929 cv
cp
363.933 153.004 mo
350.495 152.785 li
346.075 154.596 li
346.075 155.261 li
350.67 161.238 li
351.098 161.343 li
351.236 161.376 li
353.757 162.002 356.186 162.311 358.471 162.311 cv
359.412 162.311 360.32 162.252 361.189 162.14 cv
361.347 162.127 361.505 162.107 361.663 162.081 cv
361.835 162.048 li
363.079 161.778 363.921 160.613 363.763 159.329 cv
363.684 158.644 363.632 157.993 363.612 157.374 cv
363.592 156.821 363.803 156.281 364.185 155.886 cv
364.573 155.484 365.106 155.261 365.659 155.261 cv
369.935 155.261 li
370.871 155.261 371.63 154.502 371.63 153.565 cv
371.63 153.548 li
363.933 153.004 li
cp
.188235 .188235 .188235 rgb
f
347.854 179.981 mo
337.333 178.991 li
336.42 178.971 335.693 178.077 335.744 177.019 cv
336.086 169.878 337.532 161.275 339.345 155.851 cv
340.102 153.589 338.052 153.326 338.121 153.168 cv
352.089 153.168 li
349.311 178.506 li
349.223 179.359 348.594 179.997 347.854 179.981 cv
cp
.113725 .113725 .105882 rgb
f
338.197 175.267 mo
338.588 169.138 340.925 159.027 341.572 156.647 cv
341.709 156.144 342.126 155.802 342.597 155.802 cv
348.239 155.802 li
348.879 155.802 349.377 156.423 349.304 157.132 cv
347.178 176.111 li
347.112 176.753 346.601 177.22 346.023 177.166 cv
339.178 176.522 li
338.6 176.468 338.156 175.912 338.197 175.267 cv
cp
.235294 .235294 .231373 rgb
f
387.546 150.856 mo
386.326 150.856 li
386.326 147.118 li
387.546 147.118 li
387.546 150.856 li
cp
.113725 .113725 .105882 rgb
f
338.114 145.436 mo
337.485 145.436 336.909 145.89 336.761 146.503 cv
336.761 146.503 336.116 149.183 335.7 150.907 cv
335.499 151.743 334.753 152.382 333.891 152.461 cv
333.877 152.463 li
333.602 152.488 333.374 152.713 333.349 152.982 cv
333.331 153.183 li
333.304 153.48 333.527 153.721 333.828 153.721 cv
336.491 153.721 li
337.207 153.721 li
384.494 153.721 li
384.944 153.721 385.342 153.361 385.382 152.917 cv
385.987 146.24 li
386.027 145.796 385.694 145.436 385.244 145.436 cv
338.114 145.436 li
cp
.235294 .235294 .231373 rgb
f
386.482 152.538 mo
385.262 152.538 li
385.262 146.277 li
386.482 146.277 li
386.482 152.538 li
cp
f
384.57 145.436 mo
381.3 145.436 li
381.3 145.424 li
381.3 144.76 381.838 144.222 382.502 144.222 cv
383.367 144.222 li
384.032 144.222 384.57 144.76 384.57 145.424 cv
384.57 145.436 li
cp
.113725 .113725 .105882 rgb
f
385.362 147.585 mo
351.938 147.585 li
351.537 150.239 li
351.266 150.198 li
351.661 147.585 li
351.286 147.585 li
350.885 150.239 li
350.614 150.198 li
351.009 147.585 li
350.635 147.585 li
350.233 150.239 li
349.962 150.198 li
350.357 147.585 li
349.983 147.585 li
349.582 150.239 li
349.31 150.198 li
349.705 147.585 li
349.331 147.585 li
348.93 150.239 li
348.658 150.198 li
349.054 147.585 li
348.679 147.585 li
348.278 150.239 li
348.007 150.198 li
348.402 147.585 li
348.027 147.585 li
347.626 150.239 li
347.355 150.198 li
347.75 147.585 li
347.376 147.585 li
346.974 150.239 li
346.703 150.198 li
347.098 147.585 li
346.724 147.585 li
346.323 150.239 li
346.051 150.198 li
346.446 147.585 li
346.072 147.585 li
345.671 150.239 li
345.399 150.198 li
345.794 147.585 li
345.42 147.585 li
345.019 150.239 li
344.748 150.198 li
345.143 147.585 li
344.768 147.585 li
344.367 150.239 li
344.096 150.198 li
344.491 147.585 li
344.117 147.585 li
343.715 150.239 li
343.444 150.198 li
343.839 147.585 li
343.465 147.585 li
343.063 150.239 li
342.792 150.198 li
343.187 147.585 li
342.813 147.585 li
342.412 150.239 li
342.14 150.198 li
342.535 147.585 li
336.608 147.585 li
336.273 147.585 335.984 147.824 335.922 148.154 cv
335.41 150.869 li
335.329 151.299 335.658 151.697 336.096 151.697 cv
385.362 151.697 li
385.747 151.697 386.059 151.384 386.059 150.999 cv
386.059 148.283 li
386.059 147.898 385.747 147.585 385.362 147.585 cv
cp
f
343.753 173.166 mo
343.753 173.807 343.233 174.327 342.592 174.327 cv
341.951 174.327 341.432 173.807 341.432 173.166 cv
341.432 172.525 341.951 172.006 342.592 172.006 cv
343.233 172.006 343.753 172.525 343.753 173.166 cv
cp
f
330.79 418.386 mo
331.012 418.715 331.232 419.052 331.457 419.369 cv
339.107 413.915 li
339.304 413.774 339.357 413.503 339.226 413.299 cv
339.189 413.241 li
339.124 413.14 339.02 413.069 338.902 413.045 cv
338.784 413.021 338.662 413.045 338.562 413.113 cv
330.79 418.386 li
cp
.203922 .203922 .2 rgb
f
327.155 383 mo
318.092 383.963 li
319.27 395.051 324.443 409.003 330.79 418.386 cv
338.364 413.317 li
332.846 405.181 328.176 392.616 327.155 383 cv
f
320.666 384.199 mo
324.695 383.771 li
325.87 393.826 330.547 406.311 336.257 414.727 cv
337.101 414.162 li
331.377 405.733 326.706 393.154 325.645 383.161 cv
325.592 382.657 li
319.549 383.299 li
319.603 383.802 li
320.757 394.671 325.83 408.349 332.052 417.542 cv
332.892 416.98 li
326.849 408.056 321.904 394.838 320.666 384.199 cv
.341176 .341176 .337255 rgb
f
323.127 383.428 mo
322.121 383.535 li
323.235 394.04 328.141 407.259 334.156 416.134 cv
334.998 415.57 li
329.066 406.823 324.227 393.787 323.127 383.428 cv
f
374.616 368.024 mo
370.41 368 li
371.807 355.615 li
374.685 355.631 li
374.616 368.024 li
cp
.203922 .203922 .2 rgb
f
378.812 371.337 mo
336.28 371.337 li
336.28 367.974 li
378.812 367.974 li
378.812 371.337 li
cp
.341176 .341176 .337255 rgb
f
368.939 374.339 mo
336.28 374.339 li
336.28 372.056 li
368.939 372.056 li
368.939 374.339 li
cp
f
259.26 380.102 mo
259.221 380.096 li
258.138 379.953 257.617 378.851 257.982 377.614 cv
259.465 372.663 260.1 367.48 259.857 362.285 cv
259.794 360.988 260.714 360.089 261.991 360.277 cv
262.038 360.284 li
263.313 360.471 264.419 361.665 264.431 362.95 cv
264.496 368.103 263.686 373.246 262.031 378.16 cv
261.615 379.385 260.341 380.245 259.26 380.102 cv
cp
.203922 .203922 .2 rgb
f
295.718 368.411 mo
263.156 368.411 li
263.156 366.952 li
295.718 366.952 li
295.718 368.411 li
cp
f
293.712 374.373 mo
261.15 374.373 li
261.15 372.914 li
293.712 372.914 li
293.712 374.373 li
cp
f
336.612 375.876 mo
333.23 375.857 li
333.288 365.482 li
336.67 365.501 li
336.612 375.876 li
cp
f
309.01 382.215 mo
309.113 381.928 309.787 381.73 309.655 381.454 cv
309.497 381.122 308.564 380.844 308.2 380.793 cv
307.756 382.049 306.119 385.337 309.455 387.997 cv
310.123 387.598 307.615 386.119 309.01 382.215 cv
cp
f
297.641 366.61 mo
294.58 366.593 li
294.59 364.768 li
297.651 364.785 li
297.641 366.61 li
cp
f
307.056 364.127 mo
306.127 364.122 li
306.143 361.211 li
307.072 361.216 li
307.056 364.127 li
cp
f
313.439 367.148 mo
302.622 367.088 li
302.65 362.136 li
313.466 362.197 li
313.439 367.148 li
cp
f
316.388 386.956 mo
316.383 387.87 315.638 388.606 314.725 388.601 cv
305.766 388.551 li
304.595 388.545 303.804 387.352 304.252 386.271 cv
305.256 383.824 li
305.516 383.202 306.118 382.798 306.794 382.796 cv
314.751 382.823 li
314.757 382.823 li
315.667 382.834 316.407 383.57 316.402 384.48 cv
316.388 386.956 li
333.515 379.433 mo
352.88 379.385 li
355.48 379.421 356.316 377.622 356.585 376.461 cv
356.698 375.971 356.327 375.505 355.824 375.505 cv
333.533 375.505 li
333.582 364.628 li
294.518 364.628 li
291.762 367.677 li
291.716 375.933 li
291.709 377.142 292.641 378.085 293.838 378.256 cv
294.458 378.345 294.984 378.565 295.41 378.87 cv
296.176 379.416 296.609 380.24 296.674 381.085 cv
296.723 381.709 296.568 382.349 296.192 382.888 cv
286.501 401.183 li
297.891 404.014 li
298.19 402.705 li
297.347 401.302 li
301.031 393.616 li
303.023 393.604 li
303.126 392.853 li
302.268 391.072 li
302.806 389.77 li
317.1 389.85 li
329.442 387.632 li
329.483 386.648 li
328.432 386.024 li
328.408 383.071 328.408 384.038 328.421 381.69 cv
333.515 379.433 li
.407843 .403922 .403922 rgb
f
301.908 388.891 mo
295.538 386.817 li
288.228 400.412 li
296.721 402.523 li
296.025 401.364 li
301.908 388.891 li
.203922 .203922 .2 rgb
f
329.971 369.877 mo
329.965 370.974 329.071 371.858 327.974 371.852 cv
292.293 371.653 li
291.196 371.647 290.312 370.753 290.318 369.656 cv
290.324 368.559 291.218 367.675 292.315 367.681 cv
327.996 367.88 li
329.093 367.887 329.977 368.781 329.971 369.877 cv
cp
f
333.539 375.233 mo
312.488 375.115 li
312.05 375.113 311.697 374.756 311.7 374.318 cv
311.7 374.302 li
311.702 373.864 312.059 373.511 312.497 373.513 cv
333.548 373.631 li
333.539 375.233 li
f
317.945 380.146 mo
317.931 380.146 li
317.538 380.143 317.221 379.823 317.223 379.43 cv
317.252 374.341 li
318.69 374.349 li
318.661 379.438 li
318.659 379.831 318.339 380.148 317.945 380.146 cv
f
315.615 377.232 mo
315.611 377.983 314.999 378.588 314.249 378.584 cv
313.498 378.58 312.893 377.968 312.897 377.217 cv
312.901 376.466 313.513 375.861 314.264 375.865 cv
315.014 375.87 315.62 376.482 315.615 377.232 cv
cp
f
302.223 375.058 mo
302.22 375.686 301.708 376.193 301.079 376.189 cv
300.451 376.186 299.945 375.673 299.948 375.045 cv
299.952 374.417 300.464 373.911 301.092 373.914 cv
301.72 373.918 302.227 374.43 302.223 375.058 cv
cp
f
295.718 375.058 mo
295.714 375.686 295.202 376.193 294.574 376.189 cv
293.946 376.186 293.439 375.673 293.443 375.045 cv
293.446 374.417 293.958 373.911 294.587 373.914 cv
295.215 373.918 295.721 374.43 295.718 375.058 cv
cp
f
310.131 374.236 mo
305.471 374.21 li
305.493 370.221 li
310.153 370.247 li
310.131 374.236 li
cp
f
318.664 379 mo
318.661 379.443 li
318.656 380.416 317.859 381.203 316.886 381.198 cv
296.674 381.085 li
296.608 380.24 296.176 379.416 295.41 378.87 cv
318.664 379 li
cp
f
298.11 366.887 mo
292.696 366.857 li
292.702 365.751 li
292.707 364.876 293.42 364.171 294.295 364.176 cv
298.125 364.197 li
298.11 366.887 li
cp
f
305.559 362.395 mo
305.552 363.655 304.525 364.671 303.265 364.664 cv
302.005 364.657 300.989 363.63 300.996 362.37 cv
301.003 361.11 302.03 360.094 303.29 360.101 cv
304.55 360.108 305.566 361.135 305.559 362.395 cv
cp
.407843 .403922 .403922 rgb
f
304.72 362.391 mo
304.715 363.187 304.066 363.829 303.269 363.825 cv
302.473 363.82 301.831 363.171 301.835 362.375 cv
301.84 361.578 302.489 360.936 303.285 360.941 cv
304.082 360.945 304.724 361.594 304.72 362.391 cv
cp
.203922 .203922 .2 rgb
f
318.613 388.048 mo
326.36 385.91 li
327.328 381.998 li
327.303 386.644 li
318.613 388.048 li
.556863 .552941 .552941 rgb
f
319.241 378.078 mo
319.254 375.756 li
332.128 375.828 li
320.375 376.725 li
319.241 378.078 li
f
288.228 400.412 mo
297.719 382.683 li
304.226 382.72 li
297.71 384.333 li
296.131 387.01 li
295.538 386.817 li
288.228 400.412 li
f
288.228 400.412 mo
288.228 400.412 li
295.538 386.817 li
296.131 387.01 li
288.228 400.412 li
.403922 .403922 .4 rgb
f
386.487 372.034 mo
376.833 372.034 li
376.248 372.034 375.774 371.562 375.774 370.979 cv
375.774 368.144 li
375.774 367.562 376.248 367.089 376.833 367.089 cv
386.487 367.089 li
387.072 367.089 387.546 367.562 387.546 368.144 cv
387.546 370.979 li
387.546 371.562 387.072 372.034 386.487 372.034 cv
cp
.235294 .235294 .231373 rgb
f
354.081 366.095 mo
338.593 365.689 li
338.593 375.505 li
356.079 375.505 li
356.079 368.146 li
356.079 367.034 355.193 366.124 354.081 366.095 cv
cp
.203922 .203922 .2 rgb
f
339.226 375.505 mo
334.953 375.505 li
334.953 364.587 li
339.226 364.587 li
339.226 375.505 li
cp
.407843 .403922 .403922 rgb
f
356.357 376.274 mo
335.103 376.274 li
334.069 376.274 333.23 377.113 333.23 378.147 cv
333.23 380.705 li
353.464 380.705 li
355.474 380.705 357.104 379.075 357.104 377.065 cv
357.104 377.021 li
357.104 376.608 356.769 376.274 356.357 376.274 cv
cp
.203922 .203922 .2 rgb
f
378.812 371.337 mo
377.125 371.337 li
377.125 367.83 li
378.812 367.83 li
378.812 371.337 li
cp
.113725 .113725 .105882 rgb
f
381.386 371.337 mo
379.7 371.337 li
379.7 367.83 li
381.386 367.83 li
381.386 371.337 li
cp
f
383.961 371.337 mo
382.275 371.337 li
382.275 367.83 li
383.961 367.83 li
383.961 371.337 li
cp
f
386.536 371.337 mo
384.849 371.337 li
384.849 367.83 li
386.536 367.83 li
386.536 371.337 li
cp
f
367.347 374.903 mo
365.553 374.903 li
365.314 374.903 365.121 374.709 365.121 374.47 cv
365.121 367.74 li
365.121 367.501 365.314 367.308 365.553 367.308 cv
367.347 367.308 li
367.585 367.308 367.779 367.501 367.779 367.74 cv
367.779 374.47 li
367.779 374.709 367.585 374.903 367.347 374.903 cv
cp
.203922 .203922 .2 rgb
f
231.892 71.0276 mo
231.891 73.213 li
231.89 75.2943 233.43 76.9879 235.322 76.9889 cv
243.17 76.9921 li
245.063 76.9928 246.604 75.3005 246.604 73.2194 cv
246.605 71.0337 li
231.892 71.0276 li
231.139 73.2127 mo
231.14 70.2754 li
247.357 70.2825 li
247.356 73.2198 li
247.355 75.7149 245.476 77.7448 243.17 77.7436 cv
235.322 77.7405 li
233.015 77.7396 231.138 75.7083 231.139 73.2127 cv
.341176 .341176 .337255 rgb
f
167.682 65.9044 mo
205.023 65.9205 li
211.423 69.0852 li
212.795 69.7631 214.355 69.9589 215.852 69.6404 cv
243.287 63.8018 li
243.284 71.2503 li
234.005 71.0387 225.573 73.2375 217.96 79.8821 cv
216.256 81.3694 213.972 82.0099 211.764 81.5154 cv
209.292 80.9614 li
208.319 80.7432 207.314 80.7008 206.325 80.8364 cv
168.478 86.0248 li
167.952 86.0968 167.516 85.6476 167.593 85.1222 cv
168.446 79.3024 168.173 73.2031 166.91 66.8582 cv
166.812 66.3655 167.18 65.9043 167.682 65.9044 cv
.490196 .305882 .141176 rgb
f
168.855 71.8577 mo
168.674 70.2764 168.431 68.6748 168.119 67.0533 cv
202.732 67.0689 li
171.538 68.2017 171.012 67.0533 168.855 71.8577 cv
.541176 .376471 .227451 rgb
f
216.469 71.4844 mo
233.312 67.9006 li
233.306 68.6497 233.427 69.3814 233.789 70.0514 cv
227.328 71.2681 221.755 74.0049 216.689 78.4265 cv
216.632 78.4761 214.901 79.8843 213.454 78.199 cv
211.45 75.8663 212.252 72.4823 216.469 71.4844 cv
.792157 .619608 .403922 rgb
f
240.338 76.0676 mo
241.575 76.0684 li
239.504 74.5266 238.386 72.7674 238.816 70.6548 cv
236.723 70.6538 li
236.668 72.6971 237.784 74.5186 240.338 76.0676 cv
.341176 .341176 .337255 rgb
f
234.759 66.2136 mo
238.651 66.2151 li
238.821 61.3764 li
236.264 62.3558 li
233.643 58.6957 li
232.89 59.2592 li
234.592 61.2517 235.15 63.5893 234.759 66.2136 cv
f
253.207 70.0801 mo
290.109 70.0958 li
294.329 70.0976 297.75 66.6787 297.753 62.4591 cv
297.753 62.382 li
253.21 62.3629 li
253.207 70.0801 li
.490196 .305882 .141176 rgb
f
237.448 64.7876 mo
387.544 64.7386 li
387.546 59.8757 li
242.264 59.9267 li
239.605 59.9256 237.449 62.0804 237.448 64.7389 cv
237.448 64.7876 li
.235294 .235294 .231373 rgb
f
235.135 69.8547 mo
235.495 70.6286 236.138 71.2492 237.027 71.5097 cv
237.165 71.548 237.303 71.5786 237.448 71.6016 cv
243.287 71.2492 li
262.632 70.0846 li
262.64 67.2421 li
262.64 64.7521 li
237.448 64.7367 li
234.928 65.2731 234.246 67.993 235.135 69.8547 cv
.529412 .529412 .529412 rgb
f
261.132 68.6689 mo
261.133 66.2528 li
237.625 66.2427 li
236.281 66.6143 236.254 67.9857 236.263 68.2648 cv
236.286 68.9939 236.635 69.8857 237.533 70.0912 cv
261.132 68.6689 li
cp
.854902 .854902 .854902 rgb
f
175.209 94.6367 mo
173.369 91.98 173.596 89.2076 174.441 85.8356 cv
174.528 85.4864 174.584 85.118 174.722 84.7678 cv
174.889 84.3429 177.869 83.1661 177.483 84.439 cv
177.409 84.6844 177.348 84.9416 177.28 85.2032 cv
176.442 88.4323 175.639 92.6619 176.357 95.5691 cv
181.211 98.9832 187.671 97.9591 192.201 102.234 cv
192.066 102.019 li
192.27 102.246 192.474 102.474 192.678 102.702 cv
192.847 102.868 li
193.035 103.1 li
193.411 103.52 193.788 103.94 194.164 104.36 cv
194.061 104.267 193.952 104.192 193.847 104.104 cv
196.422 107.502 197.845 111.559 200.066 115.203 cv
207.117 120.694 216.64 120.263 225.082 118.216 cv
235.032 115.803 241.541 106.358 248.222 99.3999 cv
261.2 85.8826 286.768 92.8278 291.04 70.3711 cv
291.063 70.2531 291.112 70.1358 291.106 70.0142 cv
291.088 69.6262 293.65 68.4656 293.457 69.9317 cv
293.429 70.145 293.128 72.7776 293.086 72.9849 cv
290.207 87.2851 277.722 90.826 264.936 93.0441 cv
251.307 95.4086 244.357 110.531 233.6 117.738 cv
224.833 123.611 208.5 124.374 200.769 116.314 cv
200.825 116.402 li
200.611 116.163 li
200.509 116.067 li
200.339 115.861 li
199.802 115.261 199.264 114.661 198.726 114.061 cv
198.871 114.196 199.025 114.311 199.173 114.441 cv
196.632 111.026 195.135 107.049 192.931 103.394 cv
187.766 99.7935 181.207 100.759 176.499 96.1454 cv
176.515 96.2092 li
176.397 96.0758 176.278 95.9429 176.159 95.8097 cv
175.986 95.6386 li
175.846 95.4577 li
175.419 94.9793 174.993 94.5007 174.566 94.0224 cv
174.773 94.2463 174.992 94.4376 175.209 94.6367 cv
.235294 .235294 .231373 rgb
f
383.02 59.02 mo
382.528 59.6807 382.664 60.6157 383.325 61.1083 cv
383.986 61.601 384.92 61.4648 385.413 60.8041 cv
385.906 60.1435 385.77 59.2085 385.109 58.7158 cv
384.448 58.2232 383.513 58.3594 383.02 59.02 cv
f
168.371 86.0356 mo
168.003 86.0356 167.698 85.7851 167.611 85.4491 cv
167.7 85.7846 168.003 86.0324 168.367 86.0324 cv
168.403 86.0324 168.44 86.03 168.478 86.0248 cv
174.591 85.1868 li
174.59 85.1878 174.59 85.1888 174.59 85.1898 cv
168.478 86.0286 li
168.442 86.0333 168.406 86.0356 168.371 86.0356 cv
177.382 84.8066 mo
177.382 84.8058 177.382 84.805 177.382 84.8041 cv
193.03 82.659 li
177.382 84.8066 li
167.759 83.8657 mo
167.925 82.414 168.021 80.9475 168.056 79.4626 cv
168.06 79.4632 168.066 79.4641 168.07 79.4647 cv
168.033 80.9484 167.93 82.4155 167.759 83.8657 cv
211.837 81.5313 mo
211.836 81.5311 211.835 81.5309 211.834 81.5307 cv
211.835 81.5309 211.836 81.5311 211.837 81.5313 cv
211.834 81.5305 mo
211.811 81.5258 211.789 81.5209 211.766 81.5159 cv
209.292 80.9643 li
208.688 80.8265 208.073 80.7594 207.457 80.7594 cv
207.286 80.7594 207.114 80.7646 206.943 80.7749 cv
207.116 80.7642 207.289 80.7588 207.462 80.7588 cv
208.076 80.7588 208.69 80.8265 209.292 80.9614 cv
211.764 81.5154 li
211.787 81.5205 211.811 81.5256 211.834 81.5305 cv
216.096 81.0725 mo
216.502 80.8925 216.894 80.6742 217.265 80.42 cv
216.894 80.6743 216.502 80.8926 216.096 81.0725 cv
219.064 78.9545 mo
222.885 75.8634 226.91 73.845 231.139 72.6507 cv
231.139 72.6518 li
226.91 73.8468 222.886 75.8651 219.064 78.9545 cv
231.891 72.4485 mo
231.891 72.4476 li
232.978 72.1672 234.076 71.9398 235.19 71.7608 cv
234.077 71.9401 232.977 72.1679 231.891 72.4485 cv
.909635 .909635 .908835 rgb
f
231.139 72.6518 mo
231.139 72.6507 li
231.389 72.5801 231.64 72.5125 231.891 72.4476 cv
231.891 72.4485 li
231.64 72.5134 231.389 72.5812 231.139 72.6518 cv
.317647 .317647 .313725 rgb
f
168.367 86.0324 mo
168.003 86.0324 167.7 85.7846 167.611 85.4491 cv
167.585 85.3473 167.578 85.2375 167.597 85.1245 cv
167.657 84.7061 167.711 84.2865 167.759 83.8657 cv
167.93 82.4155 168.033 80.9484 168.07 79.4647 cv
171.739 80.0116 175.473 80.2544 179.256 80.2543 cv
190.146 80.254 201.403 78.2384 212.408 75.6572 cv
212.433 76.5364 212.789 77.4256 213.454 78.199 cv
213.992 78.8258 214.57 79.0247 215.086 79.0247 cv
215.957 79.0247 216.653 78.4576 216.689 78.4265 cv
219.985 75.5496 223.496 73.386 227.326 71.8903 cv
229.93 71.2066 232.504 70.5284 235.035 69.8778 cv
235.135 69.8547 li
235.457 70.5485 236.008 71.119 236.759 71.4174 cv
236.764 71.458 236.769 71.4985 236.775 71.539 cv
236.244 71.6024 235.715 71.6762 235.19 71.7608 cv
234.076 71.9398 232.978 72.1672 231.891 72.4476 cv
231.64 72.5125 231.389 72.5801 231.139 72.6507 cv
226.91 73.845 222.885 75.8634 219.064 78.9545 cv
218.693 79.2543 218.324 79.5638 217.957 79.884 cv
217.736 80.0772 217.505 80.2561 217.265 80.42 cv
216.894 80.6742 216.502 80.8925 216.096 81.0725 cv
215.2 81.4688 214.233 81.679 213.252 81.679 cv
212.782 81.679 212.308 81.6306 211.837 81.5313 cv
211.836 81.5311 211.835 81.5309 211.834 81.5307 cv
211.834 81.5306 211.834 81.5306 211.834 81.5305 cv
211.811 81.5256 211.787 81.5205 211.764 81.5154 cv
209.292 80.9614 li
208.69 80.8265 208.076 80.7588 207.462 80.7588 cv
207.289 80.7588 207.116 80.7642 206.943 80.7749 cv
206.737 80.7873 206.531 80.8071 206.326 80.8341 cv
193.03 82.659 li
177.382 84.8041 li
177.414 84.6802 177.448 84.5582 177.483 84.439 cv
177.611 84.0167 177.369 83.8641 176.982 83.8641 cv
176.201 83.8641 174.833 84.4838 174.722 84.7678 cv
174.668 84.9054 174.626 85.0458 174.591 85.1868 cv
168.478 86.0248 li
168.44 86.03 168.403 86.0324 168.367 86.0324 cv
.45098 .286274 .137255 rgb
f
215.086 79.0247 mo
214.57 79.0247 213.992 78.8258 213.454 78.199 cv
212.789 77.4256 212.433 76.5364 212.408 75.6572 cv
217.454 74.4737 222.445 73.1718 227.326 71.8903 cv
223.496 73.386 219.985 75.5496 216.689 78.4265 cv
216.653 78.4576 215.957 79.0247 215.086 79.0247 cv
.721569 .568627 .372549 rgb
f
236.775 71.539 mo
236.769 71.4985 236.764 71.458 236.759 71.4174 cv
236.845 71.4519 236.935 71.4827 237.027 71.5097 cv
236.943 71.5192 236.859 71.5289 236.775 71.539 cv
.317647 .317647 .313725 rgb
f
174.59 85.1898 mo
174.59 85.1888 174.59 85.1878 174.591 85.1868 cv
174.626 85.0458 174.668 84.9054 174.722 84.7678 cv
174.833 84.4838 176.201 83.8641 176.982 83.8641 cv
177.369 83.8641 177.611 84.0167 177.483 84.439 cv
177.448 84.5582 177.414 84.6802 177.382 84.8041 cv
177.382 84.805 177.382 84.8058 177.382 84.8066 cv
174.59 85.1898 li
.223529 .223529 .219608 rgb
f
265.748 70.0855 mo
262.632 70.0846 li
262.632 70.0842 li
265.748 70.0855 li
.909635 .909635 .908835 rgb
f
290.127 70.0923 mo
290.121 70.0923 290.114 70.0923 290.107 70.0922 cv
265.748 70.0855 li
262.632 70.0842 li
262.64 67.2421 li
264.191 67.2608 265.738 67.2707 267.285 67.2706 cv
277.156 67.2706 286.97 66.8702 296.964 65.8171 cv
296.198 67.3824 294.913 68.6471 293.333 69.384 cv
293.217 69.2608 293.035 69.2109 292.825 69.2109 cv
292.122 69.2109 291.095 69.768 291.106 70.0142 cv
291.107 70.0193 291.107 70.0245 291.107 70.0296 cv
290.786 70.0709 290.459 70.0923 290.127 70.0923 cv
.45098 .286274 .137255 rgb
f
291.107 70.0296 mo
291.107 70.0245 291.107 70.0193 291.106 70.0142 cv
291.095 69.768 292.122 69.2109 292.825 69.2109 cv
293.035 69.2109 293.217 69.2608 293.333 69.384 cv
292.641 69.7067 291.893 69.9283 291.107 70.0296 cv
.223529 .223529 .219608 rgb
f
239.009 62.3317 mo
239.089 62.2303 239.174 62.1303 239.266 62.0325 cv
240.112 61.1287 241.342 60.6837 242.58 60.6837 cv
382.939 60.6837 li
383.036 60.8444 383.165 60.9893 383.325 61.1083 cv
383.593 61.308 383.905 61.4044 384.216 61.4044 cv
384.671 61.4044 385.12 61.197 385.413 60.8041 cv
385.442 60.7649 385.469 60.7247 385.494 60.6837 cv
386.843 60.6837 li
386.843 62.3316 li
239.009 62.3317 li
.34902 .34902 .345098 rgb
f
384.216 61.4044 mo
383.905 61.4044 383.593 61.308 383.325 61.1083 cv
383.165 60.9893 383.036 60.8444 382.939 60.6837 cv
385.494 60.6837 li
385.469 60.7247 385.442 60.7649 385.413 60.8041 cv
385.12 61.197 384.671 61.4044 384.216 61.4044 cv
f
144.071 83.137 mo
139.787 83.137 li
139.787 75.088 li
144.071 75.088 li
144.071 83.137 li
cp
.113725 .113725 .105882 rgb
f
142.124 84.6985 mo
130.764 84.6985 li
130.764 78.6328 li
142.124 78.6328 li
142.124 84.6985 li
cp
.341176 .341176 .337255 rgb
f
144.85 85.6901 mo
139.787 85.6901 li
139.787 77.6412 li
144.85 77.6412 li
145.4 77.6412 145.845 78.0868 145.845 78.6365 cv
145.845 84.6948 li
145.845 85.2445 145.4 85.6901 144.85 85.6901 cv
cp
.235294 .235294 .231373 rgb
f
150.173 76.2868 mo
73.924 76.1699 li
73.924 70.9806 li
150.173 71.0975 li
150.173 76.2868 li
.341176 .341176 .337255 rgb
f
73.924 69.5922 mo
27.0193 69.5922 li
26.5564 69.5922 26.0953 69.648 25.6458 69.7583 cv
9.20232 73.795 li
7.97305 74.0967 7.10876 75.1988 7.10876 76.4646 cv
7.10876 78.9827 li
11.7822 82.7475 li
73.924 82.7475 li
73.924 69.5922 li
.235294 .235294 .231373 rgb
f
64.5169 75.6901 mo
46.6779 75.6901 li
46.0473 75.6901 45.5362 75.179 45.5362 74.5484 cv
45.5362 72.1223 li
45.5362 71.4918 46.0473 70.9806 46.6779 70.9806 cv
64.5169 70.9806 li
65.1474 70.9806 65.6586 71.4918 65.6586 72.1223 cv
65.6586 74.5484 li
65.6586 75.179 65.1474 75.6901 64.5169 75.6901 cv
cp
.341176 .341176 .337255 rgb
f
46.1166 72.0747 mo
46.107 72.1223 li
46.107 72.931 li
65.0878 72.931 li
65.0878 72.1223 li
65.0781 72.0747 li
46.1166 72.0747 li
cp
.113725 .113725 .105882 rgb
f
46.107 73.6922 mo
46.107 74.5484 li
46.107 74.8634 46.3632 75.1193 46.6779 75.1193 cv
64.5169 75.1193 li
64.8316 75.1193 65.0878 74.8634 65.0878 74.5484 cv
65.0878 73.6922 li
46.107 73.6922 li
cp
f
72.0198 82.7475 mo
42.5503 82.7475 li
42.5503 79.1125 li
72.0198 79.1125 li
72.0198 82.7475 li
.2 .2 .192157 rgb
f
21.6841 86.0493 mo
21.7819 85.7707 22.4333 85.5749 22.3047 85.3091 cv
22.1497 84.9882 21.2451 84.724 20.8918 84.6768 cv
20.469 85.8954 18.9018 89.0869 22.146 91.6439 cv
22.7904 91.2544 20.3551 89.8361 21.6841 86.0493 cv
cp
.113725 .113725 .105882 rgb
f
28.8524 90.6048 mo
28.8524 91.4844 28.1363 92.2006 27.2509 92.2006 cv
18.5777 92.2006 li
17.4442 92.2006 16.6716 91.0501 17.1002 90.0012 cv
18.0589 87.6271 li
18.3069 87.0238 18.8879 86.629 19.542 86.6233 cv
27.2452 86.6065 li
27.2565 86.6065 li
28.1363 86.6065 28.8524 87.3226 28.8524 88.2024 cv
28.8524 90.6048 li
cp
45.3924 83.2229 mo
45.3924 82.1297 li
45.3924 78.7849 42.6809 76.0734 39.3361 76.0734 cv
6.72773 76.0734 li
5.72283 76.0734 4.9082 76.888 4.9082 77.8929 cv
4.9082 80.4652 li
4.90821 81.444 5.69044 82.2082 6.66741 82.2683 cv
7.40294 82.3136 8.0168 82.5424 8.50033 82.8844 cv
9.24472 83.409 9.66762 84.2041 9.73531 85.0218 cv
9.78603 85.6252 9.63936 86.2456 9.27856 86.77 cv
5.22246 91.6679 1.74458 97.5824 .0991215 103.148 cv
-.237136 104.285 .304334 105.524 1.389 106.004 cv
3.59462 106.979 7.49473 107.63 10.5707 107.955 cv
11.3598 108.038 11.6626 107.798 11.3064 107.089 cv
11.3064 107.089 10.5767 105.965 10.5275 105.25 cv
10.4808 104.573 10.7286 104.161 11.328 103.844 cv
12.1543 103.528 li
12.8896 103.139 13.247 102.284 13.0077 101.488 cv
12.716 100.517 li
12.4831 99.7415 12.8932 98.9189 13.6524 98.6384 cv
13.9043 98.5453 li
14.7026 98.2502 15.1709 97.4214 15.0117 96.5853 cv
14.8645 95.8129 li
14.732 95.1169 15.0938 94.4208 15.7396 94.1294 cv
17.3648 93.3961 li
27.594 93.3961 li
28.3386 93.3961 28.8858 93.1932 29.372 92.8217 cv
29.9823 92.3554 30.3116 91.608 30.3353 90.8404 cv
30.3609 87.5977 li
30.3712 86.2858 31.4215 85.2187 32.7331 85.1896 cv
34.7078 85.1458 37.0709 85.1056 40.1384 85.0873 cv
41.7517 85.0778 44.1076 84.247 45.3692 83.2414 cv
45.3924 83.2229 li
cp
f
13.3599 89.1485 mo
11.0757 88.8803 li
10.2065 88.7782 9.35498 89.1554 8.83043 89.856 cv
5.46983 94.344 2.87917 99.2395 1.59314 103.59 cv
1.47575 103.987 1.66287 104.422 2.01912 104.579 cv
3.46289 105.218 6.06415 105.811 9.15452 106.218 cv
9.06096 105.933 8.99275 105.639 8.97348 105.357 cv
8.88499 104.076 9.44713 103.077 10.5988 102.467 cv
10.6832 102.422 li
11.4639 102.124 li
11.5157 101.935 li
11.2241 100.965 li
10.7542 99.4008 11.5823 97.7412 13.1145 97.1763 cv
13.3641 97.0842 li
13.4815 96.8773 li
13.3339 96.104 li
13.0662 94.701 13.7955 93.2975 15.0973 92.7101 cv
15.9385 92.3305 li
15.6859 91.9444 15.5249 91.515 15.4581 91.0731 cv
15.3016 90.0366 14.401 89.2708 13.3599 89.1485 cv
cp
.341176 .341176 .337255 rgb
f
18.1022 81.0598 mo
18.1022 81.6573 17.6178 82.1417 17.0203 82.1417 cv
16.4229 82.1417 15.9385 81.6573 15.9385 81.0598 cv
15.9385 80.4623 16.4229 79.978 17.0203 79.978 cv
17.6178 79.978 18.1022 80.4623 18.1022 81.0598 cv
cp
.235294 .235294 .231373 rgb
f
30.7928 81.0598 mo
30.7928 81.6573 30.3084 82.1417 29.7109 82.1417 cv
29.1134 82.1417 28.629 81.6573 28.629 81.0598 cv
28.629 80.4623 29.1134 79.978 29.7109 79.978 cv
30.3084 79.978 30.7928 80.4623 30.7928 81.0598 cv
cp
f
140.566 75.6748 mo
140.566 78.5932 li
140.519 78.6347 li
139.787 79.3046 li
133.867 84.7 li
133.166 85.3387 132.252 85.6918 131.302 85.6918 cv
74.7877 85.6918 li
73.261 85.6918 72.0198 84.4508 72.0198 82.9188 cv
72.0198 75.6903 li
100.233 75.6903 li
105.083 74.4077 li
139.294 74.4077 li
139.782 74.4077 140.208 74.6829 140.415 75.088 cv
140.514 75.2593 140.566 75.4618 140.566 75.6748 cv
.113725 .113725 .105882 rgb
f
136.542 77.6412 mo
136.542 78.4537 135.883 79.1125 135.07 79.1125 cv
106.336 79.1125 li
105.524 79.1125 104.865 78.4537 104.865 77.6412 cv
104.865 76.8286 105.524 76.1698 106.336 76.1698 cv
135.07 76.1698 li
135.883 76.1698 136.542 76.8286 136.542 77.6412 cv
cp
.235294 .235294 .231373 rgb
f
149.48 73.0479 mo
74.7462 72.931 li
74.7462 72.0748 li
149.48 72.1917 li
149.48 73.0479 li
.670588 .670588 .670588 rgb
f
13.4842 74.4057 mo
9.18596 74.4057 li
26.9284 70.3711 li
44.5841 70.3711 li
26.8851 70.9806 li
13.4842 74.4057 li
.619608 .619608 .615686 rgb
f
80.1571 85.6918 mo
78.0124 85.6918 li
79.3263 81.1948 li
79.4976 80.608 80.1104 80.1303 80.6972 80.1303 cv
80.7179 80.1303 li
81.3048 80.1303 81.6423 80.608 81.471 81.1948 cv
80.1571 85.6918 li
.203922 .203922 .196078 rgb
f
83.9271 85.6918 mo
81.7773 85.6918 li
83.0911 81.1948 li
83.2625 80.608 83.8805 80.1303 84.4672 80.1303 cv
84.4881 80.1303 li
85.0748 80.1303 85.4123 80.608 85.241 81.1948 cv
83.9271 85.6918 li
f
87.692 85.6918 mo
85.5422 85.6918 li
86.856 81.1948 li
87.0274 80.608 87.6452 80.1303 88.232 80.1303 cv
88.2528 80.1303 li
88.8396 80.1303 89.1772 80.608 89.0058 81.1948 cv
87.692 85.6918 li
f
91.4568 85.6918 mo
89.3122 85.6918 li
90.626 81.1948 li
90.7973 80.608 91.4101 80.1303 91.9969 80.1303 cv
92.0177 80.1303 li
92.6045 80.1303 92.942 80.608 92.7707 81.1948 cv
91.4568 85.6918 li
f
95.2217 85.6918 mo
93.077 85.6918 li
94.3909 81.1948 li
94.5622 80.608 95.175 80.1303 95.7618 80.1303 cv
95.7878 80.1303 li
96.3745 80.1303 96.7069 80.608 96.5355 81.1948 cv
95.2217 85.6918 li
f
98.9917 85.6918 mo
96.8419 85.6918 li
98.1557 81.1948 li
98.3271 80.608 98.9449 80.1303 99.5318 80.1303 cv
99.5525 80.1303 li
100.139 80.1303 100.477 80.608 100.305 81.1948 cv
98.9917 85.6918 li
f
102.757 85.6918 mo
100.612 85.6918 li
101.926 81.1948 li
102.097 80.608 102.71 80.1303 103.297 80.1303 cv
103.317 80.1303 li
103.904 80.1303 104.242 80.608 104.07 81.1948 cv
102.757 85.6918 li
f
106.521 85.6918 mo
104.377 85.6918 li
105.691 81.1948 li
105.862 80.608 106.475 80.1303 107.061 80.1303 cv
107.087 80.1303 li
107.674 80.1303 108.007 80.608 107.835 81.1948 cv
106.521 85.6918 li
f
110.292 85.6918 mo
108.142 85.6918 li
109.455 81.1948 li
109.627 80.608 110.245 80.1303 110.832 80.1303 cv
110.852 80.1303 li
111.439 80.1303 111.777 80.608 111.605 81.1948 cv
110.292 85.6918 li
f
114.056 85.6918 mo
111.912 85.6918 li
113.225 81.1948 li
113.397 80.608 114.01 80.1303 114.596 80.1303 cv
114.617 80.1303 li
115.204 80.1303 115.541 80.608 115.37 81.1948 cv
114.056 85.6918 li
f
117.821 85.6918 mo
115.676 85.6918 li
116.99 81.1948 li
117.162 80.608 117.774 80.1303 118.361 80.1303 cv
118.382 80.1303 li
118.969 80.1303 119.306 80.608 119.135 81.1948 cv
117.821 85.6918 li
f
121.591 85.6918 mo
119.441 85.6918 li
120.755 81.1948 li
120.926 80.608 121.544 80.1303 122.131 80.1303 cv
122.152 80.1303 li
122.739 80.1303 123.076 80.608 122.905 81.1948 cv
121.591 85.6918 li
f
125.356 85.6918 mo
123.211 85.6918 li
124.525 81.1948 li
124.696 80.608 125.309 80.1303 125.896 80.1303 cv
125.917 80.1303 li
126.504 80.1303 126.841 80.608 126.67 81.1948 cv
125.356 85.6918 li
f
129.121 85.6918 mo
126.976 85.6918 li
128.29 81.1948 li
128.461 80.608 129.074 80.1303 129.661 80.1303 cv
129.682 80.1303 li
130.268 80.1303 130.606 80.608 130.435 81.1948 cv
129.121 85.6918 li
f
7.10881 101.399 mo
7.10881 101.996 6.62445 102.48 6.02696 102.48 cv
5.42947 102.48 4.94511 101.996 4.94511 101.399 cv
4.94511 100.801 5.42947 100.317 6.02696 100.317 cv
6.62445 100.317 7.10881 100.801 7.10881 101.399 cv
cp
.113725 .113725 .105882 rgb
f
329.347 109.606 mo
329.218 111.851 330.463 113.76 332.442 114.104 cv
332.695 114.148 333 113.828 332.751 113.763 cv
330.719 113.235 329.642 109.681 330.674 107.575 cv
329.968 107.506 329.281 107.54 328.594 107.575 cv
327.906 107.61 327.219 107.645 326.513 107.575 cv
326.187 108.206 326.628 109.015 327.259 109.341 cv
327.89 109.667 328.638 109.64 329.347 109.606 cv
.235294 .235294 .231373 rgb
f
382.751 90.5459 mo
383.443 90.2753 384.297 89.9891 385.123 90.1334 cv
385.692 90.233 386.068 90.5233 386.199 90.8229 cv
386.33 91.1224 386.258 91.4342 386.185 91.7388 cv
384.097 91.7101 382.01 91.6814 379.922 91.6526 cv
380.865 91.2837 381.808 90.9148 382.751 90.5459 cv
cp
f
387.546 97.9731 mo
345.131 97.9731 li
345.131 93.388 li
387.546 93.388 li
387.546 97.9731 li
f
386.573 100.988 mo
345.131 100.988 li
345.131 97.668 li
386.573 97.668 li
386.573 100.988 li
f
387.546 96.8014 mo
345.521 96.8014 li
345.521 96.2803 li
345.521 95.6299 li
387.546 95.6299 li
387.546 96.8014 li
.172549 .172549 .168627 rgb
f
387.546 94.9018 mo
345.521 94.9018 li
345.521 94.3308 li
387.546 94.3308 li
387.546 94.9018 li
.313725 .313725 .309804 rgb
f
386.573 100.988 mo
345.521 100.988 li
345.521 100.675 li
345.521 99.3281 li
386.573 99.3281 li
386.573 100.988 li
.172549 .172549 .168627 rgb
f
387.546 94.3308 mo
345.521 94.3308 li
345.521 93.7598 li
387.546 93.7598 li
387.546 94.3308 li
.45098 .45098 .447059 rgb
f
386.573 98.4301 mo
345.521 98.4301 li
345.521 97.9731 li
386.573 97.9731 li
386.573 98.4301 li
.313725 .313725 .309804 rgb
f
387.546 97.9731 mo
386.573 97.9731 li
386.573 97.9484 li
386.573 97.668 li
345.521 97.668 li
345.521 96.8014 li
387.546 96.8014 li
387.546 97.9731 li
.141176 .141176 .137255 rgb
f
386.573 97.9484 mo
345.521 97.9484 li
345.521 97.668 li
386.573 97.668 li
386.573 97.9484 li
f
386.573 97.9731 mo
345.521 97.9731 li
345.521 97.9484 li
386.573 97.9484 li
386.573 97.9731 li
.184314 .184314 .180392 rgb
f
330.82 92.4716 mo
324.881 92.4716 li
324.881 90.5893 li
328.743 90.5893 li
330.82 92.4716 li
cp
.235294 .235294 .231373 rgb
f
317.969 101.493 mo
317.506 100.495 li
318.366 99.4329 li
319.27 98.3164 319.397 96.7128 318.566 95.5411 cv
317.37 93.8556 314.881 92.9294 313.295 92.7312 cv
313.535 92.2779 li
315.964 92.0681 317.775 92.7794 319.705 94.0176 cv
320.386 94.4543 321.117 94.8011 321.896 94.5836 cv
324.54 93.3275 li
322.673 99.8382 li
317.969 101.493 li
f
334.784 113.515 mo
334.088 114.594 332.821 115.209 331.018 115.342 cv
328.84 115.499 327.245 114.942 326.003 114.01 cv
325.091 113.326 324.65 112.38 324.461 111.44 cv
324.168 109.986 325.301 108.633 326.784 108.633 cv
334.272 108.633 li
335.13 108.633 335.817 109.359 335.752 110.215 cv
335.671 111.26 335.426 112.519 334.784 113.515 cv
322.934 91.2384 mo
322.594 93.606 li
322.062 97.3054 319.491 100.389 315.947 101.578 cv
313.295 102.467 li
321.214 108.633 li
323.72 108.633 li
323.507 109.927 323.288 112.858 325.47 114.578 cv
326.689 115.539 328.198 116.152 330.181 116.152 cv
330.471 116.152 330.769 116.14 331.075 116.118 cv
333.134 115.967 334.602 115.233 335.438 113.937 cv
336.224 112.719 336.481 111.238 336.536 110.056 cv
336.574 109.261 337.221 108.633 338.017 108.633 cv
341.528 108.633 li
342.88 108.633 344.076 107.755 344.48 106.465 cv
345.521 103.148 li
345.521 91.2384 li
322.934 91.2384 li
.439216 .435294 .435294 rgb
f
327.761 104.888 mo
327.761 93.1123 li
341.408 93.1123 li
341.408 104.888 li
327.761 104.888 li
.235294 .235294 .231373 rgb
f
340.835 93.6868 mo
340.835 104.313 li
328.336 104.313 li
328.336 93.6868 li
340.835 93.6868 li
.615686 .615686 .611765 rgb
f
340.835 95.7623 mo
340.835 98.1212 li
334.241 98.1212 li
333.586 98.1212 333.057 97.5928 333.057 96.9418 cv
333.057 96.6163 333.191 96.3214 333.402 96.107 cv
333.616 95.8964 333.911 95.7623 334.241 95.7623 cv
340.835 95.7623 li
.439216 .435294 .435294 rgb
f
340.835 102.399 mo
340.835 103.93 li
334.241 103.93 li
333.586 103.93 333.057 103.586 333.057 103.165 cv
333.057 102.954 333.191 102.762 333.402 102.625 cv
333.616 102.483 333.911 102.399 334.241 102.399 cv
340.835 102.399 li
f
333.389 96.1201 mo
333.389 96.1199 333.39 96.1198 333.39 96.1196 cv
333.39 96.1198 333.389 96.1199 333.389 96.1201 cv
333.393 96.1162 mo
333.394 96.1152 333.395 96.1143 333.396 96.1134 cv
333.395 96.1143 333.394 96.1153 333.393 96.1162 cv
333.397 96.1118 mo
333.399 96.1102 333.4 96.1086 333.402 96.107 cv
333.4 96.1086 333.399 96.1102 333.397 96.1118 cv
.513725 .513725 .509804 rgb
f
340.835 96.7982 mo
333.072 96.7982 li
333.104 96.537 333.217 96.3005 333.389 96.1201 cv
333.389 96.1199 333.39 96.1198 333.39 96.1196 cv
333.391 96.1185 333.392 96.1173 333.393 96.1162 cv
333.394 96.1153 333.395 96.1143 333.396 96.1134 cv
333.396 96.1129 333.397 96.1123 333.397 96.1118 cv
333.399 96.1102 333.4 96.1086 333.402 96.107 cv
333.402 96.107 li
333.616 95.8964 333.911 95.7623 334.241 95.7623 cv
340.835 95.7623 li
340.835 96.7982 li
.372549 .372549 .368627 rgb
f
340.835 104.313 mo
328.336 104.313 li
328.336 100.675 li
340.835 100.675 li
340.835 102.399 li
334.241 102.399 li
333.911 102.399 333.616 102.483 333.402 102.625 cv
333.191 102.762 333.057 102.954 333.057 103.165 cv
333.057 103.165 li
333.057 103.165 li
333.057 103.586 333.586 103.93 334.241 103.93 cv
340.835 103.93 li
340.835 104.313 li
.513725 .513725 .509804 rgb
f
340.835 103.93 mo
340.835 103.93 li
334.241 103.93 li
333.586 103.93 333.057 103.586 333.057 103.165 cv
340.835 103.165 li
340.835 103.93 li
.372549 .372549 .368627 rgb
f
340.835 103.165 mo
333.057 103.165 li
333.057 103.165 li
333.057 102.954 333.191 102.762 333.402 102.625 cv
333.616 102.483 333.911 102.399 334.241 102.399 cv
340.835 102.399 li
340.835 103.165 li
.321569 .321569 .317647 rgb
f
340.835 99.9402 mo
328.336 99.9402 li
328.336 97.612 li
333.267 97.612 li
333.48 97.9196 333.836 98.1212 334.241 98.1212 cv
340.835 98.1212 li
340.835 99.9402 li
.694118 .694118 .690196 rgb
f
340.835 98.1212 mo
340.835 98.1212 li
334.241 98.1212 li
333.836 98.1212 333.48 97.9196 333.267 97.612 cv
340.835 97.612 li
340.835 98.1212 li
.552941 .54902 .54902 rgb
f
340.835 94.9792 mo
328.336 94.9792 li
328.336 94.1176 li
340.835 94.1176 li
340.835 94.9792 li
.733333 .733333 .729412 rgb
f
327.761 93.3996 mo
325.696 94.3112 324.253 96.3736 324.253 98.7761 cv
324.253 101.179 325.696 103.241 327.761 104.153 cv
327.761 93.3996 li
.235294 .235294 .231373 rgb
f
327.761 104.153 mo
327.757 104.151 327.753 104.149 327.749 104.147 cv
327.753 104.149 327.757 104.151 327.761 104.153 cv
327.761 104.153 li
.372549 .372549 .368627 rgb
f
327.742 104.144 mo
327.74 104.143 327.739 104.143 327.738 104.142 cv
327.739 104.143 327.74 104.143 327.742 104.144 cv
327.729 104.138 mo
327.728 104.138 327.727 104.137 327.726 104.137 cv
327.727 104.137 327.728 104.138 327.729 104.138 cv
327.717 104.133 mo
327.716 104.132 327.715 104.132 327.714 104.132 cv
327.715 104.132 327.716 104.132 327.717 104.133 cv
327.704 104.127 mo
327.704 104.127 327.703 104.127 327.703 104.126 cv
327.703 104.127 327.704 104.127 327.704 104.127 cv
f
327.761 104.153 mo
327.761 104.153 li
327.757 104.151 327.753 104.149 327.749 104.147 cv
327.747 104.146 327.744 104.145 327.742 104.144 cv
327.74 104.143 327.739 104.143 327.738 104.142 cv
327.735 104.141 327.732 104.14 327.729 104.138 cv
327.728 104.138 327.727 104.137 327.726 104.137 cv
327.723 104.136 327.72 104.134 327.717 104.133 cv
327.716 104.132 327.715 104.132 327.714 104.132 cv
327.711 104.13 327.707 104.129 327.704 104.127 cv
327.704 104.127 327.703 104.127 327.703 104.126 cv
325.737 103.232 324.352 101.289 324.262 99.011 cv
324.969 100.43 326.279 101.431 327.761 101.918 cv
327.761 104.153 li
.211765 .211765 .207843 rgb
f
324.292 98.1356 mo
324.308 97.9842 324.332 97.8352 324.359 97.6875 cv
325.043 95.9333 326.266 94.7363 327.761 93.9635 cv
327.761 94.914 li
326.398 95.6354 325.217 96.8109 324.292 98.1356 cv
.34902 .34902 .345098 rgb
f
327.761 99.9402 mo
326.58 99.8984 325.296 99.5267 324.253 98.7801 cv
324.253 98.7761 li
324.253 98.7761 li
324.253 98.6095 324.264 98.4456 324.279 98.2829 cv
325.36 98.0089 326.071 97.656 327.761 97.612 cv
327.761 99.9402 li
.27451 .27451 .270588 rgb
f
319.647 129.108 mo
314.986 130.525 309.625 130.678 304.496 129.302 cv
303.899 129.142 303.481 128.602 303.473 127.984 cv
303.248 110.948 310.113 111.951 313.295 102.467 cv
319.429 100.256 326.412 105.605 323.619 111.164 cv
317.998 112 318.274 121.206 320.545 127.315 cv
320.822 128.061 320.408 128.877 319.647 129.108 cv
.235294 .235294 .231373 rgb
f
311.77 128.699 mo
309.875 128.699 307.991 128.498 306.155 128.101 cv
305.494 127.958 305.022 127.369 305.028 126.693 cv
305.109 117.325 307.567 114.208 310.162 110.915 cv
311.59 109.103 313.06 107.238 314.226 104.424 cv
314.414 103.97 314.829 103.635 315.317 103.572 cv
315.619 103.533 315.925 103.513 316.233 103.513 cv
318.621 103.513 320.967 104.717 322.071 106.508 cv
322.425 107.082 322.747 107.881 322.686 108.841 cv
322.651 109.388 322.301 109.856 321.798 110.075 cv
320.612 110.592 319.631 111.48 318.912 112.697 cv
316.861 116.168 317.253 121.852 318.561 126.281 cv
318.791 127.058 318.323 127.879 317.533 128.059 cv
315.674 128.484 313.742 128.699 311.77 128.699 cv
.341176 .341176 .337255 rgb
f
325.238 92.4716 mo
322.544 92.4716 li
322.544 90.0701 li
325.238 90.0701 li
325.238 92.4716 li
cp
.235294 .235294 .231373 rgb
f
312.776 123.171 mo
312.776 123.888 312.195 124.469 311.478 124.469 cv
310.761 124.469 310.18 123.888 310.18 123.171 cv
310.18 122.454 310.761 121.873 311.478 121.873 cv
312.195 121.873 312.776 122.454 312.776 123.171 cv
cp
f
322.673 101.493 mo
322.673 101.916 322.331 102.259 321.908 102.259 cv
321.484 102.259 321.142 101.916 321.142 101.493 cv
321.142 101.07 321.484 100.727 321.908 100.727 cv
322.331 100.727 322.673 101.07 322.673 101.493 cv
cp
f
336.946 106.75 mo
336.946 107.174 336.603 107.517 336.18 107.517 cv
335.757 107.517 335.414 107.174 335.414 106.75 cv
335.414 106.328 335.757 105.985 336.18 105.985 cv
336.603 105.985 336.946 106.328 336.946 106.75 cv
f
345.521 98.852 mo
341.408 98.852 li
341.408 93.1123 li
345.521 93.1123 li
345.521 98.852 li
.341176 .341176 .337255 rgb
f
345.521 102.801 mo
341.408 102.801 li
341.408 98.852 li
345.521 98.852 li
345.521 102.801 li
f
345.521 98.852 mo
341.408 98.852 li
341.408 96.2803 li
345.521 96.2803 li
345.521 97.9484 li
345.521 97.9731 li
345.521 98.4301 li
345.521 98.852 li
.294118 .294118 .290196 rgb
f
345.521 102.779 mo
341.408 102.779 li
341.408 100.675 li
345.521 100.675 li
345.521 100.988 li
345.521 102.779 li
f
345.521 94.9792 mo
341.408 94.9792 li
341.408 93.6933 li
345.521 93.6933 li
345.521 93.7598 li
345.521 94.3308 li
345.521 94.9018 li
345.521 94.9792 li
.47451 .47451 .470588 rgb
f
385.226 92.8772 mo
379.514 92.8772 li
379.316 92.8772 379.157 92.7138 379.157 92.5121 cv
379.157 92.3105 379.316 92.147 379.514 92.147 cv
385.226 92.147 li
385.423 92.147 385.583 92.3105 385.583 92.5121 cv
385.583 92.7138 385.423 92.8772 385.226 92.8772 cv
cp
374.468 92.8772 mo
368.756 92.8772 li
368.559 92.8772 368.399 92.7138 368.399 92.5121 cv
368.399 92.3105 368.559 92.147 368.756 92.147 cv
374.468 92.147 li
374.665 92.147 374.825 92.3105 374.825 92.5121 cv
374.825 92.7138 374.665 92.8772 374.468 92.8772 cv
cp
363.71 92.8772 mo
357.998 92.8772 li
357.801 92.8772 357.641 92.7138 357.641 92.5121 cv
357.641 92.3105 357.801 92.147 357.998 92.147 cv
363.71 92.147 li
363.907 92.147 364.067 92.3105 364.067 92.5121 cv
364.067 92.7138 363.907 92.8772 363.71 92.8772 cv
cp
352.953 92.8772 mo
347.24 92.8772 li
347.043 92.8772 346.883 92.7138 346.883 92.5121 cv
346.883 92.3105 347.043 92.147 347.24 92.147 cv
352.953 92.147 li
353.15 92.147 353.31 92.3105 353.31 92.5121 cv
353.31 92.7138 353.15 92.8772 352.953 92.8772 cv
cp
386.67 91.5304 mo
345.066 91.5304 li
345.066 93.5623 li
387.546 93.5623 li
387.546 92.4066 li
387.546 91.9227 387.154 91.5304 386.67 91.5304 cv
cp
.341176 .341176 .337255 rgb
f
320.632 127.79 mo
320.631 127.633 320.604 127.472 320.545 127.315 cv
320.604 127.472 320.631 127.633 320.632 127.79 cv
320.545 127.315 mo
319.62 124.827 319.026 121.826 319.026 119.085 cv
319.026 121.826 319.62 124.827 320.545 127.315 cv
325.457 114.567 mo
325.456 114.566 325.454 114.565 325.453 114.564 cv
325.454 114.565 325.455 114.566 325.457 114.567 cv
325.443 114.557 mo
325.442 114.555 325.44 114.554 325.438 114.553 cv
325.44 114.554 325.442 114.556 325.443 114.557 cv
325.43 114.546 mo
325.428 114.545 325.426 114.543 325.425 114.542 cv
325.426 114.543 325.428 114.545 325.43 114.546 cv
325.417 114.535 mo
325.415 114.534 325.413 114.532 325.411 114.531 cv
325.413 114.532 325.415 114.534 325.417 114.535 cv
325.403 114.524 mo
325.402 114.523 325.4 114.521 325.398 114.52 cv
325.4 114.521 325.402 114.523 325.403 114.524 cv
325.39 114.513 mo
325.388 114.512 325.387 114.511 325.385 114.509 cv
325.387 114.511 325.388 114.512 325.39 114.513 cv
325.377 114.502 mo
325.375 114.501 325.373 114.5 325.372 114.498 cv
325.373 114.5 325.375 114.501 325.377 114.502 cv
325.362 114.49 mo
325.361 114.489 325.36 114.489 325.359 114.487 cv
325.36 114.489 325.361 114.489 325.362 114.49 cv
325.346 114.477 mo
325.346 114.477 325.346 114.477 325.346 114.477 cv
325.346 114.477 li
325.319 114.454 mo
325.319 114.454 325.319 114.453 325.318 114.453 cv
325.319 114.453 325.319 114.454 325.319 114.454 cv
325.306 114.443 mo
325.306 114.442 325.305 114.442 325.304 114.441 cv
325.305 114.442 325.306 114.442 325.306 114.443 cv
325.293 114.431 mo
325.292 114.431 325.292 114.43 325.291 114.43 cv
325.292 114.43 325.292 114.431 325.293 114.431 cv
325.28 114.42 mo
325.279 114.419 325.279 114.419 325.278 114.418 cv
325.279 114.419 325.279 114.419 325.28 114.42 cv
325.266 114.408 mo
325.266 114.408 325.266 114.407 325.266 114.407 cv
325.266 114.407 325.266 114.408 325.266 114.408 cv
325.664 113.724 mo
324.979 113.075 324.625 112.255 324.461 111.44 cv
324.183 110.06 325.19 108.77 326.562 108.643 cv
326.562 108.643 li
325.19 108.77 324.183 110.06 324.461 111.44 cv
324.625 112.255 324.979 113.075 325.664 113.724 cv
.822745 .822745 .821176 rgb
f
330.181 116.152 mo
328.198 116.152 326.689 115.539 325.47 114.578 cv
325.47 114.578 li
325.466 114.575 325.461 114.571 325.457 114.567 cv
325.455 114.566 325.454 114.565 325.453 114.564 cv
325.45 114.562 325.447 114.559 325.443 114.557 cv
325.442 114.556 325.44 114.554 325.438 114.553 cv
325.436 114.551 325.433 114.548 325.43 114.546 cv
325.428 114.545 325.426 114.543 325.425 114.542 cv
325.422 114.54 325.419 114.537 325.417 114.535 cv
325.415 114.534 325.413 114.532 325.411 114.531 cv
325.409 114.529 325.406 114.527 325.403 114.524 cv
325.402 114.523 325.4 114.521 325.398 114.52 cv
325.395 114.518 325.393 114.516 325.39 114.513 cv
325.388 114.512 325.387 114.511 325.385 114.509 cv
325.382 114.507 325.379 114.505 325.377 114.502 cv
325.375 114.501 325.373 114.5 325.372 114.498 cv
325.369 114.496 325.365 114.493 325.362 114.49 cv
325.361 114.489 325.36 114.489 325.359 114.487 cv
325.355 114.484 325.35 114.48 325.346 114.477 cv
325.346 114.477 li
325.337 114.469 325.328 114.461 325.319 114.454 cv
325.319 114.454 325.319 114.453 325.318 114.453 cv
325.314 114.45 325.31 114.446 325.306 114.443 cv
325.306 114.442 325.305 114.442 325.304 114.441 cv
325.301 114.438 325.297 114.434 325.293 114.431 cv
325.292 114.431 325.292 114.43 325.291 114.43 cv
325.288 114.426 325.284 114.423 325.28 114.42 cv
325.279 114.419 325.279 114.419 325.278 114.418 cv
325.274 114.415 325.27 114.411 325.266 114.408 cv
325.266 114.408 325.266 114.407 325.266 114.407 cv
324.212 113.475 323.786 112.242 323.648 111.105 cv
324.358 109.657 324.407 108.226 323.983 106.94 cv
327.177 105.749 330.957 105.489 335.006 105.489 cv
338.138 105.489 341.432 105.644 344.738 105.644 cv
344.48 106.465 li
344.076 107.755 342.88 108.633 341.528 108.633 cv
338.017 108.633 li
337.221 108.633 336.574 109.261 336.536 110.056 cv
336.481 111.238 336.224 112.719 335.438 113.937 cv
334.602 115.233 333.134 115.967 331.075 116.118 cv
330.769 116.14 330.471 116.152 330.181 116.152 cv
325.664 113.724 mo
325.769 113.824 325.882 113.919 326.003 114.01 cv
327.104 114.836 328.483 115.368 330.3 115.368 cv
330.532 115.368 330.771 115.359 331.018 115.342 cv
332.821 115.209 334.088 114.594 334.784 113.515 cv
335.426 112.519 335.671 111.26 335.752 110.215 cv
335.755 110.178 335.756 110.141 335.756 110.105 cv
335.758 109.298 335.093 108.633 334.272 108.633 cv
330.343 108.633 li
326.784 108.633 li
326.709 108.633 326.635 108.636 326.562 108.643 cv
325.19 108.77 324.183 110.06 324.461 111.44 cv
324.625 112.255 324.979 113.075 325.664 113.724 cv
336.18 105.985 mo
335.757 105.985 335.414 106.328 335.414 106.75 cv
335.414 107.174 335.757 107.517 336.18 107.517 cv
336.603 107.517 336.946 107.174 336.946 106.75 cv
336.946 106.328 336.603 105.985 336.18 105.985 cv
.372549 .372549 .368627 rgb
f
311.779 130.255 mo
310.396 130.255 308.997 130.153 307.602 129.945 cv
309.346 129.683 310.716 129.257 311.795 128.699 cv
313.758 128.697 315.681 128.482 317.533 128.059 cv
318.323 127.879 318.791 127.058 318.561 126.281 cv
317.253 121.852 316.861 116.168 318.912 112.697 cv
319.631 111.48 320.612 110.592 321.798 110.075 cv
322.301 109.856 322.651 109.388 322.686 108.841 cv
322.716 108.374 322.655 107.946 322.544 107.563 cv
323.009 107.331 323.489 107.125 323.983 106.94 cv
324.407 108.226 324.358 109.657 323.648 111.105 cv
323.648 111.103 323.648 111.101 323.648 111.1 cv
323.619 111.164 li
323.619 111.164 li
323.537 111.176 323.456 111.19 323.376 111.206 cv
320.225 111.829 319.027 115.195 319.026 119.085 cv
319.026 121.826 319.62 124.827 320.545 127.315 cv
320.545 127.315 li
320.545 127.315 li
320.604 127.472 320.631 127.633 320.632 127.79 cv
320.632 128.353 320.281 128.877 319.726 129.082 cv
319.7 129.091 319.674 129.1 319.647 129.108 cv
319.647 129.108 li
317.175 129.86 314.506 130.255 311.779 130.255 cv
.211765 .211765 .207843 rgb
f
311.795 128.699 mo
318.765 125.093 313.599 115.988 318.918 110.255 cv
319.98 109.11 321.198 108.233 322.544 107.563 cv
322.655 107.946 322.716 108.374 322.686 108.841 cv
322.651 109.388 322.301 109.856 321.798 110.075 cv
320.612 110.592 319.631 111.48 318.912 112.697 cv
316.861 116.168 317.253 121.852 318.561 126.281 cv
318.791 127.058 318.323 127.879 317.533 128.059 cv
315.681 128.482 313.758 128.697 311.795 128.699 cv
.294118 .294118 .290196 rgb
f
336.18 107.517 mo
335.757 107.517 335.414 107.174 335.414 106.75 cv
335.414 106.328 335.757 105.985 336.18 105.985 cv
336.603 105.985 336.946 106.328 336.946 106.75 cv
336.946 107.174 336.603 107.517 336.18 107.517 cv
.211765 .211765 .207843 rgb
f
295.922 139.297 mo
296.58 139.031 297.392 138.75 298.177 138.891 cv
298.719 138.989 299.076 139.275 299.201 139.57 cv
299.325 139.864 299.256 140.171 299.187 140.471 cv
297.202 140.442 295.217 140.414 293.232 140.386 cv
294.129 140.023 295.026 139.66 295.922 139.297 cv
.235294 .235294 .231373 rgb
f
272.035 155.489 mo
271.913 157.624 273.095 159.439 274.978 159.766 cv
275.218 159.807 275.508 159.503 275.272 159.441 cv
273.34 158.939 272.316 155.56 273.296 153.558 cv
271.955 153.426 270.682 153.691 269.341 153.558 cv
269.03 154.158 269.449 154.928 270.05 155.237 cv
270.65 155.547 271.361 155.522 272.035 155.489 cv
cp
.113725 .113725 .105882 rgb
f
300.35 144.888 mo
287.041 144.888 li
287.041 140.05 li
300.35 140.05 li
300.35 144.888 li
.235294 .235294 .231373 rgb
f
299.424 148.069 mo
287.041 148.069 li
287.041 144.566 li
299.424 144.566 li
299.424 148.069 li
f
300.35 143.651 mo
287.411 143.651 li
287.411 143.176 li
287.411 142.415 li
300.35 142.415 li
300.35 143.651 li
.172549 .172549 .168627 rgb
f
300.35 141.647 mo
287.411 141.647 li
287.411 141.045 li
300.35 141.045 li
300.35 141.647 li
.313725 .313725 .309804 rgb
f
299.424 148.069 mo
287.411 148.069 li
287.411 147.355 li
287.411 146.317 li
299.424 146.317 li
299.424 148.069 li
.172549 .172549 .168627 rgb
f
300.35 141.045 mo
287.411 141.045 li
287.411 140.717 li
287.411 140.442 li
300.35 140.442 li
300.35 141.045 li
.45098 .45098 .447059 rgb
f
299.424 145.37 mo
287.411 145.37 li
287.411 144.888 li
299.424 144.888 li
299.424 145.37 li
.313725 .313725 .309804 rgb
f
300.35 144.888 mo
299.424 144.888 li
299.424 144.861 li
299.424 144.566 li
287.411 144.566 li
287.411 143.651 li
300.35 143.651 li
300.35 144.888 li
.141176 .141176 .137255 rgb
f
299.424 144.861 mo
287.411 144.861 li
287.411 144.566 li
299.424 144.566 li
299.424 144.861 li
f
299.424 144.888 mo
287.411 144.888 li
287.411 144.861 li
299.424 144.861 li
299.424 144.888 li
.184314 .184314 .180392 rgb
f
261.217 148.132 mo
260.777 147.184 li
261.595 146.174 li
262.454 145.112 262.575 143.587 261.785 142.474 cv
260.648 140.871 259.97 140.568 258.462 140.38 cv
258.69 139.949 li
259.377 138.661 261.181 138.414 262.868 141.025 cv
263.285 141.671 264.21 141.77 264.951 141.563 cv
267.465 140.369 li
265.69 146.559 li
261.217 148.132 li
.113725 .113725 .105882 rgb
f
278.081 156.857 mo
277.859 157.829 277.814 158.615 277.204 159.561 cv
276.542 160.588 275.337 161.172 273.624 161.298 cv
271.553 161.448 270.04 161.523 268.859 160.638 cv
267.993 159.987 267.375 158.5 267.39 157.589 cv
267.465 152.808 273.586 153.678 275.942 154.311 cv
277.803 154.811 278.334 155.746 278.081 156.857 cv
266.829 139.229 mo
266.269 139.229 265.789 139.633 265.691 140.185 cv
265.647 140.434 265.614 140.634 265.614 140.634 cv
265.109 144.151 262.665 147.083 259.296 148.213 cv
258.687 151.027 li
264.302 154.92 li
266.685 154.92 li
266.482 156.15 266.311 159.502 268.353 161.178 cv
270.062 162.58 273.387 162.058 273.678 162.036 cv
275.636 161.892 277.031 161.195 277.826 159.963 cv
278.575 158.801 278.801 157.392 279.045 156.292 cv
279.259 155.323 280.462 154.92 281.215 154.92 cv
283.616 154.92 li
284.901 154.92 286.038 154.085 286.422 152.859 cv
287.411 149.706 li
287.411 140.257 li
287.411 139.689 286.951 139.229 286.383 139.229 cv
266.829 139.229 li
.235294 .235294 .231373 rgb
f
270.527 151.36 mo
270.527 140.165 li
283.501 140.165 li
283.501 151.36 li
270.527 151.36 li
f
282.957 140.711 mo
282.957 150.814 li
271.073 150.814 li
271.073 140.711 li
282.957 140.711 li
.113725 .113725 .105882 rgb
f
282.957 142.684 mo
282.957 144.927 li
274.837 144.927 li
274.215 144.927 273.712 144.424 273.712 143.805 cv
273.712 143.496 273.84 143.215 274.04 143.012 cv
274.244 142.811 274.524 142.684 274.837 142.684 cv
282.957 142.684 li
.341176 .341176 .337255 rgb
f
282.957 148.993 mo
282.957 150.449 li
274.837 150.449 li
274.215 150.449 273.712 150.122 273.712 149.721 cv
273.712 149.521 273.84 149.339 274.04 149.208 cv
274.244 149.073 274.524 148.993 274.837 148.993 cv
282.957 148.993 li
.439216 .435294 .435294 rgb
f
282.957 143.669 mo
273.726 143.669 li
273.758 143.414 273.87 143.185 274.04 143.012 cv
274.244 142.811 274.524 142.684 274.837 142.684 cv
282.957 142.684 li
282.957 143.669 li
.294118 .294118 .290196 rgb
f
282.957 146.336 mo
271.073 146.336 li
271.073 144.762 li
274.25 144.762 li
274.421 144.866 274.622 144.927 274.837 144.927 cv
282.957 144.927 li
282.957 146.336 li
.203922 .203922 .196078 rgb
f
282.957 144.927 mo
282.957 144.927 li
274.837 144.927 li
274.622 144.927 274.421 144.866 274.25 144.762 cv
282.957 144.762 li
282.957 144.927 li
.407843 .407843 .403922 rgb
f
282.957 141.939 mo
271.073 141.939 li
271.073 141.12 li
282.957 141.12 li
282.957 141.939 li
.203922 .203922 .196078 rgb
f
270.527 140.438 mo
268.564 141.304 267.192 143.265 267.192 145.549 cv
267.192 147.833 268.564 149.794 270.527 150.661 cv
270.527 140.438 li
.113725 .113725 .105882 rgb
f
270.506 150.651 mo
270.506 150.651 270.505 150.651 270.505 150.651 cv
270.505 150.651 270.506 150.651 270.506 150.651 cv
.211765 .211765 .207843 rgb
f
270.527 150.661 mo
270.527 150.661 li
270.527 150.661 li
270.52 150.658 270.513 150.654 270.506 150.651 cv
270.506 150.651 270.505 150.651 270.505 150.651 cv
268.618 149.808 267.286 147.951 267.2 145.772 cv
267.873 147.122 269.118 148.073 270.527 148.537 cv
270.527 150.661 li
.113725 .113725 .105882 rgb
f
267.228 144.94 mo
267.244 144.796 267.267 144.655 267.293 144.514 cv
267.943 142.846 269.106 141.709 270.527 140.974 cv
270.527 141.877 li
269.231 142.563 268.109 143.681 267.228 144.94 cv
.160784 .160784 .152941 rgb
f
270.527 146.656 mo
269.404 146.616 268.183 146.263 267.192 145.553 cv
267.192 145.549 li
267.192 145.549 li
267.192 145.391 267.202 145.235 267.216 145.08 cv
268.244 144.82 268.92 144.484 270.527 144.442 cv
270.527 146.656 li
f
262.728 174.558 mo
258.242 175.762 254.297 175.776 249.453 174.294 cv
248.885 174.12 248.516 173.575 248.529 172.981 cv
248.828 159.238 252.226 156.123 257.098 151.793 cv
260.683 148.605 267.298 147.957 266.694 152.391 cv
266.237 155.75 259.108 158.711 263.6 172.895 cv
263.828 173.617 263.46 174.361 262.728 174.558 cv
.490196 .305882 .141176 rgb
f
266.733 145.22 mo
266.733 145.785 266.275 146.243 265.709 146.243 cv
265.144 146.243 264.686 145.785 264.686 145.22 cv
264.686 144.655 265.144 144.197 265.709 144.197 cv
266.275 144.197 266.733 144.655 266.733 145.22 cv
cp
.113725 .113725 .105882 rgb
f
264.688 152.402 mo
264.688 153.355 263.916 154.127 262.964 154.127 cv
262.011 154.127 261.239 153.355 261.239 152.402 cv
261.239 151.45 262.011 150.678 262.964 150.678 cv
263.916 150.678 264.688 151.45 264.688 152.402 cv
f
256.628 168.301 mo
256.628 168.959 256.095 169.491 255.437 169.491 cv
254.78 169.491 254.247 168.959 254.247 168.301 cv
254.247 167.644 254.78 167.111 255.437 167.111 cv
256.095 167.111 256.628 167.644 256.628 168.301 cv
cp
f
279.259 153.131 mo
279.259 153.533 278.933 153.859 278.531 153.859 cv
278.129 153.859 277.803 153.533 277.803 153.131 cv
277.803 152.728 278.129 152.402 278.531 152.402 cv
278.933 152.402 279.259 152.728 279.259 153.131 cv
cp
f
287.411 145.621 mo
283.501 145.621 li
283.501 140.165 li
287.411 140.165 li
287.411 145.621 li
.341176 .341176 .337255 rgb
f
287.411 149.375 mo
283.501 149.375 li
283.501 145.621 li
287.411 145.621 li
287.411 149.375 li
f
287.411 145.621 mo
283.501 145.621 li
283.501 143.176 li
287.411 143.176 li
287.411 144.861 li
287.411 144.888 li
287.411 145.37 li
287.411 145.621 li
.294118 .294118 .290196 rgb
f
287.411 149.355 mo
283.501 149.355 li
283.501 147.355 li
287.411 147.355 li
287.411 148.069 li
287.411 149.355 li
f
287.411 141.939 mo
283.501 141.939 li
283.501 140.717 li
287.411 140.717 li
287.411 141.045 li
287.411 141.647 li
287.411 141.939 li
.47451 .47451 .470588 rgb
f
282.957 150.814 mo
271.073 150.814 li
271.073 147.355 li
282.957 147.355 li
282.957 148.993 li
274.837 148.993 li
274.524 148.993 274.244 149.073 274.04 149.208 cv
273.84 149.339 273.712 149.521 273.712 149.721 cv
273.712 149.721 li
273.712 149.721 li
273.712 150.122 274.215 150.449 274.837 150.449 cv
282.957 150.449 li
282.957 150.814 li
.113725 .113725 .105882 rgb
f
282.957 150.449 mo
282.957 150.449 li
274.837 150.449 li
274.215 150.449 273.712 150.122 273.712 149.721 cv
282.957 149.721 li
282.957 150.449 li
.372549 .372549 .368627 rgb
f
282.957 149.721 mo
273.712 149.721 li
273.712 149.721 li
273.712 149.521 273.84 149.339 274.04 149.208 cv
274.244 149.073 274.524 148.993 274.837 148.993 cv
282.957 148.993 li
282.957 149.721 li
.321569 .321569 .317647 rgb
f
248.53 173.084 mo
248.528 173.05 248.528 173.016 248.529 172.981 cv
248.828 159.238 252.226 156.123 257.098 151.792 cv
257.115 151.777 257.132 151.762 257.149 151.747 cv
257.132 151.762 257.115 151.777 257.098 151.793 cv
252.226 156.123 248.828 159.238 248.529 172.981 cv
248.528 173.016 248.528 173.05 248.53 173.084 cv
1 1 1 rgb
f
248.982 174.021 mo
248.717 173.787 248.55 173.45 248.53 173.084 cv
248.528 173.05 248.528 173.016 248.529 172.981 cv
248.828 159.238 252.226 156.123 257.098 151.793 cv
257.115 151.777 257.132 151.762 257.149 151.747 cv
257.368 151.556 257.6 151.377 257.838 151.206 cv
252.339 156.731 249.302 164.533 248.982 174.021 cv
.541176 .376471 .227451 rgb
f
261.114 174.943 mo
261.127 174.941 261.14 174.938 261.152 174.935 cv
261.14 174.938 261.127 174.941 261.114 174.943 cv
261.186 174.928 mo
261.655 174.829 262.128 174.717 262.607 174.59 cv
262.128 174.716 261.655 174.829 261.186 174.928 cv
262.697 174.566 mo
262.707 174.563 262.718 174.56 262.728 174.558 cv
262.728 174.558 li
262.728 174.558 li
262.718 174.561 262.707 174.563 262.697 174.566 cv
.822745 .822745 .821176 rgb
f
266.696 152.377 mo
266.696 152.376 266.696 152.376 266.696 152.375 cv
266.696 152.376 266.696 152.376 266.696 152.377 cv
266.698 152.364 mo
266.698 152.363 266.698 152.363 266.698 152.363 cv
266.698 152.363 266.698 152.363 266.698 152.364 cv
.211765 .211765 .207843 rgb
f
256.526 175.435 mo
255.893 175.435 255.256 175.406 254.612 175.347 cv
256.343 174.803 257.624 173.643 257.841 171.685 cv
258.55 166.018 259.262 158.71 262.774 154.116 cv
262.836 154.123 262.899 154.127 262.964 154.127 cv
263.916 154.127 264.688 153.355 264.688 152.402 cv
264.688 152.317 264.682 152.233 264.67 152.151 cv
265.251 151.68 265.888 151.266 266.585 150.92 cv
266.725 151.322 266.771 151.8 266.698 152.363 cv
266.698 152.363 266.698 152.363 266.698 152.364 cv
266.697 152.368 266.697 152.371 266.696 152.375 cv
266.696 152.376 266.696 152.376 266.696 152.377 cv
266.695 152.382 266.695 152.386 266.694 152.391 cv
266.694 152.391 li
266.677 152.519 266.65 152.646 266.614 152.773 cv
265.71 155.992 259.279 159.251 263.6 172.895 cv
263.828 173.617 263.46 174.361 262.728 174.558 cv
262.728 174.558 li
262.718 174.56 262.707 174.563 262.697 174.566 cv
262.667 174.574 262.637 174.582 262.607 174.59 cv
262.128 174.717 261.655 174.829 261.186 174.928 cv
261.175 174.931 261.164 174.933 261.152 174.935 cv
261.14 174.938 261.127 174.941 261.114 174.943 cv
259.56 175.267 258.053 175.435 256.526 175.435 cv
.415686 .266667 .133333 rgb
f
262.964 154.127 mo
262.899 154.127 262.836 154.123 262.774 154.116 cv
263.332 153.387 263.96 152.726 264.67 152.151 cv
264.682 152.233 264.688 152.317 264.688 152.402 cv
264.688 153.355 263.916 154.127 262.964 154.127 cv
.113725 .113725 .105882 rgb
f
266.201 322.592 mo
266.32 322.744 266.245 322.957 266.016 323.083 cv
265.704 323.256 265.235 323.227 265.003 322.982 cv
263.9 321.816 263.248 319.678 263.696 316.37 cv
264.455 316.594 265.176 316.806 265.86 317.007 cv
265.083 319.68 265.367 321.542 266.201 322.592 cv
cp
.113725 .113725 .105882 rgb
f
270.824 323.31 mo
270.709 323.548 270.528 323.747 270.299 323.884 cv
270.193 323.959 270.069 324.016 269.941 324.051 cv
269.725 324.1 li
269.557 324.131 269.385 324.153 269.213 324.166 cv
268.321 324.281 267.381 324.338 266.419 324.338 cv
264.826 324.338 263.648 324.29 262.218 324.051 cv
261.017 323.857 260.995 322.939 260.995 321.708 cv
261.273 319.788 li
261.419 318.777 262.275 318.023 263.295 318.005 cv
263.458 318.001 li
263.559 318.001 li
264.963 317.97 li
265.62 317.957 li
268.591 317.908 li
269.791 317.886 270.775 318.826 270.802 320.026 cv
270.824 320.794 270.881 321.602 270.983 322.449 cv
270.996 322.573 270.996 322.692 270.983 322.807 cv
270.961 322.939 li
270.934 323.072 270.885 323.195 270.824 323.31 cv
cp
271.945 315.794 mo
258.281 315.573 li
255.964 316.522 li
253.788 317.414 li
253.788 318.089 li
258.462 324.166 li
258.895 324.272 li
259.036 324.303 li
259.142 324.329 259.243 324.356 259.349 324.378 cv
261.803 324.965 264.164 325.256 266.388 325.256 cv
267.346 325.256 268.268 325.194 269.155 325.08 cv
269.314 325.066 269.473 325.049 269.637 325.022 cv
269.809 324.987 li
270.788 324.775 271.521 324.016 271.728 323.08 cv
271.759 322.917 li
271.795 322.692 271.799 322.463 271.768 322.224 cv
271.689 321.527 271.636 320.865 271.618 320.234 cv
271.596 319.673 271.812 319.126 272.201 318.724 cv
272.593 318.314 273.136 318.089 273.697 318.089 cv
274.522 318.089 li
275.422 318.089 276.159 317.4 276.239 316.522 cv
276.248 316.363 li
276.248 316.346 li
271.945 315.794 li
cp
.188235 .188235 .188235 rgb
f
246.054 321.846 mo
244.897 327.428 245.047 328.707 244.698 335.966 cv
244.647 337.042 245.386 337.951 246.314 337.971 cv
257.009 338.977 li
257.761 338.993 258.401 338.345 258.49 337.478 cv
259.865 316.115 li
244.48 316.522 li
245.275 316.922 246.868 317.915 246.054 321.846 cv
cp
.113725 .113725 .105882 rgb
f
246.39 336.648 mo
246.343 336.647 li
246.191 336.558 li
246.075 336.433 246.011 336.235 246.021 336.029 cv
246.084 334.716 246.131 333.598 246.172 332.615 cv
246.355 328.226 246.424 326.583 247.35 322.114 cv
247.632 320.754 247.677 319.572 247.486 318.573 cv
247.414 318.196 247.689 317.846 248.072 317.846 cv
257.81 317.846 li
258.157 317.846 258.432 318.14 258.41 318.487 cv
257.171 337.36 li
257.15 337.528 257.071 337.622 257.033 337.649 cv
246.39 336.648 li
cp
.235294 .235294 .231373 rgb
f
282.444 309.249 mo
282.44 309.298 li
282.373 309.898 li
281.963 313.504 li
281.844 314.554 li
281.729 315.565 li
281.667 316.112 281.208 316.522 280.657 316.522 cv
244.37 316.522 li
244.03 316.522 243.713 316.337 243.545 316.037 cv
243.483 315.922 li
243.245 315.498 243.139 315.031 243.135 314.554 cv
243.13 314.258 243.17 313.963 243.24 313.671 cv
243.245 313.662 li
243.285 313.504 li
243.461 312.767 243.669 311.884 243.858 311.111 cv
243.969 310.648 244.07 310.229 244.154 309.898 cv
244.225 309.584 244.282 309.355 244.304 309.249 cv
244.309 309.236 li
244.322 309.187 li
244.361 309.02 244.432 308.865 244.529 308.728 cv
244.613 308.6 244.719 308.49 244.838 308.402 cv
245.081 308.212 245.381 308.102 245.694 308.102 cv
281.372 308.102 li
281.663 308.102 281.923 308.216 282.117 308.402 cv
282.214 308.494 282.294 308.605 282.351 308.728 cv
282.422 308.887 282.457 309.064 282.444 309.249 cv
f
252.823 333.786 mo
252.823 334.386 252.338 334.871 251.738 334.871 cv
251.139 334.871 250.653 334.386 250.653 333.786 cv
250.653 333.187 251.139 332.701 251.738 332.701 cv
252.338 332.701 252.823 333.187 252.823 333.786 cv
cp
.113725 .113725 .105882 rgb
f
270.44 309.92 mo
270.44 310.579 269.976 311.113 269.403 311.113 cv
259.671 311.113 li
259.098 311.113 258.634 310.579 258.634 309.92 cv
258.634 309.261 259.098 308.727 259.671 308.727 cv
269.403 308.727 li
269.976 308.727 270.44 309.261 270.44 309.92 cv
f
259.671 310.605 mo
259.342 310.605 259.075 310.298 259.075 309.92 cv
259.075 309.543 259.342 309.235 259.671 309.235 cv
269.403 309.235 li
269.731 309.235 269.998 309.543 269.998 309.92 cv
269.998 310.298 269.731 310.605 269.403 310.605 cv
259.671 310.605 li
.235294 .235294 .231373 rgb
f
281.963 313.504 mo
281.844 314.554 li
243.135 314.554 li
243.13 314.258 243.17 313.962 243.24 313.671 cv
243.245 313.662 li
243.285 313.504 li
281.963 313.504 li
cp
.113725 .113725 .105882 rgb
f
282.351 308.728 mo
269.443 308.728 li
269.43 308.728 269.417 308.727 269.403 308.727 cv
259.671 308.727 li
259.657 308.727 259.644 308.728 259.631 308.728 cv
244.529 308.728 li
244.613 308.6 244.719 308.49 244.838 308.402 cv
282.117 308.402 li
282.214 308.494 282.294 308.605 282.351 308.728 cv
.466667 .466667 .462745 rgb
f
269.443 308.728 mo
259.631 308.728 li
259.644 308.728 259.657 308.727 259.671 308.727 cv
269.403 308.727 li
269.417 308.727 269.43 308.728 269.443 308.728 cv
.380392 .380392 .376471 rgb
f
253.281 309.236 mo
253.276 309.249 li
253.118 309.898 li
252.822 311.111 li
243.858 311.111 li
243.969 310.648 244.07 310.229 244.154 309.898 cv
244.225 309.584 244.282 309.355 244.304 309.249 cv
244.309 309.236 li
253.281 309.236 li
.341176 .341176 .337255 rgb
f
282.373 309.898 mo
270.44 309.898 li
270.436 309.658 270.37 309.435 270.26 309.249 cv
282.444 309.249 li
282.44 309.298 li
282.373 309.898 li
.466667 .466667 .462745 rgb
f
270.44 309.898 mo
269.998 309.898 li
269.989 309.577 269.788 309.311 269.523 309.249 cv
270.26 309.249 li
270.37 309.435 270.436 309.658 270.44 309.898 cv
.380392 .380392 .376471 rgb
f
258.634 309.898 mo
253.118 309.898 li
253.276 309.249 li
258.814 309.249 li
258.704 309.435 258.638 309.658 258.634 309.898 cv
.466667 .466667 .462745 rgb
f
259.076 309.898 mo
258.634 309.898 li
258.638 309.658 258.704 309.435 258.814 309.249 cv
259.551 309.249 li
259.286 309.311 259.085 309.577 259.076 309.898 cv
.380392 .380392 .376471 rgb
f
269.998 309.898 mo
259.076 309.898 li
259.085 309.577 259.286 309.311 259.551 309.249 cv
269.523 309.249 li
269.788 309.311 269.989 309.577 269.998 309.898 cv
.466667 .466667 .462745 rgb
f
253.118 309.898 mo
244.154 309.898 li
244.225 309.584 244.282 309.355 244.304 309.249 cv
253.276 309.249 li
253.118 309.898 li
.541176 .541176 .537255 rgb
f
247.196 311.472 mo
246.58 311.472 li
245.863 314.249 li
246.479 314.249 li
247.196 311.472 li
cp
.113725 .113725 .105882 rgb
f
248.263 311.472 mo
247.646 311.472 li
246.929 314.249 li
247.546 314.249 li
248.263 311.472 li
cp
f
249.329 311.472 mo
248.713 311.472 li
247.996 314.249 li
248.612 314.249 li
249.329 311.472 li
cp
f
250.396 311.472 mo
249.78 311.472 li
249.062 314.249 li
249.679 314.249 li
250.396 311.472 li
cp
f
251.462 311.472 mo
250.846 311.472 li
250.129 314.249 li
250.745 314.249 li
251.462 311.472 li
cp
f
252.529 311.472 mo
251.913 311.472 li
251.195 314.249 li
251.812 314.249 li
252.529 311.472 li
cp
f
253.596 311.472 mo
252.979 311.472 li
252.262 314.249 li
252.878 314.249 li
253.596 311.472 li
cp
f
254.662 311.472 mo
254.046 311.472 li
253.329 314.249 li
253.945 314.249 li
254.662 311.472 li
cp
f
293.537 219.892 mo
293.648 219.577 294.385 219.355 294.239 219.055 cv
294.064 218.692 293.041 218.393 292.641 218.34 cv
292.163 219.718 290.391 223.327 294.06 226.219 cv
294.789 225.778 292.034 224.174 293.537 219.892 cv
cp
.235294 .235294 .231373 rgb
f
301.561 224.392 mo
301.561 225.389 300.747 226.196 299.751 226.196 cv
289.938 226.196 li
288.655 226.196 287.782 224.894 288.27 223.709 cv
289.351 221.026 li
289.631 220.342 290.289 219.899 291.031 219.893 cv
292.106 219.893 li
293.539 219.886 li
293.545 219.886 li
299.744 219.873 li
299.751 219.873 li
300.747 219.873 301.561 220.681 301.561 221.677 cv
301.561 224.392 li
cp
274.478 213.531 mo
274.478 213.602 li
274.478 213.811 274.524 214.006 274.609 214.182 cv
274.843 214.664 275.364 214.983 275.957 214.957 cv
277.018 214.918 277.884 215.198 278.542 215.66 cv
278.809 215.849 279.043 216.07 279.232 216.311 cv
279.649 216.826 279.89 217.444 279.942 218.076 cv
279.948 218.252 li
279.961 218.877 279.799 219.515 279.421 220.056 cv
269.627 238.797 li
269.269 239.48 269.653 240.32 270.402 240.503 cv
280.209 242.879 li
280.534 242.964 280.88 242.879 281.134 242.658 cv
281.394 242.443 281.524 242.111 281.498 241.779 cv
281.466 241.434 281.388 241.102 281.212 240.88 cv
280.801 240.21 li
284.787 231.77 li
286.128 228.977 li
286.708 227.551 li
299.985 227.551 li
300.649 227.551 301.294 227.329 301.815 226.926 cv
301.835 226.913 li
302.479 226.411 302.896 225.662 302.981 224.848 cv
303.287 221.879 li
303.378 221.026 303.912 220.277 304.654 219.938 cv
304.928 219.815 305.11 219.554 305.11 219.255 cv
305.11 219.216 li
305.11 217.256 306.699 215.66 308.665 215.66 cv
315.177 215.66 li
316.128 215.66 316.929 215.042 317.196 214.182 cv
317.261 213.987 317.294 213.772 317.294 213.55 cv
317.294 213.531 li
274.478 213.531 li
cp
.113725 .113725 .105882 rgb
f
285.378 227.03 mo
286.762 221.394 li
286.933 220.699 286.407 220.028 285.691 220.028 cv
281.864 220.028 li
281.456 220.028 281.082 220.253 280.89 220.613 cv
271.609 238.04 li
271.256 238.705 271.624 239.524 272.355 239.701 cv
279.157 241.351 li
279.289 241.383 279.429 241.332 279.509 241.222 cv
279.59 241.112 279.596 240.964 279.525 240.847 cv
279.203 240.317 li
285.378 227.03 li
cp
.235294 .235294 .231373 rgb
f
304.088 216.311 mo
304.088 216.8 li
304.088 217.861 303.222 218.727 302.154 218.727 cv
280.027 218.727 li
280.014 218.564 279.987 218.408 279.948 218.252 cv
279.942 218.076 li
279.89 217.444 279.649 216.826 279.232 216.311 cv
304.088 216.311 li
cp
f
385.737 208.041 mo
334.228 208.041 li
334.228 204.659 li
385.737 204.659 li
385.737 208.041 li
.113725 .113725 .105882 rgb
f
335.024 211.905 mo
310.691 211.905 li
310.691 203.491 li
335.024 203.491 li
336.029 203.491 336.843 204.305 336.843 205.31 cv
336.843 210.085 li
336.843 211.09 336.029 211.905 335.024 211.905 cv
f
326.775 204.629 mo
326.775 212.072 li
326.775 213.238 325.83 214.182 324.665 214.182 cv
255.047 214.182 li
254.318 214.182 253.725 213.589 253.725 212.86 cv
253.725 203.118 li
253.725 202.07 254.578 201.217 255.627 201.217 cv
323.363 201.217 li
324.847 201.217 326.11 202.161 326.573 203.49 cv
326.703 203.841 326.775 204.225 326.775 204.629 cv
.235294 .235294 .231373 rgb
f
314.967 208.693 mo
306.691 208.693 li
305.897 208.693 305.253 209.336 305.253 210.131 cv
305.253 214.179 li
316.405 214.179 li
316.405 210.131 li
316.405 209.336 315.761 208.693 314.967 208.693 cv
cp
.113725 .113725 .105882 rgb
f
314.777 257.748 mo
306.908 257.748 li
306.59 257.43 306.412 257.252 306.094 256.934 cv
306.094 210.375 li
306.412 210.057 306.59 209.879 306.908 209.561 cv
314.777 209.561 li
315.095 209.879 315.273 210.057 315.591 210.375 cv
315.591 256.934 li
315.273 257.252 315.095 257.43 314.777 257.748 cv
cp
.235294 .235294 .231373 rgb
f
314.779 257.748 mo
306.906 257.748 li
306.906 209.561 li
314.779 209.561 li
314.779 257.748 li
cp
.113725 .113725 .105882 rgb
f
296.677 214.182 mo
292.555 214.182 li
292.165 213.531 li
290.979 211.564 li
290.68 211.063 290.133 210.757 289.553 210.757 cv
253.725 210.757 li
253.725 208.693 li
292.184 208.693 li
292.933 208.693 293.63 209.09 294.014 209.728 cv
296.286 213.531 li
296.677 214.182 li
cp
f
289.733 212.437 mo
289.733 212.856 289.393 213.197 288.974 213.197 cv
288.554 213.197 288.214 212.856 288.214 212.437 cv
288.214 212.017 288.554 211.677 288.974 211.677 cv
289.393 211.677 289.733 212.017 289.733 212.437 cv
cp
f
282.625 212.057 mo
282.625 212.267 282.455 212.437 282.245 212.437 cv
256.306 212.437 li
256.096 212.437 255.926 212.267 255.926 212.057 cv
255.926 211.847 256.096 211.677 256.306 211.677 cv
282.245 211.677 li
282.455 211.677 282.625 211.847 282.625 212.057 cv
cp
f
298.845 207.696 mo
253.725 207.696 li
253.725 203.118 li
253.725 202.068 254.577 201.217 255.627 201.217 cv
300.467 201.217 li
301.525 203.505 li
302.429 205.462 301.001 207.696 298.845 207.696 cv
.341176 .341176 .337255 rgb
f
321.37 213.622 mo
318.847 213.622 li
318.847 201.774 li
321.37 201.774 li
321.37 213.622 li
cp
.113725 .113725 .105882 rgb
f
322.978 213.622 mo
321.716 213.622 li
321.716 201.774 li
322.978 201.774 li
322.978 213.622 li
cp
f
317.294 203.239 mo
317.294 203.598 317.002 203.89 316.642 203.89 cv
304.739 203.89 li
304.379 203.89 304.088 203.598 304.088 203.239 cv
304.088 202.879 304.379 202.588 304.739 202.588 cv
316.642 202.588 li
317.002 202.588 317.294 202.879 317.294 203.239 cv
f
317.294 205.31 mo
317.294 205.669 317.002 205.961 316.642 205.961 cv
304.739 205.961 li
304.379 205.961 304.088 205.669 304.088 205.31 cv
304.088 204.95 304.379 204.659 304.739 204.659 cv
316.642 204.659 li
317.002 204.659 317.294 204.95 317.294 205.31 cv
cp
f
318.114 197.948 mo
316.405 197.948 li
316.405 201.217 li
318.114 201.217 li
318.114 197.948 li
cp
.235294 .235294 .231373 rgb
f
256.702 201.777 mo
256.052 201.773 li
256.064 199.738 li
256.713 199.741 li
256.702 201.777 li
cp
.203922 .203922 .2 rgb
f
261.166 203.89 mo
253.601 203.848 li
253.62 200.385 li
261.186 200.427 li
261.166 203.89 li
cp
f
255.655 200.566 mo
255.65 201.447 254.931 202.158 254.05 202.153 cv
253.169 202.148 252.458 201.429 252.463 200.548 cv
252.468 199.667 253.187 198.956 254.068 198.961 cv
254.949 198.966 255.66 199.684 255.655 200.566 cv
cp
.407843 .403922 .403922 rgb
f
255.068 200.563 mo
255.065 201.12 254.61 201.569 254.053 201.566 cv
253.496 201.562 253.047 201.108 253.05 200.551 cv
253.054 199.994 253.508 199.545 254.065 199.548 cv
254.622 199.551 255.071 200.005 255.068 200.563 cv
cp
.203922 .203922 .2 rgb
f
362.651 213.169 mo
329.867 213.169 li
329.31 213.169 328.859 212.718 328.859 212.161 cv
328.859 207.358 li
328.859 206.801 329.31 206.35 329.867 206.35 cv
366.66 206.35 li
367.358 206.35 367.844 207.042 367.609 207.698 cv
366.661 210.346 li
366.055 212.039 364.45 213.169 362.651 213.169 cv
.490196 .305882 .141176 rgb
f
359.015 210.755 mo
333.254 210.755 li
332.505 210.755 331.897 210.147 331.897 209.398 cv
331.897 208.649 332.505 208.041 333.254 208.041 cv
360.929 208.041 li
361.678 208.041 362.286 208.649 362.286 209.398 cv
362.286 209.765 362.14 210.098 361.903 210.342 cv
360.983 210.497 360.02 210.634 359.015 210.755 cv
.435294 .278431 .137255 rgb
f
381.197 209.344 mo
379.488 209.344 li
379.488 203.239 li
381.197 203.239 li
381.197 209.344 li
cp
.235294 .235294 .231373 rgb
f
387.546 208.286 mo
381.197 208.286 li
381.197 204.297 li
387.546 204.297 li
387.546 208.286 li
cp
.113725 .113725 .105882 rgb
f
377.656 197.663 mo
379.488 197.663 li
379.488 204.903 li
376.72 204.903 li
377.656 197.663 li
cp
.235294 .235294 .231373 rgb
f
268.469 214.182 mo
268.469 214.48 li
268.469 217.775 266.07 220.681 262.563 221.635 cv
252.296 224.429 li
210.973 246.512 li
209.026 247.552 206.537 246.441 206.268 244.419 cv
205.238 236.677 205.084 229.18 206.462 222.112 cv
206.702 220.88 207.816 219.937 209.198 219.797 cv
240.697 216.603 li
241.653 216.412 242.649 216.456 243.58 216.73 cv
244.338 216.953 li
245.585 217.32 246.933 217.308 248.171 216.918 cv
256.87 214.182 li
268.469 214.182 li
.490196 .305882 .141176 rgb
f
244.415 216.975 mo
244.389 216.968 244.364 216.961 244.338 216.953 cv
243.58 216.73 li
244.338 216.953 li
244.432 216.973 li
244.427 216.974 244.42 216.975 244.415 216.975 cv
243.58 216.73 mo
243.029 216.568 242.455 216.486 241.88 216.486 cv
241.493 216.486 241.104 216.523 240.722 216.598 cv
241.105 216.523 241.493 216.486 241.88 216.486 cv
242.455 216.486 243.029 216.568 243.58 216.73 cv
1 1 1 rgb
f
206.311 222.964 mo
206.361 222.68 206.407 222.394 206.462 222.112 cv
206.702 220.88 207.816 219.937 209.198 219.797 cv
240.697 216.603 li
240.705 216.601 240.714 216.599 240.722 216.598 cv
241.104 216.523 241.493 216.486 241.88 216.486 cv
242.455 216.486 243.029 216.568 243.58 216.73 cv
243.58 216.73 li
244.338 216.953 li
244.364 216.961 244.389 216.968 244.415 216.975 cv
228.915 218.568 212.776 220.068 206.311 222.964 cv
.592157 .443137 .313725 rgb
f
209.384 246.909 mo
209.384 246.909 li
209.904 246.909 210.437 246.79 210.935 246.532 cv
210.437 246.79 209.905 246.909 209.384 246.909 cv
206.261 244.359 mo
206.26 244.356 206.26 244.353 206.259 244.35 cv
206.26 244.353 206.26 244.356 206.261 244.359 cv
.822745 .822745 .821176 rgb
f
209.384 246.909 mo
207.876 246.909 206.467 245.912 206.268 244.419 cv
206.268 244.419 li
206.268 244.419 li
206.266 244.399 206.263 244.379 206.261 244.359 cv
206.26 244.356 206.26 244.353 206.259 244.35 cv
205.901 241.645 205.658 238.971 205.542 236.334 cv
218.226 236.097 243.225 225.981 268.341 215.771 cv
267.807 218.513 265.603 220.808 262.563 221.635 cv
252.296 224.429 li
210.973 246.512 li
210.973 246.512 li
210.961 246.518 210.948 246.525 210.935 246.532 cv
210.437 246.79 209.904 246.909 209.384 246.909 cv
.415686 .266667 .133333 rgb
f
301.111 202.609 mo
300.9 202.153 li
314.779 202.153 li
301.111 202.609 li
.388235 .388235 .384314 rgb
f
262.764 203.89 mo
262.764 202.153 li
300.9 202.153 li
301.111 202.609 li
262.764 203.89 li
.47451 .47451 .470588 rgb
f
362.651 213.169 mo
329.867 213.169 li
329.31 213.169 328.859 212.718 328.859 212.161 cv
328.859 211.302 li
333.473 211.444 337.969 211.541 342.223 211.541 cv
348.481 211.541 354.213 211.332 359.015 210.755 cv
360.929 210.755 li
361.311 210.755 361.657 210.597 361.903 210.342 cv
363.846 210.016 365.591 209.611 367.103 209.113 cv
366.661 210.346 li
366.055 212.039 364.45 213.169 362.651 213.169 cv
.415686 .266667 .133333 rgb
f
360.929 210.755 mo
359.015 210.755 li
360.02 210.634 360.983 210.497 361.903 210.342 cv
361.657 210.597 361.311 210.755 360.929 210.755 cv
.372549 .247059 .129412 rgb
f
320.283 275.546 mo
317.825 275.546 li
317.825 279.096 li
322.741 279.096 li
320.283 275.546 li
.188235 .188235 .188235 rgb
f
387.546 286.613 mo
367.623 286.613 li
367.623 282.533 li
387.546 282.533 li
387.546 286.613 li
.235294 .235294 .231373 rgb
f
353.925 293.15 mo
349.931 293.76 li
349.192 293.872 348.527 293.301 348.527 292.553 cv
348.527 291.48 li
353.925 291.48 li
353.925 293.15 li
.113725 .113725 .105882 rgb
f
346.987 300.103 mo
347.654 300.524 348.429 299.705 347.936 299.089 cv
347.847 298.978 347.761 298.865 347.68 298.748 cv
346.284 296.738 346.363 294.09 346.497 291.646 cv
345.934 291.528 345.372 291.409 344.809 291.291 cv
344.757 293.077 344.705 294.879 345.036 296.635 cv
345.235 297.691 345.592 298.755 346.318 299.546 cv
346.513 299.759 346.74 299.947 346.987 300.103 cv
f
312.694 292.463 mo
310.937 281.033 li
310.495 278.159 311.525 275.285 313.693 273.347 cv
315.862 271.408 318.832 270.706 321.639 271.464 cv
321.704 271.485 li
343.412 278.954 li
342.758 280.857 li
321.082 273.398 li
318.943 272.83 316.686 273.371 315.034 274.846 cv
313.376 276.329 312.587 278.528 312.925 280.727 cv
314.682 292.158 li
312.694 292.463 li
.235294 .235294 .231373 rgb
f
313.747 298.629 mo
315.867 298.629 li
315.867 289.211 li
312.681 289.211 li
311.233 295.467 li
310.859 297.084 312.087 298.629 313.747 298.629 cv
cp
.188235 .188235 .188235 rgb
f
342.023 301.144 mo
352.298 301.144 li
353.505 301.144 354.487 300.162 354.487 298.955 cv
354.487 292.097 li
342.023 292.097 li
342.023 301.144 li
352.298 302.485 mo
340.682 302.485 li
340.682 290.756 li
355.828 290.756 li
355.828 298.955 li
355.828 300.902 354.244 302.485 352.298 302.485 cv
.113725 .113725 .105882 rgb
f
324.859 294.29 mo
325.929 294.662 326.919 295.347 327.264 296.306 cv
327.773 297.724 327.621 299.304 327.202 300.752 cv
326.784 302.2 326.111 303.559 325.569 304.965 cv
324.505 307.722 323.949 311.144 323.921 314.196 cv
323.916 314.764 324.372 315.228 324.94 315.228 cv
332.938 315.228 li
333.032 291.373 li
331.547 291.327 329.901 291.377 328.255 291.428 cv
326.609 291.479 324.964 291.529 323.479 291.483 cv
323.441 292.117 li
323.383 293.075 323.952 293.976 324.859 294.29 cv
f
343.085 315.228 mo
330.789 315.228 li
330.789 292.311 li
343.085 292.311 li
343.085 315.228 li
.188235 .188235 .188235 rgb
f
341.742 315.228 mo
341.742 347.535 li
332.131 347.535 li
332.131 315.228 li
341.742 315.228 li
cp
.235294 .235294 .231373 rgb
f
335.9 315.228 mo
335.9 342.894 li
335.9 343.357 335.531 343.733 335.068 343.733 cv
334.599 343.733 334.223 343.357 334.223 342.894 cv
334.223 315.228 li
335.9 315.228 li
cp
.113725 .113725 .105882 rgb
f
339.649 315.228 mo
339.649 342.894 li
339.649 343.357 339.273 343.733 338.811 343.733 cv
338.348 343.733 337.972 343.357 337.972 342.894 cv
337.972 315.228 li
339.649 315.228 li
cp
f
375.276 278.314 mo
375.276 292.727 li
317.825 292.727 li
317.825 278.314 li
375.276 278.314 li
.341176 .341176 .337255 rgb
f
375.276 284.209 mo
375.276 292.727 li
317.825 292.727 li
317.825 278.314 li
330.119 278.314 li
334.223 284.209 li
375.276 284.209 li
.235294 .235294 .231373 rgb
f
329.001 288.233 mo
329.001 289.437 328.025 290.413 326.821 290.413 cv
325.617 290.413 324.641 289.437 324.641 288.233 cv
324.641 287.03 325.617 286.054 326.821 286.054 cv
328.025 286.054 329.001 287.03 329.001 288.233 cv
.188235 .188235 .188235 rgb
f
315.225 296.061 mo
315.225 296.91 314.537 297.598 313.688 297.598 cv
312.839 297.598 312.151 296.91 312.151 296.061 cv
312.151 295.212 312.839 294.524 313.688 294.524 cv
314.537 294.524 315.225 295.212 315.225 296.061 cv
cp
.341176 .341176 .337255 rgb
f
335.062 288.177 mo
335.062 288.641 334.686 289.016 334.223 289.016 cv
327.492 289.016 li
327.029 289.016 326.653 288.641 326.653 288.177 cv
326.653 287.714 327.029 287.339 327.492 287.339 cv
334.223 287.339 li
334.686 287.339 335.062 287.714 335.062 288.177 cv
.113725 .113725 .105882 rgb
f
350.127 288.275 mo
350.127 288.792 349.708 289.211 349.191 289.211 cv
348.674 289.211 348.255 288.792 348.255 288.275 cv
348.255 287.758 348.674 287.339 349.191 287.339 cv
349.708 287.339 350.127 287.758 350.127 288.275 cv
.188235 .188235 .188235 rgb
f
371.254 288.275 mo
371.254 288.792 370.835 289.211 370.318 289.211 cv
369.801 289.211 369.382 288.792 369.382 288.275 cv
369.382 287.758 369.801 287.339 370.318 287.339 cv
370.835 287.339 371.254 287.758 371.254 288.275 cv
f
371.082 280.409 mo
371.082 280.687 370.857 280.912 370.579 280.912 cv
336.403 280.912 li
336.125 280.912 335.9 280.687 335.9 280.409 cv
335.9 280.131 336.125 279.906 336.403 279.906 cv
370.579 279.906 li
370.857 279.906 371.082 280.131 371.082 280.409 cv
f
346.047 282.528 mo
346.047 282.253 345.824 282.03 345.549 282.03 cv
336.403 282.03 li
336.125 282.03 335.9 282.255 335.9 282.533 cv
335.9 282.81 336.125 283.036 336.403 283.036 cv
345.549 283.036 li
345.824 283.036 346.047 282.813 346.047 282.538 cv
346.047 282.528 li
cp
f
370.579 282.03 mo
361.3 282.03 li
361.025 282.03 360.802 282.253 360.802 282.528 cv
360.802 282.538 li
360.802 282.813 361.025 283.036 361.3 283.036 cv
370.579 283.036 li
370.857 283.036 371.082 282.81 371.082 282.533 cv
371.082 282.255 370.857 282.03 370.579 282.03 cv
cp
f
315.196 289.854 mo
317.825 289.854 li
317.825 292.727 li
315.196 292.727 li
315.196 289.854 li
f
368.324 276.528 mo
372.606 274.856 li
373.89 274.355 375.276 275.302 375.276 276.68 cv
375.276 278.314 li
367.929 278.314 li
368.324 276.528 li
cp
.113725 .113725 .105882 rgb
f
376.815 288.233 mo
375.276 288.233 li
375.276 280.912 li
376.815 280.912 li
376.815 288.233 li
f
358.064 282.03 mo
348.898 282.03 li
347.972 282.03 347.221 282.78 347.221 283.706 cv
347.221 284.209 li
359.741 284.209 li
359.741 283.706 li
359.741 282.78 358.99 282.03 358.064 282.03 cv
cp
.188235 .188235 .188235 rgb
f
331.951 280.945 mo
330.734 279.198 li
357.393 278.844 li
344.537 279.906 li
336.403 279.906 li
336.125 279.906 335.9 280.131 335.9 280.409 cv
335.9 280.482 335.916 280.552 335.944 280.615 cv
331.951 280.945 li
.407843 .407843 .403922 rgb
f
319.499 281.974 mo
319.499 279.347 li
330.734 279.198 li
331.951 280.945 li
319.499 281.974 li
.313725 .313725 .309804 rgb
f
335.944 280.615 mo
335.916 280.552 335.9 280.482 335.9 280.409 cv
335.9 280.131 336.125 279.906 336.403 279.906 cv
344.537 279.906 li
335.944 280.615 li
.270588 .270588 .270588 rgb
f
375.276 292.727 mo
355.828 292.727 li
354.487 292.727 li
353.925 292.727 li
348.539 292.727 li
346.446 292.727 li
344.775 292.727 li
343.085 292.727 li
330.789 292.727 li
317.825 292.727 li
317.825 289.211 li
324.745 288.898 li
325.026 289.777 325.849 290.413 326.821 290.413 cv
327.749 290.413 328.542 289.833 328.856 289.016 cv
334.223 289.016 li
334.597 289.016 334.914 288.771 335.022 288.434 cv
348.368 287.83 li
348.296 287.962 348.255 288.114 348.255 288.275 cv
348.255 288.792 348.674 289.211 349.191 289.211 cv
349.708 289.211 350.127 288.792 350.127 288.275 cv
350.127 288.084 350.07 287.906 349.971 287.757 cv
375.276 286.613 li
375.276 292.727 li
370.318 287.339 mo
369.801 287.339 369.382 287.758 369.382 288.275 cv
369.382 288.792 369.801 289.211 370.318 289.211 cv
370.835 289.211 371.254 288.792 371.254 288.275 cv
371.254 287.758 370.835 287.339 370.318 287.339 cv
.211765 .211765 .207843 rgb
f
326.821 290.413 mo
325.849 290.413 325.026 289.777 324.745 288.898 cv
326.93 288.8 li
327.078 288.934 327.276 289.016 327.492 289.016 cv
328.856 289.016 li
328.542 289.833 327.749 290.413 326.821 290.413 cv
.172549 .172549 .172549 rgb
f
334.223 289.016 mo
328.856 289.016 li
327.492 289.016 li
327.276 289.016 327.078 288.934 326.93 288.8 cv
335.022 288.434 li
334.914 288.771 334.597 289.016 334.223 289.016 cv
.113725 .113725 .105882 rgb
f
349.191 289.211 mo
348.674 289.211 348.255 288.792 348.255 288.275 cv
348.255 288.114 348.296 287.962 348.368 287.83 cv
349.971 287.757 li
350.07 287.906 350.127 288.084 350.127 288.275 cv
350.127 288.792 349.708 289.211 349.191 289.211 cv
.172549 .172549 .172549 rgb
f
370.318 289.211 mo
369.801 289.211 369.382 288.792 369.382 288.275 cv
369.382 287.758 369.801 287.339 370.318 287.339 cv
370.835 287.339 371.254 287.758 371.254 288.275 cv
371.254 288.792 370.835 289.211 370.318 289.211 cv
f
258.391 266.914 mo
248.334 266.914 li
247.725 266.914 247.231 266.422 247.231 265.815 cv
247.231 262.862 li
247.231 262.255 247.725 261.763 248.334 261.763 cv
258.391 261.763 li
259.001 261.763 259.495 262.255 259.495 262.862 cv
259.495 265.815 li
259.495 266.422 259.001 266.914 258.391 266.914 cv
cp
.235294 .235294 .231373 rgb
f
250.396 266.188 mo
248.639 266.188 li
248.639 262.534 li
250.396 262.534 li
250.396 266.188 li
cp
.113725 .113725 .105882 rgb
f
253.078 266.188 mo
251.321 266.188 li
251.321 262.534 li
253.078 262.534 li
253.078 266.188 li
cp
f
255.76 266.188 mo
254.003 266.188 li
254.003 262.534 li
255.76 262.534 li
255.76 266.188 li
cp
f
258.442 266.188 mo
256.685 266.188 li
256.685 262.534 li
258.442 262.534 li
258.442 266.188 li
cp
f
67.4655 275.977 mo
65.7668 280.815 61.0983 284.065 55.849 284.065 cv
45.1907 284.065 li
42.8204 284.065 41.1163 281.786 41.7869 279.513 cv
45.1663 268.053 li
45.6113 266.544 46.9968 265.508 48.5702 265.508 cv
71.1415 265.508 li
67.4655 275.977 li
14.4625 274.88 mo
14.4625 274.694 li
14.4625 269.621 18.685 265.508 23.8936 265.508 cv
34.5596 265.508 li
36.9299 265.508 38.634 267.787 37.9635 270.061 cv
34.584 281.52 li
34.139 283.029 32.7534 284.065 31.1801 284.065 cv
23.8936 284.065 li
18.685 284.065 14.4625 279.953 14.4625 274.88 cv
14.3378 260.5 mo
12.3563 260.5 10.4496 259.763 9.00658 258.441 cv
8.0942 257.605 li
7.29959 256.877 6.2497 256.471 5.15871 256.471 cv
2.37446 256.471 li
.920886 256.471 -.113516 257.836 .309797 259.19 cv
3.34921 268.914 2.80617 279.258 .0641185 289.983 cv
-.274249 291.306 .770295 292.584 2.17033 292.584 cv
5.35281 292.584 li
6.32658 292.584 7.27135 292.261 8.03128 291.667 cv
9.2238 290.737 li
10.6041 289.66 12.3199 289.073 14.0884 289.073 cv
68.3006 289.073 li
78.334 260.5 li
14.3378 260.5 li
.235294 .235294 .231373 rgb
f
96.6217 255.124 mo
91.7775 255.124 li
91.7775 249.287 li
96.6217 249.287 li
96.6217 255.124 li
.113725 .113725 .105882 rgb
f
110.545 256.814 mo
102.915 256.814 li
102.718 250.199 li
106.569 250.199 li
110.545 256.814 li
f
246.024 262.736 mo
241.643 262.712 li
243.099 249.81 li
246.096 249.826 li
246.024 262.736 li
cp
.203922 .203922 .2 rgb
f
249.11 266.188 mo
181.085 266.188 li
181.085 262.684 li
249.11 262.684 li
249.11 266.188 li
.341176 .341176 .337255 rgb
f
204.382 261.408 mo
182.37 261.408 li
182.37 259.029 li
204.382 259.029 li
204.382 261.408 li
f
202.963 267.034 mo
200.901 267.034 li
200.626 267.034 200.404 266.812 200.404 266.537 cv
200.404 258.8 li
200.404 258.526 200.626 258.303 200.901 258.303 cv
202.963 258.303 li
203.237 258.303 203.46 258.526 203.46 258.8 cv
203.46 266.537 li
203.46 266.812 203.237 267.034 202.963 267.034 cv
cp
.203922 .203922 .2 rgb
f
109.701 264.743 mo
102.915 264.743 li
102.915 256.472 li
109.701 256.472 li
109.701 264.743 li
.235294 .235294 .231373 rgb
f
170.64 257.79 mo
104.777 257.79 li
104.777 263.425 li
170.64 263.425 li
170.64 257.79 li
cp
f
81.6905 271.34 mo
81.7933 271.047 82.4769 270.842 82.342 270.563 cv
82.1791 270.226 81.23 269.949 80.8593 269.899 cv
80.4155 271.178 78.7709 274.527 82.1753 277.211 cv
82.8516 276.802 80.296 275.314 81.6905 271.34 cv
cp
f
89.213 276.12 mo
89.213 277.043 88.4613 277.795 87.5324 277.795 cv
78.4308 277.795 li
77.2414 277.795 76.4307 276.587 76.8803 275.487 cv
77.8865 272.995 li
78.1468 272.362 78.7562 271.948 79.4428 271.942 cv
87.5263 271.924 li
87.5382 271.924 li
88.4613 271.924 89.213 272.676 89.213 273.599 cv
89.213 276.12 li
106.57 268.374 mo
106.57 261.61 li
106.57 257.676 103.381 254.488 99.4469 254.488 cv
65.9519 254.488 li
64.0864 256.668 li
64.0864 267.593 li
65.7135 267.137 66.9859 267.403 67.8558 268.019 cv
68.6369 268.569 69.0807 269.403 69.1518 270.261 cv
69.2051 270.895 69.0513 271.545 68.6726 272.096 cv
58.9319 290.737 li
70.5188 293.548 li
70.8147 292.216 li
69.9507 290.796 li
73.6493 282.967 li
75.6731 282.943 li
75.7738 282.18 li
74.892 280.375 li
75.4305 279.049 li
89.9526 279.049 li
102.637 276.764 li
104.913 276.353 106.569 274.372 106.57 272.059 cv
106.57 268.374 li
.113725 .113725 .105882 rgb
f
102.915 258.687 mo
102.915 259.801 102.012 260.704 100.898 260.704 cv
64.6481 260.704 li
63.5338 260.704 62.6306 259.801 62.6306 258.687 cv
62.6306 257.572 63.5338 256.669 64.6481 256.669 cv
100.898 256.669 li
102.012 256.669 102.915 257.572 102.915 258.687 cv
cp
.235294 .235294 .231373 rgb
f
106.569 264.107 mo
85.1837 264.107 li
84.7386 264.107 84.378 263.746 84.378 263.301 cv
84.378 263.285 li
84.378 262.84 84.7386 262.48 85.1837 262.48 cv
106.569 262.48 li
106.569 264.107 li
f
90.7564 269.186 mo
90.7417 269.186 li
90.3422 269.186 90.0186 268.863 90.0186 268.463 cv
90.0186 263.293 li
91.4795 263.293 li
91.4795 268.463 li
91.4795 268.863 91.1556 269.186 90.7564 269.186 cv
cp
f
88.3727 266.24 mo
88.3727 267.002 87.7543 267.621 86.9918 267.621 cv
86.2292 267.621 85.6109 267.002 85.6109 266.24 cv
85.6109 265.477 86.2292 264.859 86.9918 264.859 cv
87.7543 264.859 88.3727 265.477 88.3727 266.24 cv
cp
f
74.7553 264.107 mo
74.7553 264.745 74.2378 265.263 73.5996 265.263 cv
72.9614 265.263 72.4441 264.745 72.4441 264.107 cv
72.4441 263.469 72.9614 262.951 73.5996 262.951 cv
74.2378 262.951 74.7553 263.469 74.7553 264.107 cv
cp
f
71.0139 263.293 mo
66.2797 263.293 li
66.2797 260.704 li
71.0139 260.704 li
71.0139 263.293 li
cp
f
91.4795 268.019 mo
91.4795 268.468 li
91.4795 269.457 90.6746 270.261 89.6862 270.261 cv
69.1518 270.261 li
69.0807 269.403 68.6369 268.569 67.8559 268.019 cv
91.4795 268.019 li
cp
f
69.5838 255.835 mo
64.0837 255.835 li
64.0837 253.102 li
69.5838 253.102 li
69.5838 255.835 li
cp
f
112.931 264.743 mo
108.074 264.743 li
108.074 256.471 li
112.931 256.471 li
112.931 264.743 li
cp
.341176 .341176 .337255 rgb
f
92.0608 267.078 mo
92.0608 264.72 li
105.14 264.72 li
93.2055 265.697 li
92.0608 267.078 li
.337255 .337255 .329412 rgb
f
60.6818 289.943 mo
70.2229 271.879 li
76.833 271.879 li
70.2229 273.555 li
60.6818 289.943 li
f
148.461 260.101 mo
105.14 260.101 li
106.57 268.374 li
144.49 268.374 li
146.683 268.374 148.461 266.596 148.461 264.402 cv
148.461 260.101 li
.113725 .113725 .105882 rgb
f
124.419 270.924 mo
106.57 270.924 li
106.57 268.374 li
124.419 268.374 li
124.419 270.924 li
cp
.341176 .341176 .337255 rgb
f
126.713 287.842 mo
109.701 290.5 li
107.916 285.509 106.541 277.953 106.571 270.723 cv
123.349 270.723 li
122.922 277.009 124.383 281.776 126.713 287.842 cv
cp
.235294 .235294 .231373 rgb
f
110.569 289.064 mo
108.978 284.178 107.976 277.849 107.866 272.008 cv
122.002 272.008 li
121.858 277.592 123.201 282.122 124.95 286.817 cv
110.569 289.064 li
cp
.113725 .113725 .105882 rgb
f
113.439 287.742 mo
113.189 287.742 112.951 287.595 112.847 287.349 cv
110.631 282.106 110.293 273.925 110.28 273.58 cv
110.266 273.225 110.542 272.926 110.897 272.912 cv
111.227 272.916 111.551 273.174 111.564 273.53 cv
111.567 273.612 111.907 281.823 114.031 286.849 cv
114.169 287.176 114.017 287.554 113.69 287.692 cv
113.439 287.742 li
cp
.235294 .235294 .231373 rgb
f
117.466 287.242 mo
117.218 287.242 116.98 287.097 116.876 286.854 cv
114.556 281.469 114.306 273.895 114.296 273.575 cv
114.286 273.221 114.564 272.925 114.92 272.913 cv
115.265 272.922 115.571 273.182 115.581 273.537 cv
115.59 273.847 115.833 281.183 118.056 286.345 cv
118.197 286.671 118.046 287.049 117.72 287.19 cv
117.466 287.242 li
cp
f
121.435 286.587 mo
121.186 286.587 120.949 286.441 120.844 286.198 cv
118.529 280.812 118.372 273.725 118.367 273.427 cv
118.36 273.071 118.642 272.778 118.998 272.771 cv
119.372 272.77 119.645 273.048 119.652 273.402 cv
119.653 273.473 119.812 280.539 122.025 285.691 cv
122.165 286.017 122.015 286.395 121.688 286.534 cv
121.435 286.587 li
cp
f
180.749 268.702 mo
127.947 269.629 li
127.317 269.64 126.8 269.132 126.8 268.502 cv
126.8 257.618 li
126.8 256.988 127.317 256.481 127.947 256.492 cv
180.749 257.419 li
182.719 257.453 184.297 259.06 184.297 261.03 cv
184.297 265.091 li
184.297 267.061 182.719 268.667 180.749 268.702 cv
f
141.772 259.647 mo
141.772 260.177 141.342 260.607 140.811 260.607 cv
133.091 260.607 li
132.561 260.607 132.131 260.177 132.131 259.647 cv
132.131 259.117 132.561 258.687 133.091 258.687 cv
140.811 258.687 li
141.342 258.687 141.772 259.117 141.772 259.647 cv
cp
.113725 .113725 .105882 rgb
f
155.549 259.647 mo
155.549 260.177 155.119 260.607 154.589 260.607 cv
146.869 260.607 li
146.338 260.607 145.908 260.177 145.908 259.647 cv
145.908 259.117 146.338 258.687 146.869 258.687 cv
154.589 258.687 li
155.119 258.687 155.549 259.117 155.549 259.647 cv
cp
f
169.326 259.647 mo
169.326 260.177 168.896 260.607 168.366 260.607 cv
160.646 260.607 li
160.115 260.607 159.685 260.177 159.685 259.647 cv
159.685 259.117 160.115 258.687 160.646 258.687 cv
168.366 258.687 li
168.896 258.687 169.326 259.117 169.326 259.647 cv
cp
f
181.003 258.324 mo
181.003 258.472 180.884 258.592 180.736 258.592 cv
173.88 258.592 li
173.732 258.592 173.612 258.472 173.612 258.324 cv
173.612 258.177 173.732 258.057 173.88 258.057 cv
180.736 258.057 li
180.884 258.057 181.003 258.177 181.003 258.324 cv
f
181.003 259.38 mo
181.003 259.527 180.884 259.647 180.736 259.647 cv
173.88 259.647 li
173.732 259.647 173.612 259.527 173.612 259.38 cv
173.612 259.232 173.732 259.112 173.88 259.112 cv
180.736 259.112 li
180.884 259.112 181.003 259.232 181.003 259.38 cv
f
181.003 260.435 mo
181.003 260.583 180.884 260.702 180.736 260.702 cv
173.88 260.702 li
173.732 260.702 173.612 260.583 173.612 260.435 cv
173.612 260.287 173.732 260.168 173.88 260.168 cv
180.736 260.168 li
180.884 260.168 181.003 260.287 181.003 260.435 cv
f
181.003 261.49 mo
181.003 261.638 180.884 261.758 180.736 261.758 cv
173.88 261.758 li
173.732 261.758 173.612 261.638 173.612 261.49 cv
173.612 261.343 173.732 261.223 173.88 261.223 cv
180.736 261.223 li
180.884 261.223 181.003 261.343 181.003 261.49 cv
f
181.003 262.546 mo
181.003 262.693 180.884 262.813 180.736 262.813 cv
173.88 262.813 li
173.732 262.813 173.612 262.693 173.612 262.546 cv
173.612 262.398 173.732 262.278 173.88 262.278 cv
180.736 262.278 li
180.884 262.278 181.003 262.398 181.003 262.546 cv
f
181.003 263.601 mo
181.003 263.749 180.884 263.868 180.736 263.868 cv
173.88 263.868 li
173.732 263.868 173.612 263.749 173.612 263.601 cv
173.612 263.453 173.732 263.334 173.88 263.334 cv
180.736 263.334 li
180.884 263.334 181.003 263.453 181.003 263.601 cv
f
181.003 264.656 mo
181.003 264.804 180.884 264.923 180.736 264.923 cv
173.88 264.923 li
173.732 264.923 173.612 264.804 173.612 264.656 cv
173.612 264.508 173.732 264.389 173.88 264.389 cv
180.736 264.389 li
180.884 264.389 181.003 264.508 181.003 264.656 cv
f
181.003 265.711 mo
181.003 265.859 180.884 265.979 180.736 265.979 cv
173.88 265.979 li
173.732 265.979 173.612 265.859 173.612 265.711 cv
173.612 265.564 173.732 265.444 173.88 265.444 cv
180.736 265.444 li
180.884 265.444 181.003 265.564 181.003 265.711 cv
f
181.003 266.767 mo
181.003 266.914 180.884 267.034 180.736 267.034 cv
173.88 267.034 li
173.732 267.034 173.612 266.914 173.612 266.767 cv
173.612 266.619 173.732 266.499 173.88 266.499 cv
180.736 266.499 li
180.884 266.499 181.003 266.619 181.003 266.767 cv
f
181.003 267.822 mo
181.003 267.97 180.884 268.089 180.736 268.089 cv
173.88 268.089 li
173.732 268.089 173.612 267.97 173.612 267.822 cv
173.612 267.674 173.732 267.555 173.88 267.555 cv
180.736 267.555 li
180.884 267.555 181.003 267.674 181.003 267.822 cv
f
170.801 268.876 mo
170.801 268.876 li
180.749 268.702 li
170.801 268.876 li
183.693 259.029 mo
183.693 259.029 li
183.057 258.075 181.979 257.44 180.749 257.419 cv
170.801 257.244 li
170.801 257.244 li
180.749 257.419 li
181.979 257.44 183.057 258.075 183.693 259.029 cv
.73238 .73238 .730012 rgb
f
184.297 261.408 mo
184.297 261.408 li
184.297 261.03 li
184.297 261.03 li
184.297 261.408 li
184.234 260.354 mo
184.143 259.872 183.956 259.423 183.693 259.029 cv
183.693 259.029 li
183.956 259.423 184.143 259.872 184.234 260.354 cv
.270588 .270588 .266667 rgb
f
184.297 265.033 mo
170.801 265.033 li
170.801 257.244 li
180.749 257.419 li
181.979 257.44 183.057 258.075 183.693 259.029 cv
183.956 259.423 184.143 259.872 184.234 260.354 cv
184.276 260.573 184.297 260.799 184.297 261.03 cv
184.297 261.408 li
184.297 265.033 li
173.88 264.389 mo
173.732 264.389 173.612 264.508 173.612 264.656 cv
173.612 264.804 173.732 264.923 173.88 264.923 cv
180.736 264.923 li
180.884 264.923 181.003 264.804 181.003 264.656 cv
181.003 264.508 180.884 264.389 180.736 264.389 cv
173.88 264.389 li
173.88 263.334 mo
173.732 263.334 173.612 263.453 173.612 263.601 cv
173.612 263.749 173.732 263.868 173.88 263.868 cv
180.736 263.868 li
180.884 263.868 181.003 263.749 181.003 263.601 cv
181.003 263.453 180.884 263.334 180.736 263.334 cv
173.88 263.334 li
173.88 262.278 mo
173.732 262.278 173.612 262.398 173.612 262.546 cv
173.612 262.693 173.732 262.813 173.88 262.813 cv
180.736 262.813 li
180.884 262.813 181.003 262.693 181.003 262.546 cv
181.003 262.398 180.884 262.278 180.736 262.278 cv
173.88 262.278 li
173.88 261.223 mo
173.732 261.223 173.612 261.343 173.612 261.49 cv
173.612 261.638 173.732 261.758 173.88 261.758 cv
180.736 261.758 li
180.884 261.758 181.003 261.638 181.003 261.49 cv
181.003 261.343 180.884 261.223 180.736 261.223 cv
173.88 261.223 li
173.88 260.168 mo
173.732 260.168 173.612 260.287 173.612 260.435 cv
173.612 260.583 173.732 260.702 173.88 260.702 cv
180.736 260.702 li
180.884 260.702 181.003 260.583 181.003 260.435 cv
181.003 260.287 180.884 260.168 180.736 260.168 cv
173.88 260.168 li
173.88 259.112 mo
173.732 259.112 173.612 259.232 173.612 259.38 cv
173.612 259.527 173.732 259.647 173.88 259.647 cv
180.736 259.647 li
180.884 259.647 181.003 259.527 181.003 259.38 cv
181.003 259.232 180.884 259.112 180.736 259.112 cv
173.88 259.112 li
173.88 258.057 mo
173.732 258.057 173.612 258.177 173.612 258.324 cv
173.612 258.472 173.732 258.592 173.88 258.592 cv
180.736 258.592 li
180.884 258.592 181.003 258.472 181.003 258.324 cv
181.003 258.177 180.884 258.057 180.736 258.057 cv
173.88 258.057 li
.2 .2 .192157 rgb
f
180.736 258.592 mo
173.88 258.592 li
173.732 258.592 173.612 258.472 173.612 258.324 cv
173.612 258.177 173.732 258.057 173.88 258.057 cv
180.736 258.057 li
180.884 258.057 181.003 258.177 181.003 258.324 cv
181.003 258.472 180.884 258.592 180.736 258.592 cv
.113725 .113725 .105882 rgb
f
180.736 259.647 mo
173.88 259.647 li
173.732 259.647 173.612 259.527 173.612 259.38 cv
173.612 259.232 173.732 259.112 173.88 259.112 cv
180.736 259.112 li
180.884 259.112 181.003 259.232 181.003 259.38 cv
181.003 259.527 180.884 259.647 180.736 259.647 cv
f
180.736 260.702 mo
173.88 260.702 li
173.732 260.702 173.612 260.583 173.612 260.435 cv
173.612 260.287 173.732 260.168 173.88 260.168 cv
180.736 260.168 li
180.884 260.168 181.003 260.287 181.003 260.435 cv
181.003 260.583 180.884 260.702 180.736 260.702 cv
f
180.736 261.758 mo
173.88 261.758 li
173.732 261.758 173.612 261.638 173.612 261.49 cv
173.612 261.343 173.732 261.223 173.88 261.223 cv
180.736 261.223 li
180.884 261.223 181.003 261.343 181.003 261.49 cv
181.003 261.638 180.884 261.758 180.736 261.758 cv
f
180.736 262.813 mo
173.88 262.813 li
173.732 262.813 173.612 262.693 173.612 262.546 cv
173.612 262.398 173.732 262.278 173.88 262.278 cv
180.736 262.278 li
180.884 262.278 181.003 262.398 181.003 262.546 cv
181.003 262.693 180.884 262.813 180.736 262.813 cv
f
180.736 263.868 mo
173.88 263.868 li
173.732 263.868 173.612 263.749 173.612 263.601 cv
173.612 263.453 173.732 263.334 173.88 263.334 cv
180.736 263.334 li
180.884 263.334 181.003 263.453 181.003 263.601 cv
181.003 263.749 180.884 263.868 180.736 263.868 cv
f
180.736 264.923 mo
173.88 264.923 li
173.732 264.923 173.612 264.804 173.612 264.656 cv
173.612 264.508 173.732 264.389 173.88 264.389 cv
180.736 264.389 li
180.884 264.389 181.003 264.508 181.003 264.656 cv
181.003 264.804 180.884 264.923 180.736 264.923 cv
f
78.4449 249.056 mo
75.6957 251.52 li
75.5261 251.626 75.2963 251.527 75.2572 251.33 cv
74.6477 248.278 74.6028 245.288 75.0714 242.371 cv
75.1035 242.17 75.3348 242.065 75.5083 242.171 cv
78.4449 244.726 li
78.4449 249.056 li
.113725 .113725 .105882 rgb
f
87.079 250.977 mo
77.1174 250.977 li
77.1174 242.828 li
87.079 242.828 li
87.079 250.977 li
.203922 .203922 .2 rgb
f
91.7775 249.287 mo
87.079 250.977 li
87.079 242.828 li
91.7775 244.518 li
91.7775 249.287 li
.341176 .341176 .337255 rgb
f
102.776 249.287 mo
91.7775 249.287 li
91.7775 244.518 li
102.776 244.518 li
102.776 249.287 li
.203922 .203922 .2 rgb
f
125.464 244.932 mo
125.464 251.044 li
101.167 251.044 li
100.47 251.044 99.9057 250.479 99.9057 249.783 cv
99.9057 244.16 li
99.9057 243.463 100.47 242.898 101.167 242.898 cv
110.274 242.898 li
112.585 244.587 li
113.052 244.932 li
125.464 244.932 li
.341176 .341176 .337255 rgb
f
128.15 251.903 mo
123.947 251.903 li
123.947 244.124 li
128.15 244.124 li
128.15 251.903 li
.203922 .203922 .2 rgb
f
122.408 245.321 mo
122.408 245.754 122.053 246.11 121.608 246.11 cv
103.573 246.11 li
103.139 246.11 102.773 245.754 102.773 245.321 cv
102.773 244.876 103.139 244.521 103.573 244.521 cv
112.585 244.521 li
113.052 244.865 li
122.264 244.865 li
122.353 244.988 122.408 245.154 122.408 245.321 cv
cp
f
119.753 251.044 mo
105.14 251.044 li
105.229 250.088 106.029 249.355 107.007 249.355 cv
117.897 249.355 li
118.864 249.355 119.664 250.088 119.753 251.044 cv
f
102.823 248.72 mo
102.823 249.315 102.341 249.797 101.746 249.797 cv
101.152 249.797 100.67 249.315 100.67 248.72 cv
100.67 248.125 101.152 247.643 101.746 247.643 cv
102.341 247.643 102.823 248.125 102.823 248.72 cv
f
75.545 251.563 mo
75.415 251.563 75.29 251.475 75.2588 251.338 cv
75.29 251.475 75.415 251.563 75.545 251.563 cv
75.545 251.563 75.545 251.563 75.545 251.563 cv
75.2572 251.33 mo
75.2572 251.33 li
75.2554 251.322 75.2536 251.313 75.2518 251.304 cv
75.2536 251.313 75.2554 251.322 75.2572 251.33 cv
75.2572 251.33 li
.822745 .822745 .821176 rgb
f
75.545 251.563 mo
75.415 251.563 75.29 251.475 75.2588 251.338 cv
75.2582 251.336 75.2577 251.333 75.2572 251.33 cv
75.2572 251.33 li
75.2554 251.322 75.2536 251.313 75.2518 251.304 cv
75.0476 250.274 74.9306 249.254 74.8526 248.238 cv
77.1174 248.238 li
77.1174 250.245 li
75.6957 251.52 li
75.6957 251.52 li
75.6484 251.549 75.5963 251.563 75.545 251.563 cv
.113725 .113725 .105882 rgb
f
87.079 250.977 mo
77.1174 250.977 li
77.1175 250.245 li
77.1174 250.245 li
77.1174 248.238 li
87.079 248.238 li
87.079 250.977 li
.184314 .184314 .180392 rgb
f
87.079 250.977 mo
87.079 248.238 li
91.7775 248.238 li
91.7775 249.287 li
87.079 250.977 li
.294118 .294118 .290196 rgb
f
99.9057 249.287 mo
96.6217 249.287 li
91.7775 249.287 li
91.7775 248.238 li
99.9057 248.238 li
99.9057 249.287 li
.184314 .184314 .180392 rgb
f
123.947 251.044 mo
119.753 251.044 li
119.664 250.088 118.863 249.355 117.897 249.355 cv
107.007 249.355 li
106.029 249.355 105.229 250.088 105.14 251.044 cv
101.167 251.044 li
100.498 251.044 99.95 250.522 99.9083 249.864 cv
99.9066 249.837 99.9057 249.81 99.9057 249.783 cv
99.9057 249.287 li
99.9057 248.238 li
100.783 248.238 li
100.711 248.383 100.67 248.547 100.67 248.72 cv
100.67 249.315 101.152 249.797 101.746 249.797 cv
102.341 249.797 102.823 249.315 102.823 248.72 cv
102.823 248.547 102.782 248.383 102.709 248.238 cv
123.947 248.238 li
123.947 251.044 li
.294118 .294118 .290196 rgb
f
128.15 251.903 mo
123.947 251.903 li
123.947 251.044 li
123.947 248.238 li
128.15 248.238 li
128.15 251.903 li
.184314 .184314 .180392 rgb
f
119.753 251.044 mo
105.14 251.044 li
105.229 250.088 106.029 249.355 107.007 249.355 cv
117.897 249.355 li
118.863 249.355 119.664 250.088 119.753 251.044 cv
f
101.746 249.797 mo
101.152 249.797 100.67 249.315 100.67 248.72 cv
100.67 248.547 100.711 248.383 100.783 248.238 cv
102.709 248.238 li
102.782 248.383 102.823 248.547 102.823 248.72 cv
102.823 249.315 102.341 249.797 101.746 249.797 cv
f
8.09422 257.605 mo
7.29962 256.877 6.24974 256.471 5.15874 256.471 cv
2.37444 256.471 li
.920905 256.471 -.113527 257.836 .309817 259.19 cv
3.34917 268.914 2.80618 279.258 .0640957 289.983 cv
-.274203 291.306 .770271 292.584 2.1703 292.584 cv
5.35284 292.584 li
6.32662 292.584 7.2713 292.261 8.0313 291.668 cv
8.94601 290.954 li
12.2498 279.831 12.6407 268.944 8.94601 258.386 cv
8.09422 257.605 li
cp
.113725 .113725 .105882 rgb
f
127.927 269.629 mo
127.81 269.629 127.698 269.611 127.592 269.578 cv
127.698 269.611 127.81 269.629 127.926 269.629 cv
127.933 269.629 127.94 269.629 127.947 269.629 cv
170.801 268.876 li
170.801 268.876 li
127.947 269.629 li
127.94 269.629 127.933 269.629 127.927 269.629 cv
.822745 .822745 .821176 rgb
f
127.926 269.629 mo
127.81 269.629 127.698 269.611 127.592 269.578 cv
127.134 269.436 126.8 269.009 126.8 268.502 cv
126.8 265.033 li
170.801 265.033 li
170.801 268.876 li
127.947 269.629 li
127.94 269.629 127.933 269.629 127.926 269.629 cv
.211765 .211765 .207843 rgb
f
170.801 268.876 mo
170.801 268.876 li
180.749 268.702 li
181.325 268.692 181.867 268.547 182.346 268.299 cv
181.867 268.547 181.325 268.692 180.749 268.702 cv
180.749 268.702 li
170.801 268.876 li
182.359 268.292 mo
182.36 268.292 182.361 268.291 182.361 268.291 cv
182.361 268.291 182.36 268.292 182.359 268.292 cv
.607259 .607259 .603783 rgb
f
170.801 268.876 mo
170.801 265.033 li
184.297 265.033 li
184.297 265.091 li
184.297 265.091 li
184.297 266.479 183.513 267.687 182.361 268.291 cv
182.361 268.291 182.36 268.292 182.359 268.292 cv
182.355 268.294 182.351 268.297 182.346 268.299 cv
181.867 268.547 181.325 268.692 180.749 268.702 cv
170.801 268.876 li
173.88 267.555 mo
173.732 267.555 173.612 267.674 173.612 267.822 cv
173.612 267.97 173.732 268.089 173.88 268.089 cv
180.736 268.089 li
180.884 268.089 181.003 267.97 181.003 267.822 cv
181.003 267.674 180.884 267.555 180.736 267.555 cv
173.88 267.555 li
173.88 266.499 mo
173.732 266.499 173.612 266.619 173.612 266.767 cv
173.612 266.914 173.732 267.034 173.88 267.034 cv
180.736 267.034 li
180.884 267.034 181.003 266.914 181.003 266.767 cv
181.003 266.619 180.884 266.499 180.736 266.499 cv
173.88 266.499 li
173.88 265.444 mo
173.732 265.444 173.612 265.564 173.612 265.711 cv
173.612 265.859 173.732 265.979 173.88 265.979 cv
180.736 265.979 li
180.884 265.979 181.003 265.859 181.003 265.711 cv
181.003 265.564 180.884 265.444 180.736 265.444 cv
173.88 265.444 li
.184314 .184314 .176471 rgb
f
180.736 265.979 mo
173.88 265.979 li
173.732 265.979 173.612 265.859 173.612 265.711 cv
173.612 265.564 173.732 265.444 173.88 265.444 cv
180.736 265.444 li
180.884 265.444 181.003 265.564 181.003 265.711 cv
181.003 265.859 180.884 265.979 180.736 265.979 cv
.113725 .113725 .105882 rgb
f
180.736 267.034 mo
173.88 267.034 li
173.732 267.034 173.612 266.914 173.612 266.767 cv
173.612 266.619 173.732 266.499 173.88 266.499 cv
180.736 266.499 li
180.884 266.499 181.003 266.619 181.003 266.767 cv
181.003 266.914 180.884 267.034 180.736 267.034 cv
f
180.736 268.089 mo
173.88 268.089 li
173.732 268.089 173.612 267.97 173.612 267.822 cv
173.612 267.674 173.732 267.555 173.88 267.555 cv
180.736 267.555 li
180.884 267.555 181.003 267.674 181.003 267.822 cv
181.003 267.97 180.884 268.089 180.736 268.089 cv
f
379.785 11.2524 mo
377.296 11.2524 li
377.836 7.70796 li
377.895 7.32642 378.308 7.03919 378.798 7.03919 cv
378.816 7.03919 li
379.351 7.03919 379.785 7.37887 379.785 7.79793 cv
379.785 11.2524 li
.235294 .235294 .231373 rgb
f
309.239 10.6745 mo
309.239 14.3043 li
387.066 14.2804 li
387.067 10.6489 li
309.239 10.6745 li
f
386.507 12.4831 mo
309.239 12.4831 li
309.239 11.2524 li
386.507 11.2524 li
386.507 12.4831 li
.34902 .34902 .345098 rgb
f
273.056 11.7517 mo
259.101 11.7517 li
259.101 9.61265 li
259.101 8.83965 259.727 8.213 260.5 8.213 cv
271.676 8.213 li
272.438 8.213 273.056 8.83088 273.056 9.59306 cv
273.056 11.7517 li
cp
.235294 .235294 .231373 rgb
f
258.373 23.3554 mo
258.372 25.3653 256.884 27 255.056 26.9992 cv
249.286 26.9962 li
247.458 26.9952 245.971 25.3594 245.972 23.3492 cv
245.973 21.2384 li
249.852 21.2404 li
249.935 23.0661 251.014 24.7032 253.327 26.1063 cv
254.522 26.107 li
252.642 24.7081 251.592 23.1199 251.815 21.2411 cv
258.374 21.2443 li
258.373 23.3554 li
245.247 20.5118 mo
245.246 23.3489 li
245.245 25.7593 247.058 27.7212 249.285 27.7221 cv
255.056 27.7252 li
257.284 27.7263 259.098 25.7657 259.099 23.3557 cv
259.1 20.5187 li
245.247 20.5118 li
.113725 .113725 .105882 rgb
f
328.29 13.538 mo
328.29 14.6171 li
326.979 18.0983 323.627 20.5904 319.683 20.5904 cv
246.525 20.5648 li
245.227 20.5648 li
244.547 20.8988 243.879 21.2456 243.211 21.6053 cv
239.537 23.6093 236.03 26.1014 232.754 29.1074 cv
230.712 30.9958 227.962 31.8949 225.316 31.4196 cv
222.336 30.8929 li
221.167 30.6745 219.959 30.6874 218.778 30.8929 cv
173.277 39.23 li
172.661 39.3456 172.121 38.8061 172.211 38.1895 cv
173.239 31.1241 172.917 23.7763 171.389 16.1971 cv
171.273 15.5933 171.71 15.0282 172.327 15.0024 cv
217.21 12.9729 li
224.905 16.4412 li
226.549 17.1863 228.425 17.3405 230.223 16.878 cv
237.571 13.1783 li
238.766 12.5874 239.999 12.1121 241.284 11.7909 cv
242.8 11.3927 244.367 11.1873 245.96 11.1873 cv
257.316 11.1873 li
257.431 11.2643 li
273.27 11.2643 li
273.27 12.626 li
274.773 12.626 li
274.773 13.538 li
328.29 13.538 li
.490196 .305882 .141176 rgb
f
243.86 9.21342 mo
243.28 9.21342 li
243.28 7.39734 li
243.86 7.39734 li
243.86 9.21342 li
cp
.235294 .235294 .231373 rgb
f
244.102 11.0761 mo
241.104 11.0761 li
241.104 7.98677 li
244.102 7.98677 li
244.102 11.0761 li
cp
f
242.92 8.13823 mo
242.92 8.92439 242.282 9.56168 241.496 9.56168 cv
240.71 9.56168 240.073 8.92439 240.073 8.13823 cv
240.073 7.35199 240.71 6.7147 241.496 6.7147 cv
242.282 6.7147 242.92 7.35199 242.92 8.13823 cv
cp
.341176 .341176 .337255 rgb
f
242.396 8.13823 mo
242.396 8.63513 241.993 9.03792 241.496 9.03792 cv
240.999 9.03792 240.596 8.63513 240.596 8.13823 cv
240.596 7.64125 240.999 7.23846 241.496 7.23846 cv
241.993 7.23846 242.396 7.64125 242.396 8.13823 cv
cp
.113725 .113725 .105882 rgb
f
268.405 12.3082 mo
243.377 12.3082 li
243.377 8.89534 li
268.405 8.89534 li
268.405 12.3082 li
cp
f
260.378 11.1872 mo
251.404 11.1872 li
251.404 10.4496 li
251.404 9.80499 251.926 9.28239 252.571 9.28239 cv
260.378 9.28239 li
260.378 11.1872 li
cp
.341176 .341176 .337255 rgb
f
274.459 13.8328 mo
318.628 13.8328 li
317.705 11.7788 li
317.175 10.6 316.018 9.82783 314.726 9.79105 cv
272.467 8.58768 li
272.467 11.8409 li
272.467 12.941 273.359 13.8328 274.459 13.8328 cv
cp
.113725 .113725 .105882 rgb
f
246.615 20.5135 mo
246.525 20.5648 li
245.227 20.5648 li
244.547 20.8988 243.879 21.2456 243.211 21.6053 cv
241.236 10.8647 li
243.377 9.82235 li
246.024 9.82235 li
246.615 20.5135 li
.235294 .235294 .231373 rgb
f
245.251 18.413 mo
245.251 18.7974 244.94 19.109 244.556 19.109 cv
244.171 19.109 243.86 18.7974 243.86 18.413 cv
243.86 18.0288 244.171 17.7172 244.556 17.7172 cv
244.94 17.7172 245.251 18.0288 245.251 18.413 cv
.113725 .113725 .105882 rgb
f
243.351 12.8197 mo
240.072 12.8197 li
240.072 10.8648 li
243.351 10.8648 li
243.351 12.8197 li
cp
.341176 .341176 .337255 rgb
f
387.546 14.6319 mo
379.785 14.6319 li
379.785 10.1702 li
387.546 10.1702 li
387.546 14.6319 li
cp
.113725 .113725 .105882 rgb
f
271.046 25.9366 mo
261.52 28.6107 li
260.277 28.9596 259.045 28.0256 259.045 26.7349 cv
259.045 20.5187 li
272.467 20.5187 li
272.467 24.0608 li
272.467 24.934 271.886 25.7005 271.046 25.9366 cv
f
261.77 26.5221 mo
261.77 26.9064 261.458 27.2179 261.074 27.2179 cv
260.69 27.2179 260.378 26.9064 260.378 26.5221 cv
260.378 26.1378 260.69 25.8263 261.074 25.8263 cv
261.458 25.8263 261.77 26.1378 261.77 26.5221 cv
cp
.341176 .341176 .337255 rgb
f
271.517 24.3142 mo
271.517 24.6985 271.206 25.01 270.822 25.01 cv
270.437 25.01 270.126 24.6985 270.126 24.3142 cv
270.126 23.9299 270.437 23.6184 270.822 23.6184 cv
271.206 23.6184 271.517 23.9299 271.517 24.3142 cv
cp
f
172.211 38.1895 mo
172.213 38.1733 172.216 38.1568 172.218 38.1406 cv
172.216 38.157 172.213 38.1731 172.211 38.1895 cv
172.223 38.1087 mo
172.223 38.1061 172.223 38.1036 172.224 38.101 cv
172.223 38.1036 172.223 38.1061 172.223 38.1087 cv
172.269 37.7803 mo
172.27 37.7753 172.27 37.7702 172.271 37.7652 cv
172.27 37.7704 172.27 37.7751 172.269 37.7803 cv
172.276 37.7293 mo
172.278 37.7134 172.28 37.6973 172.282 37.6814 cv
172.28 37.6974 172.278 37.7133 172.276 37.7293 cv
172.284 37.6703 mo
172.633 35.101 172.802 32.4879 172.802 29.8524 cv
172.803 29.8523 172.805 29.8521 172.806 29.852 cv
172.805 32.4936 172.633 35.1003 172.284 37.6703 cv
319.711 20.5904 mo
319.713 20.5904 319.716 20.5904 319.718 20.5904 cv
319.716 20.5904 319.713 20.5904 319.711 20.5904 cv
319.74 20.5903 mo
319.742 20.5903 319.745 20.5902 319.747 20.5902 cv
319.744 20.5902 319.742 20.5903 319.74 20.5903 cv
319.804 20.5897 mo
319.805 20.5896 319.807 20.5896 319.808 20.5896 cv
319.807 20.5896 319.805 20.5896 319.804 20.5897 cv
319.835 20.5892 mo
319.836 20.5892 319.836 20.5892 319.837 20.5892 cv
319.836 20.5892 319.836 20.5892 319.835 20.5892 cv
.822745 .822745 .821176 rgb
f
173.109 39.2457 mo
172.611 39.2457 172.202 38.8275 172.201 38.3257 cv
172.201 38.2809 172.204 38.2354 172.211 38.1895 cv
172.211 38.1895 li
172.213 38.1731 172.216 38.157 172.218 38.1406 cv
172.22 38.1299 172.221 38.1194 172.223 38.1087 cv
172.223 38.1061 172.223 38.1036 172.224 38.101 cv
172.239 37.9942 172.254 37.8872 172.269 37.7803 cv
172.27 37.7751 172.27 37.7704 172.271 37.7652 cv
172.273 37.7531 172.274 37.7413 172.276 37.7293 cv
172.278 37.7133 172.28 37.6974 172.282 37.6814 cv
172.283 37.6777 172.283 37.674 172.284 37.6703 cv
172.633 35.1003 172.805 32.4936 172.806 29.852 cv
184.128 28.6956 219.638 25.8316 219.638 25.8316 cv
227.5 26.5253 li
235.323 21.5053 li
237.575 20.0597 240.043 19.0094 242.619 18.3856 cv
243.211 21.6053 li
239.537 23.6093 236.03 26.1014 232.754 29.1074 cv
231.074 30.6608 228.915 31.5448 226.729 31.545 cv
226.258 31.545 225.786 31.5039 225.316 31.4196 cv
222.336 30.8929 li
221.76 30.7854 221.175 30.7339 220.589 30.7339 cv
219.984 30.7339 219.378 30.7886 218.778 30.8929 cv
173.277 39.23 li
173.22 39.2406 173.164 39.2457 173.109 39.2457 cv
319.683 20.5904 mo
272.467 20.5739 li
272.467 20.5187 li
259.045 20.5187 li
259.045 20.5692 li
246.525 20.5648 li
246.615 20.5135 li
246.464 17.78 li
247.058 17.7354 247.655 17.713 248.254 17.713 cv
326.337 17.713 li
324.712 19.4509 322.396 20.5468 319.837 20.5892 cv
319.836 20.5892 319.836 20.5892 319.835 20.5892 cv
319.826 20.5893 319.817 20.5895 319.808 20.5896 cv
319.807 20.5896 319.805 20.5896 319.804 20.5897 cv
319.785 20.5899 319.766 20.5901 319.747 20.5902 cv
319.745 20.5902 319.742 20.5903 319.74 20.5903 cv
319.733 20.5903 319.725 20.5903 319.718 20.5904 cv
319.716 20.5904 319.713 20.5904 319.711 20.5904 cv
319.701 20.5904 319.692 20.5904 319.683 20.5904 cv
319.683 20.5904 li
.415686 .266667 .133333 rgb
f
243.211 21.6053 mo
243.211 21.6053 li
242.619 18.3856 li
243.053 18.2803 243.49 18.1873 243.931 18.1065 cv
243.885 18.199 243.86 18.303 243.86 18.413 cv
243.86 18.7974 244.171 19.109 244.556 19.109 cv
244.94 19.109 245.251 18.7974 245.251 18.413 cv
245.251 18.2243 245.176 18.0531 245.054 17.9277 cv
245.522 17.8647 245.992 17.8154 246.464 17.78 cv
246.615 20.5135 li
246.525 20.5648 li
245.227 20.5648 li
244.547 20.8988 243.879 21.2456 243.211 21.6053 cv
.211765 .211765 .207843 rgb
f
244.556 19.109 mo
244.171 19.109 243.86 18.7974 243.86 18.413 cv
243.86 18.303 243.885 18.199 243.931 18.1065 cv
244.303 18.0381 244.678 17.9784 245.054 17.9277 cv
245.176 18.0531 245.251 18.2243 245.251 18.413 cv
245.251 18.7974 244.94 19.109 244.556 19.109 cv
.113725 .113725 .105882 rgb
f
272.467 20.5739 mo
259.045 20.5692 li
259.045 20.5187 li
272.467 20.5187 li
272.467 20.5739 li
f
47.2001 53.6648 mo
35.0286 60.754 li
34.6648 60.132 34.3244 59.5099 33.9958 58.8761 cv
29.1248 49.639 27.2234 38.9698 28.6084 28.6176 cv
39.7235 30.1083 li
42.5639 30.4839 li
41.4958 38.4651 43.1507 46.7047 47.2001 53.6648 cv
cp
.203922 .203922 .2 rgb
f
44.4066 52.808 mo
33.9958 58.8761 li
29.1248 49.639 27.2234 38.9698 28.6084 28.6176 cv
40.4668 30.0887 li
39.5279 37.9174 40.4394 45.9887 44.4066 52.808 cv
cp
.113725 .113725 .105882 rgb
f
141.509 21.8845 mo
129.278 21.8845 li
129.278 17.2757 li
141.509 17.2757 li
141.509 21.8845 li
.203922 .203922 .2 rgb
f
122.091 16.12 mo
122.091 16.5725 121.724 16.9392 121.272 16.9392 cv
113.519 16.9392 li
113.066 16.9392 112.699 16.5725 112.699 16.12 cv
112.699 15.6065 li
112.699 15.1541 113.066 14.7873 113.519 14.7873 cv
121.272 14.7873 li
121.724 14.7873 122.091 15.1541 122.091 15.6065 cv
122.091 16.12 li
109.84 16.12 mo
109.84 16.5725 109.474 16.9392 109.021 16.9392 cv
101.268 16.9392 li
100.815 16.9392 100.449 16.5725 100.449 16.12 cv
100.449 15.6065 li
100.449 15.1541 100.815 14.7873 101.268 14.7873 cv
109.021 14.7873 li
109.474 14.7873 109.84 15.1541 109.84 15.6065 cv
109.84 16.12 li
97.5896 16.12 mo
97.5896 16.5725 97.2229 16.9392 96.7704 16.9392 cv
89.0173 16.9392 li
88.5647 16.9392 88.198 16.5725 88.198 16.12 cv
88.198 15.6065 li
88.198 15.1541 88.5647 14.7873 89.0173 14.7873 cv
96.7704 14.7873 li
97.2229 14.7873 97.5896 15.1541 97.5896 15.6065 cv
97.5896 16.12 li
81.276 34.9802 mo
81.2712 35.8493 80.5627 36.55 79.6936 36.5451 cv
71.1716 36.4975 li
70.0579 36.4913 69.305 35.3568 69.7321 34.3285 cv
70.6871 32.0009 li
70.9341 31.4095 71.5069 31.0249 72.1497 31.0228 cv
79.7188 31.0485 li
79.7247 31.0486 li
80.5899 31.0589 81.2939 31.7596 81.2891 32.6248 cv
81.276 34.9802 li
97.6309 13.7412 mo
59.6375 13.7412 li
59.6375 27.1997 li
60.6747 27.2285 61.2785 27.2581 61.3212 27.2887 cv
62.0497 27.808 62.4609 28.5915 62.523 29.3954 cv
62.5694 29.9886 62.4219 30.5973 62.0646 31.1106 cv
52.8466 48.5136 li
63.681 51.206 li
63.9651 49.9609 li
63.1634 48.6265 li
66.6675 41.3153 li
68.5626 41.3037 li
68.6608 40.5894 li
67.8446 38.8949 li
68.3558 37.6566 li
80.157 37.5065 li
81.6041 37.4882 82.7678 36.3097 82.7678 34.8624 cv
82.7678 29.9331 li
97.5679 27.8236 li
115.988 27.7782 li
117.962 27.8059 118.858 26.7235 119.273 25.7233 cv
129.278 25.7233 li
129.278 13.7412 li
97.6309 13.7412 li
.407843 .403922 .403922 rgb
f
45.1883 30.9158 mo
18.3618 30.9158 li
18.3618 22.9802 li
49.2698 22.9802 li
49.2698 26.8344 li
49.2698 29.0886 47.4424 30.9158 45.1883 30.9158 cv
.203922 .203922 .2 rgb
f
74.2576 30.4707 mo
74.3553 30.1974 74.9964 30.0087 74.8715 29.7466 cv
74.721 29.4306 73.8337 29.166 73.4868 29.1179 cv
73.0646 30.3128 71.5072 33.4401 74.6808 35.9703 cv
75.3162 35.591 72.931 34.1841 74.2576 30.4707 cv
f
67.5019 36.8207 mo
61.4424 34.8474 li
54.4892 47.7799 li
62.5681 49.7875 li
61.9062 48.6859 li
67.5019 36.8207 li
f
82.7572 28.502 mo
82.7436 28.5018 li
82.3696 28.4998 82.0682 28.1949 82.0703 27.821 cv
82.0972 22.9802 li
83.4652 22.9879 li
83.4381 27.8286 li
83.436 28.2025 83.1312 28.5041 82.7572 28.502 cv
f
80.5407 25.7305 mo
80.5368 26.4445 79.9547 27.0202 79.2407 27.0163 cv
78.5267 27.0122 77.951 26.4301 77.9549 25.716 cv
77.959 25.002 78.5411 24.4264 79.2551 24.4305 cv
79.9692 24.4344 80.5448 25.0165 80.5407 25.7305 cv
f
83.6806 16.1839 mo
79.2479 16.1591 li
80.3426 10.6768 li
83.7171 9.64344 li
83.6806 16.1839 li
cp
f
83.4404 27.4123 mo
83.4381 27.8334 li
83.4329 28.7588 82.6751 29.5082 81.7497 29.5028 cv
62.5229 29.3954 li
62.4608 28.5917 62.0497 27.8081 61.3212 27.2888 cv
83.4404 27.4123 li
f
130.882 23.5788 mo
129.278 23.5788 li
129.278 15.5812 li
130.882 15.5812 li
130.882 23.5788 li
.113725 .113725 .105882 rgb
f
77.9549 13.7412 mo
28.1428 13.7412 li
3.29916 13.7412 li
3.14552 13.7412 li
1.45521 13.7412 .19301 15.3295 .616541 16.9659 cv
2.0483 22.498 1.79227 28.1812 .105883 33.9923 cv
-.415898 35.7904 1.06559 37.5362 2.92372 37.307 cv
19.4197 35.272 li
21.4933 35.0161 23.1956 33.5105 23.7028 31.4837 cv
23.9397 30.5373 li
24.4174 28.6279 26.1332 27.2887 28.1014 27.2887 cv
77.9549 27.2887 li
77.9549 13.7412 li
.407843 .403922 .403922 rgb
f
7.63403 36.728 mo
2.92743 37.3031 li
2.25843 37.3854 1.63633 37.2093 1.13167 36.8689 cv
1.00256 36.775 .873342 36.6694 .75601 36.5519 cv
.133907 35.9065 -.171201 34.9557 .110572 33.9815 cv
.286571 33.3946 .439125 32.7961 .580011 32.2093 cv
1.82411 27.0214 1.89455 21.9392 .615233 16.9626 cv
.192683 15.3312 1.46022 13.7467 3.15042 13.7467 cv
5.09884 13.7467 li
6.30772 19.9204 7.54014 25.8594 7.72792 31.8807 cv
7.78659 33.4886 7.75147 35.1083 7.63403 36.728 cv
.203922 .203922 .2 rgb
f
97.5896 22.9802 mo
13.667 22.9802 li
13.667 21.7749 li
97.5896 21.7749 li
97.5896 22.9802 li
f
86.2418 16.7866 mo
48.2916 16.7866 li
48.2916 15.5813 li
86.2418 15.5813 li
86.2418 16.7866 li
cp
f
45.0639 18.9462 mo
45.0639 20.2021 li
45.0639 20.6599 44.6883 21.0472 44.2189 21.0472 cv
30.944 21.0472 li
30.4746 21.0472 30.099 20.6599 30.099 20.2021 cv
30.099 18.9462 li
30.099 18.4885 30.4746 18.1129 30.944 18.1129 cv
44.2189 18.1129 li
44.6883 18.1129 45.0639 18.4885 45.0639 18.9462 cv
cp
f
45.0639 19.6857 mo
45.0639 20.2021 li
45.0639 20.6599 44.6883 21.0472 44.2189 21.0472 cv
30.944 21.0472 li
30.4746 21.0472 30.099 20.6599 30.099 20.2021 cv
30.099 19.6857 li
30.099 19.2162 30.4746 18.8406 30.944 18.8406 cv
44.2189 18.8406 li
44.6883 18.8406 45.0639 19.2162 45.0639 19.6857 cv
cp
.113725 .113725 .105882 rgb
f
53.2799 21.0472 mo
52.1062 21.0472 li
52.1062 17.2757 li
53.2799 17.2757 li
53.2799 21.0472 li
cp
.203922 .203922 .2 rgb
f
55.0761 21.0472 mo
53.9024 21.0472 li
53.9024 17.2757 li
55.0761 17.2757 li
55.0761 21.0472 li
cp
f
56.8723 21.0472 mo
55.6986 21.0472 li
55.6986 17.2757 li
56.8723 17.2757 li
56.8723 21.0472 li
cp
f
58.6685 21.0472 mo
57.4947 21.0472 li
57.4947 17.2757 li
58.6685 17.2757 li
58.6685 21.0472 li
cp
f
60.4646 21.0472 mo
59.2909 21.0472 li
59.2909 17.2757 li
60.4646 17.2757 li
60.4646 21.0472 li
cp
f
62.2608 21.0472 mo
61.0871 21.0472 li
61.0871 17.2757 li
62.2608 17.2757 li
62.2608 21.0472 li
cp
f
64.057 21.0472 mo
62.8833 21.0472 li
62.8833 17.2757 li
64.057 17.2757 li
64.057 21.0472 li
cp
f
129.278 25.7743 mo
119.254 25.7743 li
119.262 25.7573 119.269 25.7403 119.276 25.7233 cv
129.278 25.7233 li
129.278 25.7186 li
129.278 25.7743 li
.6004 .6004 .598431 rgb
f
129.278 25.7233 mo
119.276 25.7233 li
119.277 25.7218 119.277 25.7202 119.278 25.7186 cv
129.278 25.7186 li
129.278 25.7233 li
129.278 23.735 mo
97.5896 23.735 li
97.5896 21.0472 li
129.278 21.0472 li
129.278 23.735 li
.305882 .301961 .301961 rgb
f
129.278 29.7422 mo
94.6535 29.7422 li
94.6535 28.1027 li
94.6535 26.8167 95.6959 25.7743 96.9819 25.7743 cv
129.278 25.7743 li
129.278 29.7422 li
.113725 .113725 .105882 rgb
f
67.2667 4.46257 mo
53.2799 4.46257 li
53.2799 13.7412 li
67.2667 13.7412 li
67.2667 4.46257 li
cp
.203922 .203922 .2 rgb
f
91.0624 7.10344 mo
62.8833 7.10344 li
62.8833 4.46257 li
91.0624 4.46257 li
91.0624 7.10344 li
cp
f
91.9742 13.7412 mo
94.3985 13.7412 li
91.0624 4.46257 li
88.6382 4.46257 li
91.9742 13.7412 li
cp
f
87.928 4.58484 mo
91.3236 5.18893 li
89.6258 0 li
87.928 0 li
87.928 4.58484 li
cp
f
67.768 3.729 mo
65.6406 3.729 li
65.6406 4.82936 li
67.768 4.82936 li
67.768 3.729 li
cp
f
70.5678 3.729 mo
68.4405 3.729 li
68.4405 4.82936 li
70.5678 4.82936 li
70.5678 3.729 li
cp
f
73.3676 3.729 mo
71.2403 3.729 li
71.2403 4.82936 li
73.3676 4.82936 li
73.3676 3.729 li
cp
f
76.1674 3.729 mo
74.0401 3.729 li
74.0401 4.82936 li
76.1674 4.82936 li
76.1674 3.729 li
cp
f
78.9672 3.729 mo
76.8399 3.729 li
76.8399 4.82936 li
78.9672 4.82936 li
78.9672 3.729 li
cp
f
81.767 3.729 mo
79.6397 3.729 li
79.6397 4.82936 li
81.767 4.82936 li
81.767 3.729 li
cp
f
84.5668 3.729 mo
82.4395 3.729 li
82.4395 4.82936 li
84.5668 4.82936 li
84.5668 3.729 li
cp
f
87.3667 3.729 mo
85.2393 3.729 li
85.2393 4.82936 li
87.3667 4.82936 li
87.3667 3.729 li
cp
f
58.6685 6.7122 mo
53.2799 6.7122 li
53.2799 5.78301 li
58.6685 5.78301 li
58.6685 6.7122 li
cp
.407843 .403922 .403922 rgb
f
58.6685 8.61949 mo
53.2799 8.61949 li
53.2799 7.6903 li
58.6685 7.6903 li
58.6685 8.61949 li
cp
f
58.6685 10.5268 mo
53.2799 10.5268 li
53.2799 9.59759 li
58.6685 9.59759 li
58.6685 10.5268 li
cp
f
58.6685 12.4341 mo
53.2799 12.4341 li
53.2799 11.5049 li
58.6685 11.5049 li
58.6685 12.4341 li
cp
f
56.8723 2.99543 mo
53.2799 2.99543 li
53.2799 4.46257 li
58.0816 4.46257 li
56.8723 2.99543 li
cp
.203922 .203922 .2 rgb
f
5.76499 17.1488 mo
5.62219 16.4115 5.47675 15.6712 5.33075 14.9282 cv
47.2001 14.9282 li
5.76499 17.1488 li
.466667 .462745 .462745 rgb
f
3.39686 17.2757 mo
3.87568 14.9282 li
5.33075 14.9282 li
5.47675 15.6712 5.62219 16.4115 5.76499 17.1488 cv
3.39686 17.2757 li
.286274 .286274 .282353 rgb
f
63.6791 51.2117 mo
54.5545 48.938 li
63.6804 51.2058 li
63.6791 51.2117 li
63.1638 48.6271 mo
63.1634 48.6265 li
66.6675 41.3153 li
68.5621 41.3037 li
68.5618 41.3056 li
66.672 41.3173 li
63.1638 48.6271 li
52.8472 48.5126 mo
52.8457 48.5122 li
62.0593 31.106 li
62.4232 30.6012 62.564 29.9909 62.5171 29.3924 cv
62.4584 28.5942 62.0476 27.8078 61.3199 27.2914 cv
49.2444 27.2914 li
49.2446 27.2904 49.2446 27.2896 49.2448 27.2887 cv
61.3212 27.2887 li
61.3212 27.2887 61.3213 27.2887 61.3214 27.2888 cv
61.3212 27.2888 li
62.0497 27.8081 62.4608 28.5917 62.5229 29.3954 cv
62.5229 29.3954 li
62.5694 29.9886 62.4219 30.5973 62.0646 31.1106 cv
52.8472 48.5126 li
67.8462 38.8982 mo
67.8446 38.8949 li
68.0154 38.481 li
67.8462 38.8982 li
5.79294 36.953 mo
5.79294 36.953 li
7.63403 36.728 li
7.63408 36.7273 7.63414 36.7266 7.63419 36.7259 cv
19.4197 35.272 li
19.6648 35.2417 19.9046 35.194 20.1379 35.1301 cv
19.9042 35.1942 19.6638 35.2422 19.4182 35.2727 cv
7.63403 36.728 li
5.79294 36.953 li
79.7026 36.5451 mo
79.6996 36.5451 79.6966 36.5451 79.6936 36.5451 cv
71.1716 36.4975 li
70.9723 36.4964 70.7845 36.4591 70.613 36.3928 cv
70.7833 36.4574 70.9696 36.4933 71.1673 36.4933 cv
79.6885 36.5403 li
79.6956 36.5404 79.7027 36.5404 79.7098 36.5404 cv
80.5687 36.5404 81.2731 35.8407 81.2731 34.9793 cv
81.2849 32.6201 li
81.2849 32.5965 li
81.2849 31.9208 80.8345 31.3426 80.2158 31.132 cv
80.8411 31.3431 81.293 31.9311 81.2891 32.6248 cv
81.276 34.9802 li
81.2712 35.8463 80.5675 36.5451 79.7026 36.5451 cv
69.6111 34.8995 mo
69.6148 34.7108 69.6535 34.5178 69.7321 34.3285 cv
70.4262 32.6367 li
69.7355 34.3337 li
69.6558 34.521 69.6161 34.7122 69.6111 34.8995 cv
20.8145 34.8918 mo
21.9424 34.4017 22.8605 33.5123 23.3832 32.3875 cv
22.8614 33.513 21.9434 34.4016 20.8145 34.8918 cv
71.2514 31.3034 mo
71.5096 31.1253 71.8204 31.0239 72.1497 31.0228 cv
72.8667 31.0252 li
72.8666 31.0255 72.8666 31.0257 72.8665 31.026 cv
72.1533 31.0238 li
71.8226 31.0238 71.5104 31.1254 71.2514 31.3034 cv
75.3506 31.0337 mo
74.0803 31.0297 li
74.0804 31.0294 li
75.3506 31.0337 li
.822745 .822745 .821176 rgb
f
63.6804 51.2058 mo
54.5545 48.938 li
52.8472 48.5126 li
62.0646 31.1106 li
62.4219 30.5973 62.5694 29.9886 62.523 29.3954 cv
73.3608 29.4559 li
73.2043 29.8671 72.9994 30.4076 72.8667 31.0252 cv
72.1497 31.0228 li
71.8204 31.0239 71.5096 31.1253 71.2514 31.3034 cv
71.0048 31.473 70.8064 31.7117 70.6862 31.998 cv
70.4262 32.6367 li
69.7321 34.3285 li
69.6535 34.5178 69.6148 34.7108 69.6111 34.8995 cv
69.5937 35.5528 69.9992 36.1599 70.613 36.3928 cv
70.7845 36.4591 70.9723 36.4964 71.1716 36.4975 cv
79.6936 36.5451 li
79.6966 36.5451 79.6996 36.5451 79.7026 36.5451 cv
80.5675 36.5451 81.2712 35.8463 81.276 34.9802 cv
81.2891 32.6248 li
81.293 31.9311 80.8411 31.3431 80.2158 31.132 cv
80.0609 31.0792 79.8954 31.0496 79.7238 31.0472 cv
75.3506 31.0337 li
74.0804 31.0294 li
74.1301 30.8491 74.1888 30.6631 74.2576 30.4707 cv
74.3553 30.1974 74.9964 30.0087 74.8715 29.7466 cv
74.823 29.6448 74.6978 29.5482 74.5389 29.4625 cv
81.7497 29.5028 li
81.7531 29.5028 81.7562 29.5028 81.7596 29.5028 cv
82.6804 29.5028 83.433 28.7555 83.4381 27.8334 cv
83.4389 27.6765 li
83.461 23.735 li
97.5896 23.735 li
97.5896 25.7743 li
96.9819 25.7743 li
95.6959 25.7743 94.6535 26.8167 94.6535 28.1027 cv
94.6535 28.235 li
82.7637 29.9322 li
82.7637 34.8618 li
82.7637 36.3056 81.6017 37.491 80.1581 37.5027 cv
68.3505 37.6552 li
68.0154 38.481 li
67.8446 38.8949 li
67.8462 38.8982 li
67.8457 38.8995 li
68.6556 40.5895 li
68.5621 41.3037 li
66.6675 41.3153 li
63.1634 48.6265 li
63.1638 48.6271 li
63.1626 48.6295 li
63.9607 49.9559 li
63.6804 51.2058 li
54.4892 47.7799 mo
54.4892 47.7799 li
62.5681 49.7875 li
61.9062 48.6859 li
67.5019 36.8207 li
62.0071 35.0313 li
63.5086 32.485 li
69.7066 30.9504 li
63.5174 30.9158 li
54.4892 47.7799 li
82.0726 27.4047 mo
61.3212 27.2888 li
61.3213 27.2887 61.3212 27.2887 61.3212 27.2887 cv
77.9549 27.2887 li
77.9549 25.7293 li
77.9582 26.4374 78.5311 27.0122 79.2407 27.0163 cv
79.2431 27.0163 79.2455 27.0163 79.248 27.0163 cv
79.9586 27.0163 80.5368 26.4421 80.5407 25.7305 cv
80.5448 25.0165 79.9692 24.4344 79.2551 24.4305 cv
79.2526 24.4305 79.2502 24.4305 79.2476 24.4305 cv
78.5371 24.4305 77.959 25.0045 77.9549 25.716 cv
77.9549 23.735 li
82.093 23.735 li
82.0726 27.4047 li
.34902 .345098 .345098 rgb
f
24.1477 29.9127 mo
24.8086 28.3422 26.3557 27.2887 28.1014 27.2887 cv
49.2448 27.2887 li
49.2446 27.2896 49.2446 27.2904 49.2444 27.2914 cv
28.1037 27.2914 li
26.3563 27.2914 24.8116 28.3421 24.1477 29.9127 cv
.184314 .184314 .180392 rgb
f
74.0803 31.0297 mo
72.8665 31.026 li
72.8666 31.0257 72.8666 31.0255 72.8667 31.0252 cv
72.9994 30.4076 73.2043 29.8671 73.3608 29.4559 cv
74.5389 29.4625 li
74.6978 29.5482 74.823 29.6448 74.8715 29.7466 cv
74.9964 30.0087 74.3553 30.1974 74.2576 30.4707 cv
74.1888 30.6631 74.1301 30.8491 74.0804 31.0294 cv
74.0803 31.0297 li
f
62.5681 49.7875 mo
54.4892 47.7799 li
62.0071 35.0313 li
67.5019 36.8207 li
61.9062 48.6859 li
62.5681 49.7875 li
f
83.4389 27.6765 mo
83.4404 27.4123 li
82.0726 27.4047 li
82.093 23.735 li
83.461 23.735 li
83.4389 27.6765 li
f
79.248 27.0163 mo
79.2455 27.0163 79.2431 27.0163 79.2407 27.0163 cv
78.5311 27.0122 77.9582 26.4374 77.9549 25.7293 cv
77.9549 25.716 li
77.959 25.0045 78.5371 24.4305 79.2476 24.4305 cv
79.2502 24.4305 79.2526 24.4305 79.2551 24.4305 cv
79.9692 24.4344 80.5448 25.0165 80.5407 25.7305 cv
80.5368 26.4421 79.9586 27.0163 79.248 27.0163 cv
f
81.7596 29.5028 mo
81.7562 29.5028 81.7531 29.5028 81.7497 29.5028 cv
74.5389 29.4625 li
73.3608 29.4559 li
62.5229 29.3954 li
62.4608 28.5917 62.0497 27.8081 61.3212 27.2888 cv
61.3212 27.2888 li
82.0726 27.4047 li
83.4404 27.4123 li
83.4389 27.6765 li
83.4381 27.8334 li
83.433 28.7555 82.6804 29.5028 81.7596 29.5028 cv
f
54.4892 47.7799 mo
63.5174 30.9158 li
69.7066 30.9504 li
63.5086 32.485 li
62.0071 35.0313 li
61.4424 34.8474 li
54.4892 47.7799 li
.466667 .466667 .462745 rgb
f
54.4892 47.7799 mo
54.4892 47.7799 li
61.4424 34.8474 li
62.0071 35.0313 li
54.4892 47.7799 li
.345098 .345098 .341176 rgb
f
2.6023 37.3232 mo
2.60087 37.3232 2.59947 37.3232 2.59804 37.3232 cv
2.59947 37.3232 2.60087 37.3232 2.6023 37.3232 cv
2.6023 37.3232 li
2.60341 37.3232 mo
2.69932 37.3231 2.7966 37.3178 2.89481 37.3069 cv
2.79656 37.3178 2.69936 37.3231 2.60341 37.3232 cv
1.20092 36.9141 mo
1.18812 36.906 1.17543 36.8979 1.16277 36.8896 cv
1.17543 36.8979 1.18812 36.906 1.20092 36.9141 cv
1.16077 36.8883 mo
1.15101 36.8819 1.14134 36.8754 1.13167 36.8689 cv
1.00256 36.775 .873342 36.6694 .75601 36.5519 cv
.291863 36.0704 .00417231 35.4188 .00502758 34.7144 cv
.00417231 35.4188 .291863 36.0704 .75601 36.5519 cv
.873342 36.6694 1.00256 36.775 1.13167 36.8689 cv
1.14134 36.8754 1.15101 36.8819 1.16077 36.8883 cv
7.63419 36.7259 mo
7.75151 35.1068 7.78656 33.4879 7.72792 31.8807 cv
13.5378 31.282 18.1271 29.7679 21.0849 27.0918 cv
23.3971 25.0026 26.3313 23.735 29.4417 23.735 cv
77.9549 23.735 li
77.9549 25.716 li
77.9549 25.7293 li
77.9549 27.2887 li
61.3212 27.2887 li
49.2448 27.2887 li
28.1014 27.2887 li
26.3557 27.2887 24.8086 28.3422 24.1477 29.9127 cv
24.0625 30.1144 23.9917 30.3248 23.9369 30.5426 cv
23.7023 31.4815 li
23.6238 31.7972 23.5164 32.1001 23.3832 32.3875 cv
22.8605 33.5123 21.9424 34.4017 20.8145 34.8918 cv
20.5964 34.9865 20.3705 35.0663 20.1379 35.1301 cv
19.9046 35.194 19.6648 35.2417 19.4197 35.272 cv
7.63419 36.7259 li
.34902 .345098 .345098 rgb
f
2.6023 37.3232 mo
2.60087 37.3232 2.59947 37.3232 2.59804 37.3232 cv
2.08441 37.3223 1.60709 37.1706 1.20092 36.9141 cv
1.18812 36.906 1.17543 36.8979 1.16277 36.8896 cv
1.16212 36.8892 1.16142 36.8887 1.16077 36.8883 cv
1.15101 36.8819 1.14134 36.8754 1.13167 36.8689 cv
1.00256 36.775 .873342 36.6694 .75601 36.5519 cv
.291863 36.0704 .00417231 35.4188 .00502758 34.7144 cv
.00531864 34.4747 .0390279 34.2289 .110572 33.9815 cv
.286571 33.3946 .439125 32.7961 .580011 32.2093 cv
.719143 32.2099 .857655 32.2103 .995871 32.2103 cv
3.38785 32.2103 5.64193 32.1136 7.72792 31.8807 cv
7.72792 31.8807 li
7.78656 33.4879 7.75151 35.1068 7.63419 36.7259 cv
7.63414 36.7266 7.63408 36.7273 7.63403 36.728 cv
5.79294 36.953 li
2.92743 37.3031 li
2.92743 37.3031 li
2.91652 37.3045 2.90569 37.3057 2.89481 37.3069 cv
2.7966 37.3178 2.69932 37.3231 2.60341 37.3232 cv
2.60305 37.3232 2.60266 37.3232 2.6023 37.3232 cv
.184314 .184314 .180392 rgb
f
119.254 25.7743 mo
119.252 25.7743 li
119.259 25.7573 119.266 25.7403 119.273 25.7233 cv
119.276 25.7233 li
119.269 25.7403 119.262 25.7573 119.254 25.7743 cv
.503529 .503529 .501176 rgb
f
119.252 25.7743 mo
97.5896 25.7743 li
97.5896 23.735 li
129.278 23.735 li
129.278 25.7186 li
119.278 25.7186 li
119.277 25.7202 119.277 25.7218 119.276 25.7233 cv
119.273 25.7233 li
119.266 25.7403 119.259 25.7573 119.252 25.7743 cv
.266667 .262745 .262745 rgb
f
94.6535 28.235 mo
94.6535 28.1027 li
94.6535 26.8167 95.6959 25.7743 96.9819 25.7743 cv
97.5896 25.7743 li
119.252 25.7743 li
119.254 25.7743 li
118.829 26.7512 117.956 27.7734 116.085 27.7734 cv
116.054 27.7734 116.023 27.7732 115.992 27.7726 cv
97.5643 27.8195 li
94.6535 28.235 li
.113725 .113725 .105882 rgb
f
197.751 335.631 mo
149.344 335.631 li
149.344 320.583 li
197.751 320.583 li
197.751 335.631 li
.235294 .235294 .231373 rgb
f
197.751 335.631 mo
150.719 335.631 li
150.719 328.107 li
197.751 328.107 li
197.751 335.631 li
.2 .2 .192157 rgb
f
197.751 324.211 mo
150.719 324.211 li
150.719 321.913 li
197.751 321.913 li
197.751 324.211 li
.34902 .34902 .345098 rgb
f
152.219 319.871 mo
148.781 319.871 li
148.781 311.062 li
152.219 311.062 li
152.219 319.871 li
cp
.235294 .235294 .231373 rgb
f
11.3859 325.979 mo
11.3859 326.462 10.9941 326.854 10.5109 326.854 cv
10.0276 326.854 9.63587 326.462 9.63587 325.979 cv
9.63587 319.729 li
9.63587 319.246 10.0276 318.854 10.5109 318.854 cv
10.9941 318.854 11.3859 319.246 11.3859 319.729 cv
11.3859 325.979 li
cp
5.71918 313.842 mo
5.71918 331.104 li
9.74262 331.104 li
10.8914 331.104 11.8799 330.292 12.103 329.165 cv
15.1359 313.842 li
5.71918 313.842 li
cp
.341176 .341176 .337255 rgb
f
144.219 317.687 mo
3.71576 317.687 li
3.71576 309.996 li
144.219 309.996 li
144.219 317.687 li
cp
.235294 .235294 .231373 rgb
f
93.8858 322.409 mo
87.8025 322.409 li
87.8025 317.687 li
93.8858 317.687 li
93.8858 322.409 li
cp
.341176 .341176 .337255 rgb
f
59.0942 323.243 mo
56.0525 323.243 li
56.0525 318.52 li
59.0942 318.52 li
59.0942 323.243 li
cp
f
144.219 358.062 mo
102.511 358.062 li
102.511 323.062 li
144.219 323.062 li
144.219 358.062 li
.235294 .235294 .231373 rgb
f
143.136 346.047 mo
143.136 359.886 li
104.552 359.886 li
104.552 346.047 li
143.136 346.047 li
.180392 .180392 .176471 rgb
f
112.003 345.565 mo
112.003 360.368 li
104.552 360.368 li
104.552 345.565 li
112.003 345.565 li
.113725 .113725 .105882 rgb
f
143.136 345.565 mo
143.136 360.368 li
135.685 360.368 li
135.685 345.565 li
143.136 345.565 li
f
125.978 345.565 mo
125.978 360.368 li
121.721 360.368 li
121.721 345.565 li
125.978 345.565 li
f
135.685 359.886 mo
125.978 359.886 li
125.978 353.986 li
135.685 353.986 li
135.685 359.886 li
.160784 .160784 .156863 rgb
f
121.721 359.886 mo
112.003 359.886 li
112.003 353.986 li
121.721 353.986 li
121.721 359.886 li
f
112.003 360.368 mo
104.552 360.368 li
104.552 353.986 li
112.003 353.986 li
112.003 359.886 li
112.003 360.368 li
.113725 .113725 .105882 rgb
f
143.136 360.368 mo
135.685 360.368 li
135.685 359.886 li
135.685 353.986 li
143.136 353.986 li
143.136 358.062 li
143.136 360.368 li
f
125.978 360.368 mo
121.721 360.368 li
121.721 359.886 li
121.721 353.986 li
125.978 353.986 li
125.978 359.886 li
125.978 360.368 li
f
143.136 319.871 mo
143.136 333.709 li
104.552 333.709 li
104.552 319.871 li
143.136 319.871 li
.235294 .235294 .231373 rgb
f
112.003 319.388 mo
112.003 334.192 li
104.552 334.192 li
104.552 319.388 li
112.003 319.388 li
.113725 .113725 .105882 rgb
f
143.136 319.388 mo
143.136 334.192 li
135.685 334.192 li
135.685 319.388 li
143.136 319.388 li
f
125.978 319.388 mo
125.978 334.192 li
121.721 334.192 li
121.721 319.388 li
125.978 319.388 li
f
135.685 333.369 mo
125.978 333.369 li
125.978 332.887 li
125.978 327.81 li
135.685 327.81 li
135.685 333.369 li
.2 .2 .192157 rgb
f
121.721 333.369 mo
112.003 333.369 li
112.003 332.887 li
112.003 327.81 li
121.721 327.81 li
121.721 333.369 li
f
104.552 334.192 mo
104.552 334.192 li
104.552 327.81 li
112.003 327.81 li
112.003 332.887 li
104.552 332.887 li
104.552 333.369 li
104.552 334.192 li
.113725 .113725 .105882 rgb
f
135.685 333.369 mo
135.685 333.369 li
135.685 327.81 li
143.136 327.81 li
143.136 332.887 li
135.685 332.887 li
135.685 333.369 li
f
121.721 333.369 mo
121.721 333.369 li
121.721 327.81 li
125.978 327.81 li
125.978 332.887 li
121.721 332.887 li
121.721 333.369 li
f
135.685 323.898 mo
125.978 323.898 li
125.978 321.937 li
135.685 321.937 li
135.685 323.898 li
121.721 323.898 mo
112.003 323.898 li
112.003 321.937 li
121.721 321.937 li
121.721 323.898 li
.313725 .313725 .309804 rgb
f
112.003 323.898 mo
104.552 323.898 li
104.552 320.882 li
112.003 320.882 li
104.552 320.882 li
104.552 321.937 li
112.003 321.937 li
112.003 323.898 li
.203922 .203922 .196078 rgb
f
143.136 323.898 mo
135.685 323.898 li
135.685 321.937 li
143.136 321.937 li
143.136 323.898 li
f
125.978 323.898 mo
121.721 323.898 li
121.721 321.937 li
125.978 321.937 li
125.978 323.898 li
f
93.8858 339.187 mo
98.2608 339.187 li
98.2608 323.687 li
93.8858 323.687 li
93.8858 339.187 li
cp
.341176 .341176 .337255 rgb
f
76.2547 330.479 mo
68.9692 330.479 li
68.9692 329.563 li
76.2547 329.563 li
76.2547 330.479 li
cp
.113725 .113725 .105882 rgb
f
76.7444 326.823 mo
76.8502 326.522 77.5549 326.31 77.4158 326.022 cv
77.2481 325.675 76.2695 325.389 75.8873 325.338 cv
75.4299 326.656 73.7346 330.109 77.2441 332.875 cv
77.9412 332.454 75.3067 330.919 76.7444 326.823 cv
cp
f
54.3981 321.114 mo
53.311 321.114 52.4298 321.996 52.4298 323.083 cv
52.4298 325.851 li
52.4298 326.931 53.3034 327.742 54.381 327.819 cv
55.1554 327.875 55.8032 328.12 56.3157 328.483 cv
57.1209 329.05 57.5784 329.91 57.6517 330.795 cv
57.7065 331.447 57.5479 332.119 57.1575 332.686 cv
47.1161 351.902 li
59.0609 354.8 li
59.3658 353.428 li
58.4752 351.963 li
62.288 343.892 li
63.5691 341.22 li
68.9692 329.563 li
69.3858 321.114 li
54.3981 321.114 li
cp
f
60.8002 331.563 mo
60.1455 331.563 59.6027 332.008 59.396 332.629 cv
59.2702 333.007 59.0988 333.369 58.8818 333.705 cv
50.9387 348.905 li
50.4988 349.747 50.9662 350.778 51.8892 351.002 cv
55.0633 351.772 li
55.7371 351.936 56.4332 351.604 56.7294 350.977 cv
60.4848 343.027 li
61.7543 340.38 li
64.8771 333.638 li
65.3258 332.67 64.6185 331.563 63.551 331.563 cv
60.8002 331.563 li
cp
.235294 .235294 .231373 rgb
f
82.6656 331.751 mo
82.6656 332.703 81.8909 333.477 80.9332 333.477 cv
71.5505 333.477 li
70.3244 333.477 69.4886 332.233 69.9522 331.098 cv
70.9894 328.53 li
71.2576 327.877 71.8861 327.45 72.5938 327.444 cv
80.927 327.426 li
80.9392 327.426 li
81.8909 327.426 82.6656 328.2 82.6656 329.152 cv
82.6656 331.751 li
cp
63.1358 321.114 mo
67.7607 332.426 li
68.3404 333.844 69.72 334.771 71.2518 334.771 cv
83.4281 334.771 li
89.1669 327.61 li
90.8407 325.338 92.8096 325.947 98.4232 325.467 cv
100.558 323.765 li
100.558 321.114 li
63.1358 321.114 li
cp
.113725 .113725 .105882 rgb
f
103.802 362.979 mo
96.8025 362.979 li
96.8025 312.062 li
103.802 312.062 li
103.802 362.979 li
f
150.719 362.979 mo
143.719 362.979 li
143.719 315.937 li
150.719 315.937 li
150.719 362.979 li
f
103.803 318.687 mo
86.0525 318.687 li
86.0525 308.646 li
100.99 308.646 li
102.543 308.646 103.803 309.905 103.803 311.458 cv
103.803 318.687 li
cp
f
143.136 333.369 mo
143.136 347.208 li
104.552 347.208 li
104.552 333.369 li
143.136 333.369 li
.235294 .235294 .231373 rgb
f
112.003 332.887 mo
112.003 347.69 li
104.552 347.69 li
104.552 332.887 li
112.003 332.887 li
.113725 .113725 .105882 rgb
f
143.136 332.887 mo
143.136 347.69 li
135.685 347.69 li
135.685 332.887 li
143.136 332.887 li
f
125.978 332.887 mo
125.978 347.69 li
121.721 347.69 li
121.721 332.887 li
125.978 332.887 li
f
135.685 347.208 mo
125.978 347.208 li
125.978 341.308 li
135.685 341.308 li
135.685 347.208 li
.145098 .145098 .137255 rgb
f
143.136 347.69 mo
143.136 347.69 li
135.685 347.69 li
135.685 347.208 li
135.685 341.308 li
143.136 341.308 li
143.136 347.69 li
.113725 .113725 .105882 rgb
f
121.721 347.208 mo
112.003 347.208 li
112.003 341.308 li
121.721 341.308 li
121.721 347.208 li
.145098 .145098 .137255 rgb
f
112.003 347.69 mo
112.003 347.69 li
104.552 347.69 li
104.552 341.308 li
112.003 341.308 li
112.003 347.208 li
112.003 347.69 li
.113725 .113725 .105882 rgb
f
125.978 347.69 mo
125.978 347.69 li
121.721 347.69 li
121.721 347.208 li
121.721 341.308 li
125.978 341.308 li
125.978 347.208 li
125.978 347.69 li
f
135.685 335.888 mo
125.978 335.888 li
125.978 334.38 li
135.685 334.38 li
135.685 335.888 li
121.721 335.888 mo
112.003 335.888 li
112.003 334.38 li
121.721 334.38 li
121.721 335.888 li
.313725 .313725 .309804 rgb
f
112.003 335.888 mo
104.552 335.888 li
104.552 334.38 li
112.003 334.38 li
112.003 335.888 li
.203922 .203922 .196078 rgb
f
143.136 335.888 mo
135.685 335.888 li
135.685 334.38 li
143.136 334.38 li
143.136 335.888 li
f
125.978 335.888 mo
121.721 335.888 li
121.721 334.38 li
125.978 334.38 li
125.978 335.888 li
f
135.685 321.937 mo
125.978 321.937 li
125.978 320.882 li
135.685 320.882 li
135.685 321.937 li
121.721 321.937 mo
112.003 321.937 li
112.003 320.882 li
121.721 320.882 li
121.721 321.937 li
.415686 .415686 .411765 rgb
f
112.003 321.937 mo
104.552 321.937 li
104.552 320.882 li
112.003 320.882 li
112.003 321.937 li
.321569 .321569 .317647 rgb
f
143.136 321.937 mo
135.685 321.937 li
135.685 320.882 li
143.136 320.882 li
143.136 321.937 li
f
125.978 321.937 mo
121.721 321.937 li
121.721 320.882 li
125.978 320.882 li
125.978 321.937 li
f
60.0371 319.871 mo
54.9751 319.871 li
54.9751 308.646 li
60.0371 308.646 li
60.0371 319.871 li
cp
.113725 .113725 .105882 rgb
f
149.344 319.871 mo
143.719 319.871 li
143.719 308.646 li
149.344 308.646 li
149.344 319.871 li
cp
f
155.594 317.008 mo
152.219 317.008 li
152.219 312.616 li
155.594 312.616 li
155.594 317.008 li
cp
f
5.30251 335.937 mo
2.43183 335.937 li
.907179 335.937 -.154959 334.476 .254194 333.007 cv
2.2276 325.923 2.02084 318.38 .0677772 310.468 cv
-.286218 309.034 .790795 307.646 2.26786 307.646 cv
5.30251 307.646 li
7.05142 307.646 8.46918 309.064 8.46918 310.813 cv
8.46918 332.771 li
8.46918 334.52 7.05142 335.937 5.30251 335.937 cv
cp
f
193.151 303.769 mo
193.191 303.769 li
194.389 303.769 195.36 304.74 195.36 305.937 cv
195.36 320.583 li
190.579 320.583 li
191.191 305.613 li
191.253 304.577 192.112 303.769 193.151 303.769 cv
cp
f
179.636 337.957 mo
171.303 337.957 li
171.303 335.631 li
179.636 335.631 li
179.636 337.957 li
cp
f
178.374 362.664 mo
176.438 362.664 174.501 362.664 172.564 362.664 cv
171.548 354.47 171.548 346.152 172.564 337.957 cv
174.501 337.957 176.438 337.957 178.374 337.957 cv
179.391 346.152 179.391 354.47 178.374 362.664 cv
cp
.235294 .235294 .231373 rgb
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 17.1.0
%%For: (Agor) ()
%%Title: (1609.i105.021.P.m005.c23.weapons guns.eps)
%%CreationDate: 9/13/2016 9:41 AM
%%Canvassize: 16383
%AI9_DataStream
%Gb"-6Bj2OgZ8VW0hUf18K/8UN!2aCO"%i!4$&K<$OEhtgDM(<'LkiB=p4qh?^JuSZ>MX0aB.[5o3Bm>1IE69)Uaes4Wfg>pZrHCP
%3fR2'XP!Je,A5Z>29W:HQ>Yj9]`7tDC$Bp/clXOUj=S:?Yb77o)KVUZOnY4IOI+RAf;4AdDLL%.42Z]"\*ab2V/FZI%lSI)?aWYs
%<UC3DWT?>?6.#Qd<t&j:$`I"VZVN'Q^oqkWmFj8Wj>@"`'<:tR!4@=Wr_5@6fkU\3j:@$m2kZ/LQO\4tC6O1rJ!N;@qIcqHY[8?X
%\t-$cY\7IkiM;P4?B+sb`&;Wsr+?mrba&-=D%mD(S%5I3r&K.h6P:o[r>m-bWoZK53rMP^s5F"+h%5\J=junjULN85iSR,MbZVTL
%K7bqf@IO>YQ@iU$i'7'?[><0bFV6!Fm'h=-D<UR'eEo@,Zshnm;u\!K_\c4d2&?JJ1LVmqQC[c?S.-][)@jsT*r]B.O+uBgUZMNd
%OaHNJ)Lc%PBV@XQCAeZ4c8*&F$3()jf>MT_UVQ?5mBhTj5>KJ`,P%khn,qT-U/;531r]m7o\ZC]ENO`Q%q2VaK+SU77aBQFDm)[u
%C@.@Kdn^d>m.^G'EVCLHG0OuJi%1dY*-?gI3D[-GOLZKA)V/k8"\g7meKnXYUN?LbEPLBlCNVPd>Spkhd)A]7mC+"]7(%Q6-N9L%
%a>;T?/3WY:QT5gSq*T*&EZ#AcNatjC:.h^S-)'F-*F[QC3fR%HNMA>GIhlHIFC:XBh)"S:oFLd-8;qkH<ru-'GG.@(K7s:%T@a!"
%pZ*G6_2l5,m\mVHBm0ORTB/D7Hg9eNq=S1*&*)Nfm@XB.Iltk*drN\RpM4oE!WNYQjD1mSUFQTOT7&rEItbK+:\arar;Tpb_cd8P
%&eX'c:?N-Pkk5_-+]@V_EpmfB?5DN*6*4)OkNI\_G.$uJr)*WZ7FWP5'3U]+4V/6+U,%QP/h*IkPc:Y9n/N.Ihe<KclMR92c>tZI
%aeN51dr*MNZpTEp')nH,G=0.&g$eEJp.'c,gi9eB7"X>#`)"c'pP6E,bVTqJ:29iYS6b-N=qJ'dqR,1*X.DdFjnH!Q$$A&KU,kk/
%Xi:'2@:S=TAuQe2M09dh:js(Doqc5[ri?RpkFc-VqmCmr^LAeSn2=JkfT1)DUXmeQ`iIk^Tj=!H3j82f`f_(5A45$5JIOs%!7o`(
%g_t9os*40R(MpZ+RKMm7hmj3kf8!GXf<ENKhrRlZGO8T6f+gMek*H$^#9ESZ%><5LSW8FgBWP2^=QoKpaYNP\<m^(-*@bLYf(VEI
%LHjdJ%=]PinDgg_oI.1t"=-'AnKNJ4JrqJQf7Y?=>+:koVKm)lQ%`Q_=SOa:(3D,9'7[G/_t+:qLiTiHbdlUl4!/(m7M_L04,(A3
%6I7ftS`j-2eS8W&#Ra@bR4_X=MJ%8n:JK8CjK<$$/lm9U)_87l'8N@^.Ca&^\pq,0Gc`L8&e^fT6W^VBpBTXMB4+1ES/+2Wma86B
%`k^+U%B(7mp0$NqXRrle1Tol?1MZC1LUB?%0r5YWg('\*m&Sf#XUY2#hu>]gQ'Z's:6a)'CaO.p?cKq49%#r<8nf\Z^O.#u1.4Xg
%;8;PfEb?]97b>bfd<2<FjX,.I@A;NJq_`=M19_B+SS]D(l:fVJnUWEl^0\km)j"j$@Cb/i0?@8+\c_80^R<h]\8jCA_SVS-2.l!s
%Q*V7/h#@gbY1^"0nJf./[K[+P/sViY1O"JqA^E5SkfdTDKIqS^KeKq)jVGSc_O(.H1M"b?"l<KB->))+ZYkskQ\h,Uo&ko0++A0N
%?>FZ_]^>m5H1Z=Uek]'//_KhSR*UCnU[8$.U'muh]E5M9[.lZk7[&"qJ*=aDdgFa0N<Y#9X](b6h/(ij)5^U_bEgnMiguWnLFbN)
%@u=K.[cK78g8itE%fG93X'q%?qEFF-Q`E56Rg!a%e`ipKTBDF:QInCm/'&>B']l2Lk;"$`%n?M0XmR:]CY9P^'jmnmJ&DQJ:#@$e
%=uZ$i^<L&,,L`E\eh;/-K41mGKra_n;r^ZscJZuT]l(mj/I%t"F6[_Gfp\3m7'dr6d'ZP`b]p3uc,doEs"^hK^T#s)#MiEn=NqV=
%=M;7_*/ULq'm@K")EjKISseJ&Dr"j;Dh`(Wk=f9lVqSfZ4MQ*_0l%[MK;!INAStdIEGB(D_9BcK3B\E=CsNo]JiGJ+XP)`EdTFJ5
%d&4!hDpKSPXkt%g\,B_NB'*iXr!h+dk4clg25FmSMp:c6$%LP"f&)>Vrf/1jk((2:qe&)bE\=JbljN3(NlR.Q@WBTSg4Es1o,g$:
%FJWNf")#3Z\E#H&Ri/`s;sJOY@c-q[Qf4TTnS[AF]\Cg));[[RCQ6mnMaV*ll2$jXj]5EWKfSgDR?s=M@-6TF2TmAXk'N1KAoDki
%]lQlpQbe3>5r[kJWNh0JRSi0hS)+6ZGo3ka?N6$uG8ot5h?'6jRc3%;Ib+6-?>83E!h\LWYda+1I&<;ho4pLI_)O)`rDp]#cZ%E\
%%c?tmR"#)5D?%h_XEiKDjubrGUcUW;6HK!c@ES$OribZKF)\\L1rH\hS#nIS1GaO1EL>^,ZZKO>FSt(<&*UVB=UmO6W_A>c6AC-=
%hrepjb*7+>Ebj#0C3:W5U[kG9S'*C]>m#*bNnWX4dtte_PT0KuO8X>]_t7RWqc"?$BoP+D>A]+^gAL;7f:5<MRQ?IYJ*Sj91#)OV
%doaijlH&O`F>!05A;CuEc`5=,b\^.^e'*%SWS%W1Cc?Nhkm_=QlM.aq2j_A0Y2^<*1GBLXSJG/3i6U,\8S1\EfaV`qN9cLjS/+a8
%f%mR"`HLXo["`Mm]Bq.bL5J]`O1nC2dFI%%)N>M]NA(H);:2AfYRCo:OX7OO0/Y=>3o*PsOf?r&mEm5h6"4?!'V6(E),)-;4k]UG
%@cM25j5m3$g1H_(VuBgG;c]-PWb52p[+^qFf]l3(i"dSM>B:T>;.d[2X5BeD-s;q*QghuR-H[mYB/@f6R:#9<Rj`>u'.$;3Z8oRT
%o'^r^E+[_Q]PK`PIMX;_BfRPb;?"o.3cf6VV1+p%U1@\EE>N2+(ZjQ,D&.=mB$Al;iW@9i]ShqE,L63fH^jGtA79(V/F%MqMiqd*
%ApngWf"3@'gN45X$T%C[lEBfDAfgEjA/`YKcl1@QbP=o)Qg'7V@O1(hj2V!*`/XJ"RQ\/\q$RRW-Y:GuEcTD:U3YP/Z:+WQ-.C1W
%99+GL=b!<K=FW!IbX/N3Na?cBH7aaT(4'hkf+r[L0(djm+-;2e[P6<F=fqKZ8JbQIU"+TfX"B:<KsA)5C(%.e>I9iF,'5SooBfZo
%8Hoe)dj*PV3WND9UYfEJCpApSLg[KH(<\*aB5B/4B=PatR6Ji:LJK?\/W1%%_a3TA5<&p`^J:s-2;hFN>'sO&K95qY]/q_j_n7:6
%Blt>CZdkKAiQ^#_Y+Au>Q89h+:s)Ok[6Y<Zdp1/K+tq2_o?uF>>UXoa9GECq.+;Yk.SF96#ph_Jb&l34:>[n8S8Q5oCH;1):&#\,
%s!IZ*]:!:Te+5hR-f`COR7=[O6\YPlUH>%D\X>W<4u\i'Za'+OnJ_EY&'(b)reVZ.L81(13"DGV8+PJZY<)a9Fal5>:]3Y/2GHV:
%P2+<Y(<@$r]>ubD/uCVCZLBR4)Gl@tF,F9h"s,+^MoBqFAt+QI@hn#iT,1cjo=JM7h\r)qrF)"_A.Eh*bT=u5m?'>lI.:6RP4No0
%nXF%#Gj2\^l*iYP]s71dCJN!\3<,OL[C\EuSWEC"`HOlhkJ'q(*\>Td-P"G]r-*/[qqK[HScB_`Ak#F6ETT?X&X+(CCb<q[(MCI?
%1Z.(JG-XlFUPu2!A#6(\aaX%Od/EQNeq2K+q%*n7eM6T+#4@WhVIlT8YY\QKk%N\>\fL8Q3a#G"=H0:_%2i.@W8@a0,O;Fi(S>^'
%2sWQ-Qm]@V;p*>3D1<_;Lla24A5cuQ&L!X1#he3YZ*PDnb@K-U_IPG:-KG*Jk#pU94.BV(qO=^5[Ec@QJ$ce<5MYW&NQl@UesUcc
%]ni:T6OgUE_O7h3[G%D7UsBRkQBa!]X]aju@)if9?Q%m:9%bYKC!&$uBWJ'KVg::ubT2\Cd*Qhom6MWGk/b[hpb:15LI'7iK72:b
%Z'PPk3ciS#lNHCc&^_Q$1=OE=oQKE$*Z4%S`F)YV&U7F]?5A*Y7Gq_hGZb/UrdEn4#e\A_i'i<%Gi2"Y@4;,\#e\Bc#J(2Rr(c0]
%HE-K.h"-r%!7I!KGih&=oNONWbXWprBtfGYo9/ge6UoPS9_4fk,"mN<=\gr<Kni+&M4(je3V1?>DVLL2DJch=lo,,]It%l1_h2-.
%@_@,o3R4iqS+Y$GObmd12TOR6M(-'.>3q/giG6]chRLYBFLs:^rPl?"Z7df80265N(A:L`c>/F-T8Sc[r*N#nFLtl@B?73_Ga1KL
%-GeJ%B@$(@aMoL-'>#:VfCYq@(*55YD3YIQp@=SrmF?&3#Q>996f2fm<6=a?k4a_Qs,0(Vh\k8)kmYeiaP>].aSZIh_F'dt%rG%M
%Q`cpR=_s*IRN1"JaC96bdH8e-/HZZ9[MkPd"c@>!A&ca0bdjA56<[K1>3nXsN((&673#eI4TT1-a-\*DB("[rmOa6)ADpr/a-^"*
%GM^pK,*&paA'EZJ/E.M)36%K,1!i9,ehUN%>52a>_*;`/C\;*fGhm4J\]2kZ>q)/&r)?du?h8-+kqJ5C68CKFD*$LJ@;Au;'QAtU
%cWKVF'kDVW*@j9)k-?9"l&=?nYg!*f`0FMN>"iZ+%%2E:CBM?"pOA5$:-FLCQRG)A95B[K3SY/^M1ue&L),W#Y1/dU5!1XfB!Io<
%1TpD?rGF]T8t]YBioG80ITkf\RQ*2]OS:2^3HVB;T;EG&q44lY2\l*J*q`<!!Q]RNK7]Mmcrp*@(J.E.N/o^TebZn=]G?(H%&VJ$
%ggBfu_SWB]p<mj-AZneObgU.,BT#'BoX]NlTQ&'a'S]\WAb1)8J.+#=nad?NcZ%QN%R]d?^ClHsVL:Mg^0EQ2Z1-oTD2&h_gqoOb
%G]O72DK_G9;f=:@6*g"BDM'll$a5=;r42Xnk;"=!QpZ?U"'5kSDW/kmgpr,#2niB0mbH>+APKoC%UCt>B&0;iDj*h\M4&X0l/$Wr
%NO+'cb>,>3kAGo:GMBh_Ohm8g,\3:VPFD"BrLA6>DXR*g/Fm:'nk.,7?AU*dGC,S+od%VG:,"^/F-V5TH/g`[eLrh%*:!64p"&Wa
%7]+Pd@/)7n&u?B*VD[ftIQVpoeknnck%,E1E8o.(.`sd`ZbGb\]("k>9AhVthp/d_f"lmb=dErlDS,T!bN#qkW*[YX#fK>2CSLcQ
%T':NI+?g(FG+"XtR7gSJ(4R2k9mgc`eEtUafX(?raVrXf0#N+*_5Q7mebuS511#@e_#>Q:14R;dDYBpn+/Za5M,&.K_qM0iYLO\*
%3e7W2:2=7.%,$C5!</6<goZg3(/)"<9d(n19pnf=(@=$1Cr_(,2q\d@!`cMEc_WLCg[1SdAMDT!_/FbCG&FC6%*#_dr&:_EnL@Jt
%0>f+cHb8lNYM8SsMnu@7_C/S)75nlo/Sq.sn&UVn_fKZ/rT<:nB7,cRFb0H0]Vdmhdr!r*(bspamL1&l7@*al0u`CBKni7a@q%Qf
%Zd$C`]*U25XI8bh/gcj?nXrZ^p"l;;XgNUnGi&-MI?7m?p;lS$lIk&:K@]Obesbeh/iL`f<bShR3G.5YYrU)6&$ru1B%Kt>I;ple
%Xi9.A)tq9sN$'c;2E7a,ccmm6q&,54mDW>ULg-7akB;8Rr5s+1o6A9&X7Ht[b&>!Go$#Cj-?%Ld>_]lqF.pMES0n6!p/d&Tbq8m^
%AWb)do:Y8ZIad#)g4N&$Us6;[(NfPX/mE+tXX7qPF`^hdI,+XX\7r+>\^-DCFrQTTXC\X"Aj/l-bse%t_Tr.qoH&1EX+-.n9`0WN
%1\4Q4f%mG)4)8I=%S?.<!LZ!_Z..:4ih0fl`b+@5JtD';cZ<erWrnXG2;u3MU:E4]Dpu^`F6u?DmoN]k.E4SaD1m\Pdk%7U(XYf!
%QQa:C%)9t(IZ0P`Z8S\@3q^D$<$SkdP3#hAbMDl+[_%o=e"11Jm8mo=WEp&X(C-Q8+89QA5r6]N'P;=0s.34Ho1%H9MgkTtj-I4]
%HuQ6cCIp0G+).K;=5F9MYjcW2mX/;FZ+QJTQ8d<Ghu!c.;INAQ:3J[Xn7,"Bfa+.]mWK(j$KW+.'6qnhCN\-6rqi>>]t[jnj1c?*
%_]qiT4b/C[ZIAcY6iY$VZMYS$>(cMA'mP$6rMRbZe8"^Z5:iVlp@5oYr>Y[\LDh@ln6^HQR>(b)A)=Iqh0&5u_p]#-rc!#/eh$S`
%f1fl0Ys1)"FcG13!n*3TH9V8DJ%^BIIK9(S:=jNiEhC*]\]0-Xa$Uh/BY"4-V#/=`?rbVr8k@q6C7uZt!e33%3Hk_+aH!/;(;i<l
%QT<Pq8,$7%gp"H3/;K(b/q6%f!eXpR6CK#[jPn)W:nmJ%rqi=?3rE>>l;$!qmgWS<LrKX8S7c0hDpB)bVtB#sYP)Zh5Z7WS3e%h,
%U_Z@rbME#n%E<:r2M@L(FL!M"S58q+Qo883d;nQ.IP&Vm(B`Q5<;ktK?+B*k\>%&C.Sj*':cMF5rt_#<C1WS-=us39s&hBcIaAt&
%r))bj2Qtn`TJ6@aV)&q]Ae>"*gl(I)e\Nn)?%%>:b(<0Fr8DFS8Hs16`NO=qs*\K@i-o9H2!ELDr%!s8;,:`Ml^S[h>S*6>nOk7_
%`k$lOMbGWGbNM]Ln:+doD#BE$/R[8bR,l>$I5DdagG>N%DKLbR$u0IPi=66Q-MpL82qH7$eMhjSmJbnDV*&Gj3<Sl"%Q*u(B[q$^
%)E7#qAQYN\Q7!2i[NV7TV7gJD<h=$L]ooQLn"EW4Ia&.*VT\P=jlfdOQ0I>;e</td[aSm81@71`nQ4&VCnJ>9SgY\nSN_Z[E5c_h
%1<rY,6a/Do?/=tYcE7Z=;.mm!c&>Lcg6+rZkps<N@9(*T2\Z.'qnlS>bcP[EN;&ApF0?`2.[fFh;OS`_YRFV*Ts3_ACAm+*\(5KY
%.+`aiaIW#&Yd7CH5)oF#fX>Ki0!!"u?Wm/J#kp\VoZI/&7J2MVA-'_mc*3:g@[1]!5AGhGf)N`h7:B!DEsI,Ci:m9@F3"8e_q\"^
%26<@WK%<b99Njsu$AX`u0N(ES>d`-C)qE73gd/D.l6R,ZG&rK&a1YXu?d"$X>E.D\lA$/J_oq^f4hhNB[RWW*nM4,LR[4[4f,Ab)
%Qk(tH.4B4^l&-%]rnYs5HI*,53MrNF9sWL:[IS@q&.jY#9%e=I-ISqP)Te<"[D>9EWs,Uk;YG`LG8O'M_HsB!)Kp1W[DC5Y7j=Zk
%n]"BrqkIR1fT;q#:q8q8KJ?A8VVA@JYPc64<E5>L^[`>G;-WkXX0PdT`kDKV0_@F\BJb?r3@0&`bP$.4mV+74oR!?@&0"RpJ9m$`
%W#@s]s*WVh`PSZcAo85`f(+R[))cPY_q*>,,10;?1<_X=_fK&u0;C.F-tO<gY3EBYTVSZ3(d7K`ldl;`?ls],d6;f)pmN5W#6e[\
%4.Yf$,X6NtUe;T9+eK!g+7g`e>CZF[YXVAY,!18`,8D%38WboB<@X=H_nA-$.oIV'EH232OM;=n2H&,&Y2u,235Z(1=rfgd"@\GN
%e5;+S3l=u.VL;1aqdnU+CO&p5(PTQF-j\n8H3`71!PtrQ#<Ha(*;RGBg(:8c]Cf?XPA`\id]JV81pHEBpWBbHlL2dWJn*7Yatc[.
%K42NA&_]F7UAMk16"]#5C8b!N<W<Ro80Q2t8#'B$QI-iL*^:4!g],1[p\M#;<P>=9XWD9Z(gHeDG)A)G@\O3f2P=0;5&#VV5@BAa
%rW9.,7M!!^D5J]TLp$)GjF+qQX*=FM^QC9f\b4S1@Jk=0ql8#&K%S$8b%Y@W;E:9.l]K`.hE,L[jA0c$FIUN;2d#0*4L':Gf"W&\
%Q'\&29R\hf@?Ste%&^O[/1G5@8ceXG^aHi1'q*Y&?l7rDS/)FaQYXFFoXnh41=PRP>A`#Ej,BdX"R-<2MT'^0fj:E_C*?C\gR\j8
%EDfS3O)HdV*qBHnQUr3r#uMu7OCTe8/Yc:_2D:D1bd0s7FJ7Ild')+p%_KDJ;WO\O=*:4.Pk[#X6Vp@6h!)"I\I\PO5@Hlf7:f.?
%;nlKG]G'k2i`D78Q5^dD+5Kj4X$Q'QP;!'Y8eOEF0,%r1OrR3k;rJj*g+\fY2Hta)V-n.Zg)@D8]h>7bQB"UaS<9J:DoXcne0=R'
%#6o:+B&dHM@*qeBdmqA1/)5((]DWN3^8eR-#pniuf+io>`L="WSTju2]6#r-_e8f:/;</)NNPu,7dk:qC8j?8e9aL[=&s'c>bY,@
%WHr2rfj)N`6h$mNmplKd0OR2KQU)Uci#e<M7,4u]UP:A$EE0:-S+)Ug0GWUt<`p9+P_Bu>C^m-cPW.rcRkSMe[%UG>2R0<i"(,',
%h@EWQ`%jJPY,tI*HW@VjE\lk#G0tn*Xn;pc%:ItQ\8p>[PocrQ>ub"_3AO]%8l%4,Nd?k^YhG;JFk#ado8VZ8mDfV-qTWp@;UpQa
%#,BXd9q#dk2#qf02L&DfdhZ,[QOWd6hso$-k[Rn)$;GRul`Z[C=:hp4c5"h1*U2*@#1HQh'ZA=BqgJK"BjiH?LaIQUqA76uQ!U1%
%9A:ZilK.'O6kiEg'^PKl,8Ou^cc1m?(R3Z!H"32F*>OQ\Z"XBhM'X6%;W3gCLHY*H>2<N`16"XI#$5oZgM;a#0m95.5^8F`Q,u[!
%@DC23,^,"p@R,dIY-;YsIWO#<?T,68+lR!eZR`^\.N>_e0.Bu?JBMO$G?Zr8Q3W2W`SB<FajE8l=YoXF,Y,!HVOqTGV@<VA64^+S
%(2k(c`-posqq%Z&>#_dh4:aTl8Z!rG8]OlVAf0mRX/H2)-`7).e52/G"oAd5J,-p3hf&AajDr?^&\cDiT56U40K7Y[B3/6tk[rG$
%=-`''qX4rBCqY>?!+F9k7B6Y?FQ_Y@EnhZ@JkP8Q'a2@OS6SKZE^*)8`>@@Z4g8F:nR,?R1-5_2;&h#:.`@87aRK$f*Y0a?<-UNs
%:'=#<lT!=aqSY]jZ.R]R\IqB88g8S((lM_>",g9kJ0Dlu>TIG`>@ZL4@b#3Q1fr<K(R_EI;foTJ$nU#q;!^ohLrn9oC?2Z1`EC6F
%JJ?C0@1pOPA3![KI=/Cn`K[W.V[o''D"bfm+aEP5I]\2#B!0^!LkCP[WeqgBn6/iY7A8%Cd4s/d[J6\5W#"hGYEklCMPuPMJ,$3:
%_6=)p0-o+aL2c;-qJUL/K#&"_fr-]#/Gm-+71LuYVlt=uWJZ&1:2&iD(E2+.:s.mWQuM8eFaHJ>9B+D6oLa"ns.iC_`]Qs9I'm)1
%iF;?tii!O19%JnP.?hVGBlD>*b93,U^#rM'T'\c;]X%50ahuBWLXd4'KDi4;G(6uL^2_`7o:g8<FnoIF<Qbp@4)^b[3;5>>hsN[V
%ANeeHIX1^']0E=%b)Z#7?.(=jSu)t>5K[W>gAUE`Du%H.>H>HRp>DdP%aAg.<q#ZlW>EJ3g%./Qm4HLG.^bj1XdAYTLM(+6<?!$R
%5ut->D6QgJ_t&kl7I/FVC8'Ic%U^UlcW?]!pI:FRFoQm[8+?"21fJ:,02>HFh.L&X]mKAH9B!CFIlFo<[G8dRmB);hfBnP`^:dEN
%>oH_/G8j7iL?)A1I^20f2o!(>`F(e&YgG"n%nl*PP9,q/pBTfk?N%FJp$CXa:'`mD."+2SeqLj[r%.:op?iXHg`Q7u7r.i[]FuB%
%N=e#-rE*C*n'p_`bGB:GA94fUA3O*E^0^cPZ<_eO[SlZdO.X.5EUS:]?E[Ym?`fTaB(_ZQX_[5[eo0CE^<ufNU/;>bSip?EYC%3&
%W^dSK+p3n72d`)Ed#>=,md#%i;h*G+H1G]kS[H3pBed%[BUXX(I8=4\f[*!Kp%"$W4-1G/kd1#\f%=Z$enZt\qPu!eCTDn=?jCPo
%_oM&jG%km\hYWjDcc-b[jh9!c]r.s]rO0$)Y46eT35,'OkW\Ab!D?4Za7jOT5!/5(2]WU_e)J=kB2)(HGE&W"J%bTV]O'?=:q<q'
%WK5:`pqo%b6:IObmI]h<7K6J8>1jO<D8"hPaig#OGJ8-5`^aMLB(-%Bjlt6b<MTKYm"lkWrlN`'j2^J(1n%j6J_kk'QH_[oiet#K
%?_]7;b>/VQP]%.Gh^Oje8DId+nB>o:3Bue_j787rEc_3@c^e8,iVfKlqY&1boCC#P_XVo"=?*ftIoSHd9Ul.fp@[H/W7:ULoATSQ
%;(*_SH"42RgI4NT%J'J\EmR!nbKZfQ#)O&XefLqU]smg/NtP?FAp-rAQ$5[__i)Z\^OQ76g3E;i)3'ep\,$Sni8`@Q@b:LCP\-G.
%<V00gHuP2^1paa`A@,Sj#C96o@;ir2m:n4Jkc&XWh;178hCT_^(llV4R2AXeoQ'Rgo^<oGN&p?=^/[^]C38\8Q/r7a8#::inC,[^
%[e7/sp\V"[J+-u)lj9"L.$!S1iT,\fF)Gd\HNfc&bC"U(#HJ._^dlp<qUp=#f`,!"<@Ke4\=3EfZr&80g)inMVMrE10lW_sO,,m8
%lB>#_kK!=g,WYtN5X52Fo'XJ[%rK#56=jYAc&MJRnbslYe`!^^iGS,PWTUC">-ASpg"[NgS#+]/jcJb4qg;d6]!qDribR$#GgM1&
%IJ='qfrLAc00[(2Xe'qASS#aB9@_(p_imR%E:j)tH+il]\\\Y0+$OlUa03'eg[C0sC6]h6bm.ooCIR"R&k\t/ZeBhE<$""<+(4"s
%hG4%/k6'B=/X2pJeb"L?&$)?RT0+YE#//&l\MpqZTF)cEm-spm^@:^R;$WOe1qG5WZ@0q<m$F_:O7h-@o(YM]=a9]n[Nuno.OU;F
%S.d-?J3,qG/c.BpX.05ni$,W$.+KEW[^t5L=ZroP!C=GF%nli<rKX9V*0Yh'*3F+&9!-[6"u:B-M]A'j^3mXqg"N\QdBCL5g#EPq
%J,F&.W>N:pni0sJUP6kGB<B5*p:JdrG4>F[Tmlk*D8CU=kPgM3kl/&S^0@UTj'PSjVX%#7s)d:h^:IQq(1L(5R<U#aPVE#J&N+*U
%C=5>;UT3hgIsjZ6_\Pk#'fi81elmd\CZRqDjATt%Meo)A`q"qM_mYG)l?,LN2hMRZBl&R\Ii?njUa"H^"6pPB!kA=u"l:-XPk0ji
%63/)O[RnuCAr&oS9%`C8<p?5SBLq\B/l8RTM8'ZJcQ[)o_Upq&aNiK$RnsA\,grob/X;f="J9!]^6o3N0bVi,@PE$QPZL8C(a2bq
%-1Z`aMZ-2C_PVOP:-^W*!I^CpnLbgthJ)g:jGUJcrDUqIeEN*(DIDF<aB(3*Ou$0Y1JqIS33T]@UdUeB>[uak1q=s!/2S#tnO\>]
%:b3Q*)UIF!.7JCDf0lZ[Cn_*3ba[835)gmB'h2UG;O5O=fYrJ>NUWns\>bQ@M/H@6/"O1ldZDsu$D8q;i_S%1+Yae9dGLFP1aYP&
%>@@ohb<s>#+77NaHjE&FRI`&g"Ej^]'H<`IkS+MrB.q*ZI+_0Z+,/a!00>G9?,(o%G*dAJ5V2W7UKB(B2bRA?PMu&lm7m!+cH=GE
%&'s@o[WZ#_0bd8(kshZ6E'g>W^l98bPue[_:%uGsH!,51Jkc%(o0de\D18Kc$Kf>+(ZZm\=^!!C!Le#?0/U,D[bA+20;&3Me7ORc
%Ic7MPoX8]qghZA[<7dJs^BTs?DlG+4Nl+ALHcB:BqgA=JY[8k$OC]Z<Y'*Jsi235k(?\]&5hK]Im9tQoH#Zr8d=;'WNBk=/rcPF6
%o)0N7Tgdkq/m[fRpAM_0$*-f5[dl*Id'^r%mTNl`=-1NI>mmIJf\<V/bB!4!i+TfHn/4pbSY%3GN17iCc^/uO'3unt7eN(AM2KMs
%8,P__^Jb($rhS'?iN-rUgIl0eqEEIr/5O#:G1c"fn(&\h8Q`Jm_:OJW:1ur\Fu^Vhj"PHA[!]=UkS\<tNVW3.(i]?_9BRfI9C&^X
%:H$.9`C1M_<A%\Qk:;\(N&jZRLP+bH"OO/o&#0P5553#9<I-FBkBQK\:\SNC*'=bYnVGtQ\8S$^e[t<XQ@PgO9',rl;m3k2OYssj
%h_?rtf6W^XqrZ2!0*r^ibd8DDnFnm'k1c/,d+XbjnYi_1QQiuH\0ZB)M1+-)E%u'TZ-'PZO7-(l3hu/`P1Om='\HU&^])ntp$.Ip
%RtGS9k%":r#R$)M/f!6U5'g9Z5AJ7]U,h+ZTWsF&l%)l`H.n0=l""bMpiM's;`ar!B4L&fm`C<U?XNCYN;8gZMcVE:p`D>f`Og[u
%R;^%Pj2mkULG3,/D)BstL3q'Y'_nRS/qQi,9'b*bZnS.ZX,FKSJ$\_4?1"P+iL"J#^AN3l>g2e$ET6kLUYWp#(n2n$A,GX6O2c_T
%iQ:Z3n8[GFkm,^Pccub?)JSXLW*!`q>7G6c%sC]oqW[_9gP:&#W+O\uh9G*Gi()c$D=&RTYRtQ60A@gqkP8;[X-94eN2HiEDKF7=
%dDM^!EZ(q-1+m&m(50>J-#866GYgT3r1bd/Z-j:j`b.9).ut0lbt?[gA?7olq"=/:aUHPsKl0mn`l75b3JeHjk,Ir]<6cRDf![MD
%s0r@/XCLF2V,J#S7$rRA]q=+]H2YYC[M7snJ,S1&p)QR_&A?gM58!2Qr=^,oI\YQPIu;uabT(nF(&(5\-P6%2?t\T+do<c[B_LD<
%Ephi^l#(FPs4Q+B5!M3bhY9oE8TF^R?$u)Tj3Y;oDlnJ1SeH*T58QbrAT6gfFVr"lRq9@D?R6Z/\Q?3,+_HsG*l#9*[Em\5eRR8-
%T&&9ad5kXXc/UP`Lj)n3Y=8\B]C:*DILnV6=A^92H+%eqg=<gY#4&JM'oo?L\/r>kna:<IDthkr;;pGPrTcr=S(iTnJ,^A+7^7:7
%rq'_Ak"YM'Qn;\%<_bR!f9<<T:Off]UsJIFs*RlAUE=Hf7KrOnGF$jQ^KVEi$o?UOa7k(d<L18RUVq*IBm%aXBS9SBG5Cl80kb>s
%Qo#VOS>R>'+1F1USj(Gi-q@bL7@F%MqflR!.^IH8SGjK]nnG5-H(Q-Y9"o@D3%ihT@c6*a2.Q;lCO9Rk9gF?..\!]R7&Lu"l5r4-
%i[MVl*$0%u*1nAJ#,Tn7=+fn"b#6K0k'Yf5]e7!F(7L5Cgi(hGX8]ZB=$Jeq>47I0f][gsG6^#>m7h0f`NuT=r(CTL$tM)SH'iJ&
%S^!Mq$dJ7q]rr4+kiGHF,de[`UprF@e=(h&kMGC(8,&?FE0>/,S?@A,`Q`G[2u!*`rM.NW]a%'CiQ@LXDa/u!$<rOKFEb69>(!sk
%c"t$r0g?J7O!!/69poX@+l0.(C5KJujXOF4o?2eio))gj<;6g/j7XN`#:nod@lk)To)<qOKq76*o+')/l[,lGC_jF87;uV4TeH(P
%Xg<<nRVgu\*PZrEZ+]h;LW;g%TVFY@U#?e@*Y)NkXcI\`5(E.BHC0Oj@K4<F/EacE1DbDA_*-K9WXI2,mc+6@!X#76Y\i5!&)rch
%dFch%40L/q4rt+?00e_2V:?qH?T6,e[^R/:nUS>*K@8Yl3/b-u=39:ekI.[,_m9lVITKj"J!?GZMkGIo\@(Bt^\>2eKqNLR@]5,T
%K2Va\"?0YRf"[GV^>)oT2Os="BW\S82jZ$6Ku:NC<8T@H7W?$.4K0$d(7h:n?/DUc94OtM3-YSSq0IjS2.(gCG8C?eM3YHU3]d%<
%g"(m*0^tX^b+6SR3r$7(Z'&b8$8TB6H@4j)FNqkLO15;7NnH@:r3a5&35Q>LfW6Xm[0tjeQe1s]jb$W)Q)1&UHKMnj[VZdE=j`rX
%ee.fpfj/\2=C=Yn8d5")kM'3Vq+'\o@&XCC(hEUIV0:)Q`HL^E?nE2PmOSlD^S4KNPOd-+X.O&:?j3`^SD;=c[:h[;*iIH5+22E]
%A,W^[4l:aj\lP.L=do;_;g@O.#ikWNkl_%-b:(u&G/*Arm='1ddTh`q_S^-M.nkN]qdc>G;((&DcM";ZIfFdgRCl=deSaL=UK%Q#
%,ARTJNU;8A/2r!\r_B!D3A96h]W/5oB1?HRokrjRO3]Y*/+5?aQ0"@ESiY:VA`%mGLHboqUXNP54-YJ@pT3#]li']hW9rc]TAf@"
%p)@c/]t%-QRrA!2$:gl#`qTaJpWIpNec>EK@N2lq30is9QFt=?_>_Fi#.dF1)V'3!@kJ3"fB]TkG>>crf<-NGr8@P*S_EhO]>aKd
%"(fdgB:<:n4F@#-L:a;;"%Z6e(>p%5\A:!t?m)(+rX%`^hWo-E->!%Ks6rD;_5QN5X\f[8+`PL;f:@f+QX*Fcq442Rj2\uZH*?aM
%=FRNf>f$$]4aus$#\n4^R!+2pp?p#!?f:HhMHsF\1N%o#gV;@Ufsb.0oCrI^b^*JpQ1Kp]:ttl[]9QJ6OrH)ZlGjjI^R^B7hnL%G
%S7uS[2ZH@>:f%"`Z5__ZkE8rq/j@0ZnR8u`I*fLg$ssL:<)/&CHG#Zs\(*8OOhkP9nSR@n:R"nC@q.^fQs_1A[=\)@@Fruc^K`G%
%]7V9`6NBJlYP)COnE@dGo#hhVJ!U&8Dg.sBiuZ$\$b#G7%lDCpF_B`Vs$>6$=P!ZDlhU.pameV"Ac&0N*'_hlBY=[_,Q3?!fWDX7
%c<Y+&Fa*SDHi.I<oXOD)HtGTV,rAc'`2*A>2f>e(`3AUTE8^*g4N]4GJ):$).3*0u2I6h^h0:d(EIR30@C]^E?'HG?f'@.qh!oSP
%2>;:2O<t]&K!g)-_7cjLE7aZ)0l"!e)N5'ki"J3Ord;CW*Ymm`o*q'1&(esh:>lrSW5jsV(RnWE_JDf*49K/=1cfMBQU/,n'L^j6
%/_Z78GgC!"Yu*\`<2V-`Hr!::M!o3>YZq(o4T5*>6?TA,bf,?AeXb6o`B-oJBLa4OOr*K)?WnkbV`u9<.%btX%q4-SID5UKV"^Do
%B"3dH83\(:&QsJ_l?o^Scfr2irX940B:uJ9r[^s>_N:efApK3=C<LmLcrc&Lqf]BQUb@@ErT8(,r8LIM;gI;THb/h:B<sib6tN@?
%2A3sG_Dp!o%mHP,b0BA+'acdo#/5fR0=i!#52I=AHf#/`5<X%^.=bJ,*q%NJGJC]cccotG>^`k[3E^d>OlRi7FM-'sCuoY'hb.VF
%Q%sU=m`%:.''M?fL$m:'3aN]W07Rhe]GE[+N`<j7MqYdEOU,FAp)C5q?WA08/leLP6b`piW;$&XjVKHACpiM8G^lW?]%Wfm$1Ejd
%!cHnDJ>7UGL>5f\7fJZiDgkn0'okrR"?b-;39'7>[6h@\=/+Pk.ctb[F*mNEgEPtM*UDgjB3u+,$QK?)l]N0bNe7Ne`7>^n*4&Oe
%.M$^'^$)IprltW7S`@@rSN4`++$UW)GLhZ;kFG*0^3B:b&"S-/Du5H=WHICq6X2Q#O6]$RgASDhD>EmrdUO;&LA"nl#2Ys>@^pPP
%2uhdak^m4?8m[p+^Vm8m-?%r[kg+mS(;;l@lGDQOkIhuTdAs3`5PKAn4f;S2`64,FjiY\b^X[de:PU]i4fFqIHa-XWj3J*D=d_`'
%F4m;aPkq[l*;X;_LXY[4bG$<Q&ua0lo\!<I+,A#1WTE/]J)KL)I6TYQpN,=[F)KnH0qn+[pZK*EaUN!7i%WYA3?4qe<)8Mi5$Q+Y
%#5D\M)-!J(alhLjLbSc$JCf\krm`%NH8&3:h+l76[."ms"t+^tCNX["%^23tVT<K^)@d'qJ>M&*MhLAEY!r)_CUp+Xli"['/[\n<
%B[qBkP/4)GNZI!BPj(VU7#\T+g&hYAT\&"3e=kG92sOXUmdU.-\V\K5`=/!srDrBE2h#dD.^d+^]mom]jo:`W`-HOietp[tAD(M-
%LWb!0krO^,a+e;>%DJW'U14L_&g],mKZIniH#cr\B7gl];@eeB2,J>l/%Ru7H$1-#d*W^Pn96dh3=`VS-%;if]I/U!<O^GZTD,s7
%^C5b@F,l8dhG/L4p3T@d-EAH_<(C'n4++T'C-A.iWT@Ldcq0Xo:p623T9n.Ag"_'+'iJCQL=;1>j&\KRTU,TDp+J02.S[_l]q`KC
%NNj),<,;*d'<!^JUBG$>C0[3'`jql[r%_b2H?f7ke[]/_nQORAD<N(6O4pM&=t@\"%>f9Ka%Df$%'("_/P4r(I3!4X=7HF4IJ'K9
%V+]c\FG`H?m0jMF%V64P1_D;Y7;?NIC"7&0kf5H5V8)/OWNSs\k@Ipm>Mj0cdiZO-7cpf=ZV%%cq-0mNAm\e,mNepQ^e^'['rdWK
%n9/qLUWX@&:t'c^3p=2O-Fd;^:!iT3.`MTCSMl8s0O[T4[/7o$;gOR?QpnD!lM^-bD-3q=o)$P9:RBD\FIdM6Vt!29`ouM"-Rn:q
%RB`b<RUoT0DeMtQOM(i,Dl_R&oW`!$UfNh_QFO0=<qhmF/:E%tj'?b9>CbW,CFf(gTfl7CAP(Bqjaa6Y7dEsWi=*D1N_N.)O`]@7
%qgWgQA5G+?2&+Loi;1=:>frnii=(2UG@?c?mj,XEZ@lSF_3]6C<PCXabFF(*7i.fs_>e+R:,gsu@GC8^)q!s8J,ciKV/uL.>dZre
%1p!:UXP@agb2?UtdO.k[qsW5F'Rq(a6GnhTi5^<1X$\!.r9o,)o'8bja"\V4As)I?3dp_B[WS-)CSY[g1ierad5F*;reGAH;g]!&
%qaZSbQ?Q$OafRirH2,;"[1RQQ(,H@eXh88XFtNcZBmItmfOU6.2%O@Dl?LZiK2<ra\V;P1h:+!9\ut;[YUS2R*=gc<?312Hajk[/
%,`:9_*8^O:rrHurL_aBkFkt-.R]43N-HfU?a:?nPTQ>kM.VL]"C3aDp(82(hF>T_Bc$Cr0BbpE_V#9F/DpZau3_ZCVXi=3_cRb/Y
%2,5;8N@6Vtdce91G:_!kheXt7fWISYl8WWC'2V1('P=]V?"FH!F%eu<J?6EJfuUL0_mIUPYZi"OdUer=V<=Lc8$d1jfERYeGtoFC
%-am[@H-KeN<qAEjAd<*S(.\RAl5I%(GrXNDR>36,W!e>okSu@"SadKO]Rfr*TH4NOA`U)iQ=a#BXLuGYgf)iVOU0AO+t!%p]'["b
%/h[tJFjLGMh,lup\J"r$f>D:\6)2TNdl!NS)T,En@)[@+?X83!l4U%plR44f('\7gJe\`q5dR/e+X$X8(Ptc1]8TdPmH,G5GRf<a
%$n`=jc%VGH\Tpn^/ftG_\/(&7/8:Z@%jea;4Y5`1[`K-%KYN&%mWgi`5]gm'+)'4*IG8^\'TKcg=J?Hi1VI$#Vq3shb2RMN&t6&s
%`'W$\gZ,5LCG8Ch0"JD;+CLcP>F1%+f=!Y?(/.;XAi7e(cS^P2claT*r:ZQg3s(5mJ-j=D@Mgfp`?7./0'!.nM9:+8j`*][*1KlJ
%?*PM/P?0U4QD]QTCtmBPQp'9%IQ2W8RRh7RfB\\J-niKFYknq&K'?N1kqIJZi&g_M3Lk[$fac+0</@Ef'LW5F+<Uai8:7[)UBtQ8
%2]?2EQ3EJ+058b\Uokm2_V04,QlH?cIrj*N,10]>k)aF9LEIOh_]d4PF^E[NESqNsA;h3@$pPs?"'mWE"80YN]@SOX\$3;]bE$Zc
%hU?B!]Cl]hp$f;;`$NW@`jZW^R:^K`2I4\XBZE+C7ncmLJERc@]*A1E1YbG#eG,VFTdG?$"dBFR$W0F=BBNM97Z<PJM=/ff#LJ4r
%S/O#/(RC'*.=n:3a2ej0K,S:!`+Y5pP_,cR;"pW\5RA3WW9AM]QQ,+lIb>"/_%9bBR[qYYSqb5'Y9o\j2\fTPVJVJ^BCO4QXN!Mm
%ZaN<7]2Cd,N2f7k?'qIS8%8ls)q6^))$nNqR0$E!TFP0I[kF!2WF/\r\&B?@keULjP82dA@*>iYKN2M!bQh3n"Ar;^'b"kF6]X`X
%L?lB*:3/*BR"]V5Jq[gp['j5FlJN0nN&@-qYjum<_<N,PES<7s;:RCVTfTGth&2e`lN/qKQk,W5m5)p![NgDR.m_(MXU%D8"$KF<
%L22sd#<BV`Y\A<5S^-/Tl13ZP"jePO#)$f-Q=M!E4`_Um--20H5Vul6,9@[3.UjO(-I-$'":N;eeY_@`dJ8HHNP`rN-kY;pJ^eD8
%*0%&!ai.YR)Q#%I*p?H3R:<DA(bI%&FNd4,NH#mQ1j]i<EPj%H&2Yk1&e9L/0loUAl+4nIciD_"KmOjMR>0HFn#p?6*X?O%GsEp?
%CM_cnZ+kfKA8>Xp?;5W379aiPd^NVb`*tDe6IC&)'I'cZLb/ZZ;qc;[%b&sL\.)oXL+ARbc"P_F4j4*>`'K`j-+"Us/eSsP3%>6b
%D,XqbS2KGK93:jE558Z:8W`2&!22tW(e$?lrrLVll8e5!R]"?o[S6rFg:"6&&4?mE-=n18^!!amMKNlTR3CiV3`hZP#?h`D_i\rg
%@!7@CM!/)e/uj:/H#hNEF<_"+F;A*FfL"Y7?Gi&rff04QhD*%p`Mm5R2Hk(94Ih*0ObEur==#"<9!7C^_O$hVndRm8<PB6b_c&f:
%V^LB\^o]H/)utX0QKX$_COoEj9sR:9'[sSo#*9/__8.2O<b7DWLgGkSB_-gU@S=W^?NRiTfj^P(Ma]d-GS&d9`&8@+:'-U<OMrE+
%JMs`@:+6I9i0m(rm?k87CC*TAg,5.lh<(e"?:%YDUsPB(5b*P*:'clG:"%N^i1Ne1nmm]ijB)el@l(CW^sHag`WEqc__4T$_\SIT
%K`TPRi6r/I*?B<3S`u^S,+,qlZoGHH5gSR.]4l3i9fAlh+:s+r&L3*W3X]5,JV)HC[6\-%V+N1*E81G@r:V%F2:*5D`l-(Y4P2O%
%<<77n'19j=3&@@&#D^2#k>prk0Zf#dZI&d8TOuP57,?pEm4dBl<=*c/1+2N#Pr\7>cjKr4lWbGJW42oE^hYc4Tqa/82`VEhj,jMl
%7Gr/0!.$u5=r3/e&/Pb7a*0<2Al*[P!cs(($KrcG)h&CE->#q*9"hI'l-ZLg_3ec;iS]BA,o>u=e-4L=49__)=;#"!NDHONaRDt#
%/i\PD,@ank$?os3!^b,J@"YV4eJMuZL/-26_cD`/'j5RIi&bLTY1XOdgh[ZZmQg/!$8s)GAn:Ecg,2QG;%8/i<SUW?:l,>?lE6n4
%S9<Jt$j?b:>V]Ap5s[n78lRMG<b!8r!)U'1GoTtS*(hje6;'N-YX#7Z=im's<W77O.<6o78l)J<E;).sGLBn;iXQ1tM8_P&^jn\S
%kY)0P?k;oMJN.o0(IJUd>=``Fk=H3e5lr)3AKpuDJitg^Q#6l'*q-@!X/UJc#/T0c*8TU9^;bdQLfp;i@0'dZ5!?cI:nNKi'JGJK
%Q=)<JM)i:$4oF:^Rt/W'5oeoZ^imsM9[nuFpUPVV)l6Z0/pa=b0M;Q2iP'3ihJDeF1MR=T_*&H"6`-JDO9=.14kdcj@c3,i(/mdn
%LhO"f'-[K8")J@!'Y;,Rns'so;CB@KG"`ZMpu.I#%!''j1Y4H^SXAd]L_4>tkceRLXsFVq^K?6YLdTp[7-`i`g,raY('?YMe30'r
%KSUCh`<`h-Zn`h'\6Zmg8rEc0?BOTA/>dI+8WE6gGRkg43NLlhl*94]/VG=MVGp7nUWVPMU/"F'FkXqdloFTM%DE>?"u'OmO(.8"
%f)\8Q&OM&5BW"Y97""kRpRIE'eX."N9'L3:63t8S:n*3b,8.7Eeds03"<(s3gX7F2_1OR@WSY:Ra8em["3fpJGGi9,'*/dR_CgKb
%DK)LJ`tL`V(d:=[P6Jh:9Z(ok"f)\?#uHd_&CFrm7"QBr%^7L)7O9Kk;a\kqC/H*5a.n[:@Su:lWGs!F6@Ag_-3^#@-f8#@?3J->
%`02sHq^sn6'I\MU:fn<cLda"!_#OJIel=+ILa'G:KPf#-H@c_'m[b/OBaCN[=/>&F//IoK',p&;IU2OT*-dF_HX,gpBn/09o3>JE
%!j'C,0XM_mkSt&tVkXiTk-`0dl(#ODKE8-!*q-LgJrpCW:fh*SS[CIc\/Mfp4(ie_p^IeE"(G=f`A*oNHa].?&0Z?X7?:])g*..1
%5*![N-jr9*&qu<?Lqth`mu_JI$5)Z0bSG<j@).t;4\M"S1QHf&Q6B)_#s92Y3jNBH:qh_#ri,LF/U9@b-[/Qh6s251i7YE;Ws]W4
%<F(i#)NU"h`!,:hi0]'ZjsU\D.8V@;#+e"t,0IKO-Md^#*VW):"ojCR0]&rWbBaAj$eC*RUn7g]iH0(8F<Lk7p,H23,W&:4A_b#=
%9pSr!A^UuA$VWB/*+@Z:[O+g)>o5.a6p4V52=N:rP_CD.b%c0K.*Ch8*MU-Bag/'//iRa`(r?P79ZB([8(1iiZtS*dB,F2&LPm"$
%eAS:oLsu&c=jmpZ0T>-$q\d;:NhD:RFXE&4dh=kH4mX&`OFq,$6[o1s/l._>*((_7dfFt)KA*nuNfNEo[K_bp5gb<@"NRaS(_S_$
%JX&f5\.u"E6cN@O?'c[U5mYmn_.0C<DUT9,22hR8&8Datm8ZsbSTgcD<)D31lo]+%^i63HkEN\'AD@#-0BtKjNju&"nVF-2=-5Hj
%W1\JDd338Z?:)jQK$d7N0dMR4'bcRu)Z5Xc)Gr.B-NJ3>_bJ>s6lj[WBW_C$JVm.F914'P;jkK.JmXt6mN>J''A\P3L-[_dRoi.9
%3c8EGiMbs,0]D"ZckP;nehNmOF5on75_B<C($/iM6&:k(,`"3K:FI4cQ]UE3UnA86V^df]6Vna>.!j4TM]kY,BaA3,Y"fROA\UR^
%CZ#7,!u@kMK.[TZ1cg5[&58nu0t(YLIRQ=%U.btt[&Y>7,rZs!i^[<aZU30-RoQu'iS)^;:,^f/&J\Mb\6C.hM70-q'i>3S(asa7
%L:;Dd>ftW'MT(YU\O?U<JSs5B=,+_GMg]'CJd*4&\0W7_7!+t$IfMKR%4)K%BY`/D<J_W>&%,o/7-Ra)dKZ:&@K]ftMh(*_ILA!j
%W9ni7lEM:,]T!arSIlR292sF2+Gk+KPt%Ph`hdoS`]?uJ3+Y3#0ZflHUR$h)9J?mLnVmT,]PD`p3KE,J&1VZq_ZP0c6)u!UFXpK5
%":r5SXYpfEW&H"dN!Zk[6oEc0PVrrsQS<F0c3T6;(j0)V<K9Z]_s46AGT1/`.]#bB)W&Q!5Ccc:V3)HF9Ei)#U9nci`JV:)dRaHc
%UasfFFCfS`4JE8g&Ud4V=.n(hb+QX,l/F9L;iaLO5RHZ^1a1\Z\ge]IaI'V4WD\\%0`Uq9>`-+0a1Vknra=ssKq47DeG(;S00Ko4
%6KF!!U?YL:^?J$\Mb5+4>#Nc#AsU1$71P>M+`_O";.Vsdhg-#E80OZ$6E+X792FIE,JQgH&G]&"W+o>.)^(9$V%SShXAi0,CXPqM
%a;\%a7,D#qWgZuQAshSg.23uP/IbZr]6#PWo't6+ToYNE`b`giAuKeV<<A:ER#7opD7Ul1H&aA*aE($D@g;WP@pF>J$3eDl9LT[8
%ItB`n3M\-Ua<=8H@rB:3QUEm<.YYrh9gode-f$)+gg%79jQ<>6Wi%_r.?bgX69t's;c2)uS)>,QhQoftnt&cWe_cnXR\i+!PFQZM
%=ssP9fs,WuFnX8d!thP0:^!2H.KP<]_$Psu'V]SC8(F8&H@R8-<=7,)9h3aLbG68?6raTAW_,e3i(nZl-peXUM@rHMPlT=P@$O,[
%$B`b/8(A_aHGD'u<=4kK9h3`!gk;&c!7gqnIZTSiOhfJ>@0in+UTH$e<C2i4@7pc(-n&;:3i[p%dmL#FW`"X(K61'%aeji3,?1KN
%))CHT)AZ'Y+\/J'+Yp^Y;'e&i*l_5WKn<b]VP@mN4?\oMTdkc;Y"_F:&:Jja5=/?WOVsaNWlG7+NYEb=;Ma+_FAt9#83b[%:kaLQ
%.bds,9IMcE,VDrPldPn/e-@W,)ra8H:?E1e5!#]1dDZA;c^K'@Tps&e=t2#d<`<5'7Q3a*AY6j^,iCO.bN@ZN!um5n3=8qaU6abl
%oO02*1KrNE?q<0j<2b]OI,`tS;NJ2bGh.[P6re3-2hiXhpL8!8TF-BbVMf)/nPRog.fnYpQHcls:dDfA;2c"U`B/rl]Y5C\aDn5m
%7ioD'OOmA=NB_TB*es3uS6sBp5__5%`FDFThsT`KFIXatbdC=";^]Ma^,DPBMSi^+<[V.(<(`$\B@Si-<@-RR_,Z]V)ok\.AR^0u
%XFpZ*OM&J,1AOCqS%Zk'4(/Jc&eZ"R;30A@5ah%.g/,*Y6!LoBW)&,,JW!Q2l)<he:L'd$XDkMN4\$3Op'g@tL+>;rC=2:<,G1SH
%VD).mcdtm2=&/?hjKA#M8!J]c%V*r+pM;cLim8Zj6KGGnHbicN69@d=#F5FT3f@-YAE4]XhfElOqa:85OA!E5"U3_62P_8tiXAVm
%(r%XU;1rbHM5D99EY=J73IG'U<"="-Fnke!:`j2,q!6Su$;`$d@cFEiL3kCP!dL&nLD:DDEJ9d)D46;3Mg2EDDt">e*Zu#ML)D?]
%,8B0KX-Z#(ddb-UkblX#TjTgc0IR&5JBHJt)F>-Fb!6b_:DY8E_K)A`i/"s<ggrb#_-:56_35OTN:-@^r1@noG]QB-'b!6I0LF!U
%O<U^Rf\i<JiHWa=2Df50.TRRaoKId=&-82=ZI_3JoYfR_.=k9Hq*[R]X^E+dK3:lcgn(F!W3E$/AZdQLo1Pe;<3LeC)*1J)OJ$<6
%EgkC\$d"Z*dh&&b53E5P%RD*[U`_#A(tn6B2C]-YajZ57Cr4W>1dR5+2Nh`Bbb(L&KVMpg&aJXT&eNN&N9^(Z>ZH0V(TH!tRJ/Cb
%!"><M#mhF^RLUkK(H"[<#)M:90gdONH4Eo4M\%:RH9[ECH-gA3ZhQ`Eaob$eWR`V+c\m!5G\-t;O['AH,7[m$L19+:MpJ=(NbT7/
%_1nn&cpSrSU%DrUQb$p3i:T_74"N`hiG^$-4B^1uLt\eRd+0sX4<LroPp"cuGZU+'*[$G,s.eo&0&"O8Jbfb4TkMiH5fCTb:itZ`
%jtoB`fdsm[N:/*TSmu3dBgiTfoE5`V#rR6Z)'H/]6imU@e]#%CnLY/kSRNB0p5>qsd"C+5YLi[62Y;'4#LjrP0OP16hfaYSMpQ.E
%ktR8;J:XpsFIH,0`)mi@=TU\pT?Ke2$opQur<Te#3/ApjM*M;5%65V.a1niX6.#Dp*P6kO9*eu2J!.nu@?)bW0TJ\9'KNSBRV(JN
%FT\90iH%;<9X)T`>m;&dkCF]M@6rChG\OtAd0.?Wo,&.I%5AM5Z7>,peCo;Uff$$KnVLX]GXs2Qa4nc?fq-;m:d@N"<4->sCN!MR
%JeYX`?dPNH&4/\AM24OB#@CW&68okI_IGQU-j],NerJ^8[#.*VbE/&bSe3S=W23.(XlG<F^<dl`%!-)g'"#Kl0J1*@m-"MiS1q+@
%X:9LDad@T@d(DB1E^CS#$5<k4Z5fK\Wl&SFYA_kc!mPP<>7h2L@tA)7*t4-CJ=pJb`ds2^1u=gS8pnN3FOsPi@B+Yqc)%YU8J=ZP
%@UO_QDB9X`c?k1u/J3YJkWPku*d;i[jQ&J:gHgG.#TN"3gYr3f,fi&gF=%Q`C5MCE2VgVG'Z;6j--;'1-ULL\8A.Hd#n'3("=M7=
%bnpT4_;`<M(Oskgcf.m`gD>759H>f-EUOW<1Mk`I6A6B=)5I<c1m<kPZn0D[,SIABEOs]d\a0oP+q/c9`ItsHD'$MZJ`mG?%3[RY
%1n-.XW,=Yr<kkN4d22nYX\1VK)cF6cm:#8j90iY4CeURsTW!cRR\`&WX?b#L+Z_/gSSLh(U7GiS3HYl861\J"&kO.X,RZD-7/[Cb
%3qqn[bqTo3KUP"BpJqqLiFoYP'3XQV,nY:i5n9=.[VcBrfjf"-Q)f.i'r#B=3,V,]U3K`G@h3efJTfjG/n7e]?gkr@=uGT>;+:u&
%:X]Tid5GZ(8e`H$b!\OM=4uRENEM+ijes"QiUs7MLA>8P7`\0>LQq)6#tRHo/:&E\U12pIeMN8?VorbJ-^$9Ys.uF0J<5JaOU/6I
%;j7X:Y]1*kU12clpnC0!Hje86O?>ls>WO]ZROYO>Wc5$(Fh[YAG@=C:#+ls*c?$2.5SP,Sp@Lg&S07S4<JsS>&q?;f#J&^</8iPM
%\s,A%;ol!>Fb2j3jWI0!(\\d]&C!$c]0c'J_IR\A]a,4XCEZ6;9!B&\Q(1A:,=HXKPU87?@=qu+=0=ID:_Y[F\sP\cFX/ARVFlQ1
%0Nap;&Eu/Xjf%,t<iil`_(ZX?7"qQu6rB]",<1oS'Ip-Q6'mS(G\gV_;/\cLf#J=:gAkk`W@e@J1nm=dRo67+jV@oML^'u9Y7eYt
%Tg'MRBi)ipJ7q^#+)+?gTZ_3%1+"b3`,g'X1%aNH)/&"WXGW$<(Q46Gin!K6=VXmaE4)1.4&4^'p3eteUh>f*cX.nrE+kq91iBd9
%G\P^4AI-tbb\&(;LhJSITFt4.@[Qu5a<_bFd!e-c99Sst]E9$n[Rt<9he0P8;).RJYD4JI'!/++l-\SOMC5KtN[b1O6br_HkR7j4
%4Z\F=@BErb7I!'K3M_G*'!9/M##j$64Uij9UC%0BWnBE[-da?5Jk$TFAYI#<d8?0%<ZLmOQ:ZRn*]N9W+4t32+":+Q#7<hF@X5N^
%oZP3Q<W#Gh]htQW5"8mI'H_*HJXJP`Sf"5IH2("L2kmPHr^M"]V2,JMZ7q>5:YVS,%h10-=Z-bW+^'g(i'W0a;sC!_LNdK,Y5!!:
%)\UU^b1+4KM4iaX#g_6l#_/1X@'G0Q2.L5e(Xl=0aW(d??59q8mpLGULQ[UHJUtpolI;Iu:-%1Q[8B?%;pihsN"4k'&WG*Ska1NB
%&)D&#e707?:LO_DB&V8p$3TMe'Gh26*$,c=F@OCA4GdlL%"7XZ3l#\akNGV@*L.0;)^l^pTr6!ELDkirijl]<GR=Ro_upl;-15/c
%nd\&"0gnN;]Hi=+9PBO6=$1s&J3:eK8>8./A[SI&Ss'N+/;)j@7r?K]Rlif5KOX-Pe'iLO?T^?ZYlVKo6f/e#l6$QeoBa&[B9no=
%P@8P?>]rd^.C:u[:<!"*!K,@5=`j8_VW9Za#^J'=0A]ot-NQ"M?qr5*^t'cf=a0r*&Ys2!5\M&r+q+SgTdr)-^a+Z2JTWD=UWt$@
%E[T9EAP2fSBaAZSaXT_PM7NtI1ZJ__GfYi6!B1k-1&41[kVhRr"OP#%N3r?>i6n9QHrndM;3_H%Pq*@Eh!*mDW>Lt_/X+q@0HBYY
%OA1oH6O,Ve69^uLRj8E'nS*\Y(1bue;tq+4VQKKX3.eReHtC[?nNg]QC(a<n:`(<BT!:e\S4kZG;6*og2F@Z<B]$T2d[GaTPA>r7
%.1JaJo0%21UDIDom;7k%L.RSZO"A;nnKGi\+R2QY$^2qo9%r=aKfmVDH&$O"A)Q-!KKXs3"rtO'3(aK@Z*,3;YA"Wm'Io.1&;8Z=
%Gh*JNo3hpK?nfpj!Wt*pn@H2+$((]-nhnh,0(J/)bnEhQLScL9"F1QMi#Bm5QK-Zs-tS'%BtGo'DJF8aLCiL9;^*``I)*WF:bE9X
%K#/7;7)RSRj:^R';Cr&lDZg_+Oo9hL9nR0$+!K;#a6O(9NM2`fbRc^k,7<\66K.b^JE'=G`1hHQ8%/eg)@6AK.:Wla]gZ]@b]Z6.
%rWL`g["hnj$l'E,;<5o&3JL*f-q,_&*m?g!M5faQRn'q3GqKJ`PduCYK1XWBr*bLhd`)Ym7%:AW9%3*`Ud5dB2h<uHdI707L1ACU
%J2Z7$K/\o8'LP88E=U`rKsC,*jZV_Wi?VH(0cRST="$XC3>IKf2_"J/L]\rU\WHUB*)e3_j\Rf=Jc<*fZ`$ht"_D9%MJMaA*pj`7
%]`b[LlX#6E@i-O`k(.<EE[hpW*`!3e9=_nj&5g[X`4H035+IT>>/^Q[1_qTT]<if%_o'L'K*m2g'2KpRJ/HdYks_?KH9C@NdWao\
%2SP^`P78,M+ep%iS:ElLdGtHZO,PJMa'X*!`52>N%\D+sh&6g%]"om8GW3G#gfkUQ!sJ7ubEn-I!>@kG#"Ar<H&eiE9Y)[18&Vni
%Z'\!>Pq[h%CmTrs$]dcIet!77Bt-25baHcO]eB]?NEW^`)#Qi5JsLY>8K3i3Dk,bY2`fm5lF+M^H8ug#ZUh-dEf3>@feXqo**[q?
%V&Mj"(FS-c[/fqT!&9%H=<5;_J>%guL$:W=Z8P\/`l76L*Z[BHV#khf-HD2l^X%_0$^@rKTRFb<aRQ7.S,qTW*UYbUc6$@B+C7TL
%PjlYWrd]j_1r,n@0"8b%;W;kN@k&=>RRG/A#s*0\c4l``H2pd]1c;fsir(T,9]tYm@/DkkOdCi>-BGM"@"Kq/Ya-G#A`=D6Ga4(?
%kn@NH"cFa?FSuP4&Hl1&&E!]0AI9W%km2RU@Ze_c#;<<Z+DAJCRHu=Fmc_aT)D";^e$q3m;`Jl@mngS4;qP8?LV^E9;*nJDFdU7u
%$L>i'RtR(3m*n^Z#&`@HBjacP3o5f6hXr:*/\,C=DU1(tS-1Ff\7f<"3)=ao2hsm/Ueml-B8]+\oY0RS2$@3Iq&prY+JQidgn"e)
%QLH*+640V!kQn"RJaaY%Z=C1Be9O>pSB#Dk#E>/?4Pn,Gn0Ef]oJISA#7@)C`*q;nL_YJ[iOQC.-m0iceMqW%P_(=#Ma6oPH$44"
%MX5R\D,DE\Gd:hb=O_U^C7Ie._d@]?)$OF;p'WA#2CWR"-`33f`!IKMKGCJ3;ElI@?JAmsihQZ4]t;cVDX*USPe8t]#$*!QNM2U3
%R:#ek.&<UFKkkt!Dkgb"M(OL>Htg+c*SXE+WX<5-7&Fg]lDLBaJSR<<7?<SgoL2Jio'ce9ihUWA<`Lj^;bJn1J]c^2BN.4-0?(+b
%Hed]Q`/F!oU]$ZDH9`.rRgAT=eJ*nGe$FNdW-B]+N3P"JA>U;lJoq5SpuRHLS3f7T;7N3+V0E*=#fN[2aY34[H,h]h9!G=IPT>jX
%R7>_*6)FFcX;WoM)+Cn$-6U%`'%c\ke$Tms)FN$i&lD1i'af3L7lTeU^N]567N.K"@l5<<O_DN`"R.h4=q\fX*a+pYHH,H6R0qW7
%g65khLes0X\B=_aRY'P\+$(/I)o6KrK*9*;#c&O-[f?L5%8=0H7N`n6-^'c)W0$47SQ?Q)lu`k0"a`i\;@"^,jLZ%Q0?)lCAY]Fm
%jbBf`Pb<WJ`\"!JNlJJ7_N1L5glQM(TsUu0DfV9^PLfg(ieuqo6m[P%.UC"DTVk\r+Tq$G%g-2[NIMU/U/bN#j6%f:')?@o(km'2
%Tb,!0F9A/.6IeIY(`2QQR4t)X_(u6(G[T%k.+>Cg&^h)FTXktU2H>F)Sh_=+%)oQ(+GjiXeto_soo[Z?$.[RT9/,:s-P"R8D$/!D
%*^'kbLdBN.+rE\Pj$=*=$q>)e;AbUk[+\uE\i-"!jP.4eBpm*10L@Ah%MA)JA3EOjL(B.Y,M-9h,p'kN/J[>$BuA=-"iTUE:J<#Q
%L`t7[:+ZKIA"\h,),ZUiD14'>l%VIeJkjg*J]cg'n.\]1?aPn=Vc'Pe`7D+o"=?SioRrK\?erN:N*UIK&o.?u!T(r,0be+e5`$SF
%HTXBr!3>,7S3O-A<@pfSAZ>;:89@8H9;'f\9!@C-2DCeYpR%5[#Y9bPoNHcF%SGkom?h:+)rn4RV+P]3[#/m[Te=51F0X:*I.e<@
%,p<TR$8`o3=^.#LCa0-]B+j2=BJkW]BR-S:JC:5HYUR6t:gCX79Scd$Ner=r0eTY-WYELlMlC[CASEMhgG:E]][Fr_H7=udGSP"!
%iB41^aX:mL##T$mig"1^]ZfJmiG'T8o.%Ec:e\NZ]r<b8CF`kUD2cZ=PUaXf4ZZI='atn8:Jdm60c5VPoE8dr:@T/QI]eLpPk(3:
%aTHGuL%N;T$t]1:o<5gr8$<s;N-U_9&a^;RnQZJ)3XSbWmBGk$d;oq]8,F,M9]N&#GX:*8%0`lR;%o.)K\;;0Klf/GE&1i)@i-/]
%O>\F8P:qq5^+6SGpjk;N3/?[L^jmE2`_K[]n<AS]/4SgaR#m;6[-HWrbJf):8dN@''N?maB$W8pd+_k6aO9%QMarmtbe^>h/9]m/
%B:Q+VTAqo".g"o)X#^q?'$'I`R5$mZVOP[^FBfle]kUK[Gk_lC86FkPK'i-N816X+6HGhgU*8UE(GF1#-IW>G_\@GZIRsj\Y6uAZ
%P_T;e:,\<BiS!EE+[hsW6HHB%oAC!@'JVQdp]=Z)0#Ml[[_kt#da))2V6U6b3df8Mccm$^flF[Qf.aH^hYMDioElXF7Kk:E%0tB2
%*pb.oBVEm&-`u16B^42fEUs^[dB&K9<oRQ&_(5bk`^#o`[`JKLe5&Rd21L:;q*YjT.:uga<WOoY-C7q93t7*,KVp6H)\CT%6Bboa
%G*G]MWgjDc[@?`Xp*eAQ(An\KJ$Vk>5kn+![4Ss&VHF]+:g8JB9e9cEJ^EW8%>H1C.S-1h[^jdW)*Q_oeATHR5+..dOgIbX6(s`>
%=2mrC]]-hBB/035178C-QbuJ&(?QFNMiA4\[DK+<j8[J"URPUQmlYX20A+tQn2pQ&ZN*9/=i,U<*BnWYMOodP:j'8TMO2_!,8-3e
%`;DQ6LbVsn\qm&sHW*0K^C-Q1S)A]o]>B\V)Cn]X-Fd7g(R413q(093L*G#NAe<m&\2E;CbDj?TOZ(+.oc.76Arc9"JX%Y?%^;@c
%&o<iYA5lC(VU?2`WohGp6)$Z%.\u<tN-P^JD_OJd3d,fA)A[p"TB-Vc9UR8k'Z<g0b0f.Y;M_:peIUXf]nNn?mKRRRd.\#e%Y;+X
%.?Ko9MYgu.k<dsOMcGg!))a7iNJLL^5N$r6EUR*tmC[h>*!9n1X,Z/Q7f6qodRsVk3T#uEJI6*^f#-d8JAOcT8A%#b6.,.9.Q?C/
%6fb[P'U"Am$MC3hF80n=KM"m-"bg\@h&B45DKNii61OAo\E0ll(P*niSNp1\je,<-&:RE4fh"nnQd^mJ<JQWPnYMQ"M!1_i)ZeJf
%q7-fSLY(oE2lZ67Xg(DTW[P;t<)BNjdN)D5nHL;>OB*'"3Z;oj62.8,*HXk_G#AjLX"8\dW@1ULOsi-)&soX?^TA]G\5Wt?8glfQ
%-59cg?1"M&A;m.#KnlY^]J2l13J2Q?YFq7,^rjV8kK?B_Uq"GZk9jM].c7mV,TKB?6:=$Nb"hT>R`\2+AV]I;R):YPm*OiKa0jV\
%.-jr5WSW<._^>J0&O2uSn1'mPP,_9M#ur?L<EEV':Ful-cXBCFkOFKnEE.d$N5nFf8gCX28oGtS:Z^aD<1SeaGUocX:p%h"Yc:Gk
%5m;gS)V$Q*(N1m';Bak`6;'W)Xi79r[$&>9)3-emp7p0'^?/CZ-mY#sH.6.oaa"`6M!6mZ,ZG`g',jWsNOfrb0ZM;'K#@K6i\Q'6
%MG$aS&df,PD_c?\_T(iVQt<9I:-rq@-dfGeMlMQ\M&K57l:kO.aduR4q8oAnn70TbSthqqA/;'EMFpN3"bg\@h&B45'FeFV7>JFt
%AD1ce[0SUlkTm0C.STG#haNDF9Ynd,,pcATF-DIkT@`(DI\dY(9sln]Wi,E/'8k)r-fT,?#J?M&aKho2ZujfVcIBo!NpF9$K+_0T
%.r$XVNAm5tHc,+Y]-PZu;O>k.V5L%Y+@q+._C%%[U;q3ARYIj0,SX=(&rl4hW4L\Ud7BFiEIETqQ,_;ojs\[5Uq4IEh84Ptg:$P.
%B"X>9\DJ0:LsUgd$`ceg#oe^Dd@5g#iuP>#EK`iEg%5D(WU*=Xjkhf#QA,_RePs+=U?q@eB[WiS1h9cF;CBkFXqRb6XRNRV?4m=#
%2ArJ]2!M^5i<4o1eL#M_eZNkeT#SoIW&`(aAL&LCpl<BMOtjKRW1Zs]V)tjBiXJ@L.O6$5BPD.m_$&S`<caY\cq]>"eCBhqjA_6+
%-e',bpXY9llL:=l1LcJ-#pn)k5SIlbX<)L>Ch/KoEBT*'aOqE"GQa71F#IW7B/)9!)39_YTM@f[2(-b(RL?/dnd-74+W2>^0[]3$
%.PFrS*$4>k4]d#!/p#erqCEZK"KH08Da_XVR)_*&Ur*FcY*TRF8Mm.%"KL`9r2-qBLS-c$^*Jp_Sth=:7sO%8]\82*VV2siePl:S
%#u-2q[!FJuLG->X4W09LJ-lY6<4_+Y0&E6h(".t791S"O-Ks<nVK;6'ek2qBFbuqJ4;B.L5n[ah&I[%7kKCg7QE!59$!eq*KWY]`
%X5+JLN:A^,lgQ,Wc5<<)AM4psUTY8E?7t*Gm23BY05\a#l8fD%<1U*08LJ<sJj`BI\k_n/R``h(\dfhT;%h'*ZGZPS+t$_kXc9)!
%Kk`*n)c1`LgP-.fWUB!10$-AL6kei\TW5`s0JQ'1E_S>-W'f&IM+U,Lqa:a9U.3";7_K,%H7D/2YO7LZCZn?,7j#W(`qA%F.LB)'
%W$ZXmU:!NhKlgfsD&c9W(8lK-M@L`?Rq#3a]"ZToSVe&6KVHA[%XK[&LR4ZUZ+?c<&5Y^@#rJ@>_WjuW_a_Z@8LccKn#L_WJl+.2
%2\E-d-bm6i#3uiK0O7,sbn,c3\e'kc3i0EPOOApl;/]pd0'mj@Q(KVMNkSDR#hC."9&,Y-C[%dj:edd5,Ke;b[Z*\Z%X[Ap$r<mL
%&SOkkKrD#R0^g0C+U7:k7Ntl'.)&C^OskBF(=RE#QYL.9<)7)g-?L9j[F>ho3b6cOR[$ifl):7O9r0qSmc"[J<$AAW[WF@_@"Rgk
%C-:dE@j^l!]#N0"Sr+_C+:0h$93q,nVB+$)WcAYI9](P;9]%;LeR",&P2)"s3tl5@S`CD0bhT#&1[l]JSVsso]:,:KGESVP[M*=@
%gP+0&q1O_qOQ]D*g[U;*e%!MolgT%PjsG5A$#I-&\5l6i"bg\@h&FaaQiKikq,U<cM8>.HXqPJ8f*PF,<qtCt0b]Xab9QHmlAXsg
%r,edo`H7[7V:ldfePk/3$!i<hiB03$lV*nKA5'&#Tn5TgQ0u/bM`2JeWfV<rX/2N["qu)s>1[2L$tENOKM*k=h5MOI:ZshIhr`ZJ
%?&'l^4?KG+"I.8U!_qmiY^4g@Y`UYX`g*+45<bZH'4bpaUp@m3_(LWp3ubB[Z^A$3:dWhA1nj9QlB-V67T9XTPL+HHhpk\DZ=l>4
%2kSTBpg!s@P$0FXV>A^VRQ$u(0^5C9-hWu3`>pJ.k6.7#Ero?!'rHbmm21N0C31u*k87eE16[TU^6bP6'V4Hbg)C(C;u*s17H]8.
%)W^s\W08T\$'gg:$4><_]&SZ#hOm7OdY^Xi8)k%*kh`\@__11S;?Nl`.t,sI-rC85..]P:;frM@[^2@$'2V$G#rJ@@_Wkkp73c=?
%N2nuU<e*3M."3u%0p9,.TtB@HiiUt,Q](SNObBUl?p`8_\rh*O"sQV1,baEiYH+Y8A5IA/.MpE%W]FD)c<+U0'pTK5WH<&Fh<F]e
%Agc+LIdl3;P3Pf8$$@Ul<F9/I>)O[L(R(77e/a!9d8%^I;##8U881J8;sB9plDa^:J@a5""'TS?gYjNLh6G%+.Ok^'e#8;k\p/"Q
%U'g/)PZeD4D_4`WVA1+p87U]G5?_FYX%l*?6:0(Fr2Z+JHH-_>b_mo2!@8GN5SK#-X<)L?Ch/Ks0h&#+0_^PPUF9Zn:<)UA'JVCC
%7Ao053*/82#bec.PA"4Q7Faa37?+5Wod6j.AC%<Ur+&ZJpgPthq'f2=kb`_1&ZN0[<)BNjd_-6(LH--`A@t[Xn&$H3@O2jmFTPNB
%Q(I_Pbgb)Nm%BhEFGP6DdXfBmP+!-of#]PE>nKmrQ'[t:F=)IZ+;q8u&(\ftjXN;C*>K9gWH?1'?+`I[.\mfeQB&s(9[LI]Fba6p
%WW70eV(XkE9j2Z6m4$kN"mYS],5@i`<@\>'Y37,L=*.;^[?%&E3%*`i%^W<.Tq;TJfpM)_h[d)b=I`.,UrVHrF4<^3&mA&'#qZro
%O2M\i&j`6N#q[NN?;9N/MjD8A)6dYI:</^g[[GWXl):7O9r31]=q:-O]?*SaMV5G$OZJ=GoUJ0H<FoTZdj4"c?8>C`W/&9Ycu_1[
%`f>c<A2i&q#cO?;cV8(6)lupb)62.[T#PhFVkp)=68b%r\>G0C)!S#]FA/U/U%&=#FDk@3@6-b/)8h?6ZLkQ&U-p/umkEFt=Q=GT
%@q$n-MWm2'-1m`n'Da>_*d'8TA;m.#Q%oICO"kD@eF#U8[2_7DXjcfu-^^&_l)&tD.Sl]DPo!J^,SW/26I_KXaqHqAVXfp>jl+65
%=]49g!dZ@7R@A_I!nB--2kocr]Pb:%L`Q-4EQht3:8/&C-W!fO3V\TW3!A>+2]8mLnOn4@11H"\>f89HX,VpQWkB!@4dDY/d!%*k
%odUiaK+;%=SW(ff5QujV.c#)m(N3-E$>Dr8V5*Pb'6J.rh`7'EB?[kaQWX+$;c08#,Z3/-$XBi[QIhNFMqCTLU$i,Qd!&o@[@<nQ
%s.?uCmBnOVY541>s)>[p[=Q&ppB-<aagR9r)i,I?fg5t4'/q[-2i_'"Ljr3[0k]%:WjVPKo[u/+80T@ha4[L7Z`7W^Ra9H1cMXiY
%_NQuS'G["Kh>(>oDk9tGbH+%;%MHk&lic*g?2sU@:2g.tF;u6tdkT`5BCZ4r%[h`cg@]SJ`$ck;0ssZ][rB)upKK=5U`MiZi5Y,\
%jC8jM;06;kMU("W9#dtJW[@323hXdcqDsq./rRHH%s&X`LL)Xso*q'mCV$%[Yc%ciUHN\+$WJ(T?aY4>FDGe"Ri:ZH/F<LEHWs_Q
%enhK[AV&=p5L.mRWLHbnYd(b8_';bHI,$5E0.ct2%W-#Wd>cD1c];Lp:/:C@YrRRX=*:,`lCaUk53"mq$&cO#5o+$VVI=X]j`DMK
%=l&WDT[;*.$un*SZg/jN?d@h-R%=989&0)^%L#?"Y*jWeC('dZG/"?io5/eff@N#^X5"f&$EgI*_3n;sOIP'fTRkQ2lKtaX6c"#>
%e&(<jM"=FWHG,il[pX;+//WPY?(3rY`6Qi7;/P9@g$Y9[XW;S,C3j?)fBCrIf'YJ/G8LsMTRM91Q6)U/).a1o4'H)u[!$<,fG`mK
%fE&,@Y+mMZ4$K9lWL]RAF(TVE<)?='7K#E^/+-SBQ&/8&h@ln+XhuEkYrbB5FuMTL-o<tF+<A_HmW@OabP?Ml]42WNr>Fot\_6Aq
%F:V2biI9JJ2dpp89eYpl]/I7oP!&7r75ot!kfg@7dQd.rKfNaTH%F(?2ibpf;J"g33m)_%$GBb@k?Dmfe?AVYCkp6pdI/!b#H5(M
%^MNYgn^\0\IPmR#GhWtEG.=sWXZ;u>!h1Q,E#c1LUGnra@H2S5Q')orSO9DT^Zb&GZuJ2s2i]g\5DD0Z3R-a2nW<X\S0j-Cl"8Q%
%Z(e*g$ce0bgTN9`%W*1]d>d1GcOUAB:1f<Wff5R`r-gYu0B%0COc7+n*"Tl\2XS0E)V#VkQgK58N`Xs,U>%[Lnc>4cFk>$#j!d%\
%/6"^53u!(t<Hg]jL\GXU$SqG#S`hcjd4"X53M16+o#caGgoe50XE1ZtkoQMO_Ypdr1Wruam-)sk`8%NC[DT-&Dp@iL.4Xa/'[%r;
%5'o*.(>a5AAA>)2*)"JNL#jbjYrkH6Q8_""LT-i7k&Y-["Vn(6'.kU<\Z>-<b,2@<gACseno^$Cmf?o*DX=NUHP!*a59h/g`p@fk
%pWJtpGK.2An1t\QkP2kZQBTh;<NhB]:q,+RkaS5'`sG.:U0N!WgLSH]Zk\irjb+PJ[?YN@5s5R/+'hF[kO^M=V*hH0YWM\.B[0Np
%l1TBt+/Bh6k[I"R:]GNe3pO0`jQ)?p#6iEFe'3`.OC%5#:5$k_[o[djk(6P:G%nE>lg`L!":Vj_i'c-6e1$IP&%[^Nb[`j@4d-Tu
%;XHeNPblrYhn>'S)K_OsM6IB1fo7Tg!RC=9_BNZ"at_.oXjAT/YRqZDH:M"KD3prpF4V'Z#^_(8@:rCa4k_!R3<h5Pp)*Eq=B)/`
%8jq_*N2ht4*t'n24/!<r(R26F>mpe)kpM.\g[N9Ih$M8$=6R(._D3IhKXkAXc:[&;m<_8_BkR(2m>>rD;]hPmdpON^:'7,E$\q0'
%_X[6\YbA;DimGjVFm@996/<9@)3-lj17Y;AjJDN.mGrs_SL\\)0:\h)T%O5eTOXQT?][S1$(]/LTJH,6O$TCJ0Je!8J^<CG+b`aY
%eU^^hduTMaAn[9M67;=VW6B5QEKK-I74#-in@B4`_%4r]`.do`RYA7Jp)5_#G<lFQ-ZgR#K$(`e4pH.i_9Bjb_k'HSYYa^R>$$'a
%\tb0$)PiqNM6mX?o,E)t7+`odKLO.Ok]bI$O4]DuOk.,TBp>]^<]t6obZumC+ROhWUg6fbpX.$Sc7t]S[)]spiWdkIKT4:[`24+.
%:)7LSG=!\:/gt@WoPouO7)dba\,p]LCKlFp8/(bBb-hV",1o!,O27TJjb=2D6UB3D_S=UEABJo)E'0*;7\@Kl6Y3BgJ`;hXKNU-W
%6CU6mh@tO5-PQb7$PX^3bJWj8iI>Mup%a9p&+-XRDOI75MijaM0c3>cQZ4NH\ZgZA9ts(Fkr*rKG;)<D&dh#/mA#,7d6>7=O$SFT
%%:>GG;7/W!F308jFL&=Dh-)TAH"\55X3/U6kt,*"CHOr%eY8oH-t;_9NWPrp:`r<CJ>,/*!SOCdG!%74#CS$=NFr^fFHiTtNC;CL
%J3$+jeH^ghA-,A(B%:FHWiB]2qIGR7l9UQ&".f3lZTsAm'`fq4XMa'0O;t)\*"!P'^bI#hX<s_I8ZQ5_+\Fa<F-^eI[4XS`??4/n
%A8V)<Yq]?**@N>^+*oU;Fs>L,eXHi$^9(:*Wic"r':*q]g-q^1.%p:Z<l5\1-6DD8C/P16\B.Uj+fYcRf5CY3h4p#;.hLe*W]IBi
%<8tc5XL%3^>EW1i&`dV.<X<U5lkfs101S>UU=+q8bH\(ZDdt:q*Y$)jXm79iN+R,%E6Kt=LFFFV-D1\T$dBon63HXY1+EQoSCScq
%B]CDp3#IeE"J+$UXYun'[99`UerAAa'hhMn>6l?D/TX//`lY#n5RfTML3_k4MP9llIcpf*E=h+VLJ!V#-^npA;`cFtbU,D)Q0dZk
%3&]g0=N@QbX4hdk=S^tWoF5gSb/E'AbKY,F1aJ]j:"Ks1(hQsBLjC$*.8tN]B3*H(:J+LmXIg!hc>:pVL5sM<+1>\2N`4VTp,KV'
%!U'bn\"Z0uoYCt4<cfM0>QYeQolfIL*dl**N<smNibpW^nsk2tGoF,2c=pa:2kc0OQd.!ZmH.PHnDL5SE[ZVq'C/':gF#uTUZ0c:
%bO3ZP?p+kt8V(;LM%bpZTN/"F-[O.L(]H+mrZ!T!7LMI9eLHY2T&]q;Usa?OE+6YmYYXg]""5Y[.gp^a>7chP2Kf(c2uC""q!Ei5
%e+,6E:7OW?%fXVoY8h'im2$6;6,760oMI"k,nr.O=!u"R\D%%p-k>_d*k*Z"A63:Vk,15E$`K+[I(>o7/DWPh0>I:?+91u65J7![
%%tFN3hu3>b?N)7Tn#1$&[Jp*c(OuC]+91i>s6\p[^\l9iG^]P^a'\l::VXecJ,]!lnB51us%%.H]fol)"b)I[&EsX*4i0E*Z9UL)
%M3\.r[C#fqYh1"N(F!3J$2J)P14=m+XE&>P="^0R9f-\,UFL,d(!Gp%U+hpY8GV&,65<uY""9RCJbB`1#$Pb#crBYHTo#[#J.h/m
%&o,Wj+A>>!.egVH*R,d^W%HHT6nWpu]2#$WC6b'`0hr9]'j6=R5rjB2_-O]=*_a`n%RhOr]uRgN:bGR+E?WI8X#D&NpT-kNPYr4$
%<GEZZD8_>QFn.n4\=3IadNK<?:aeo$@uo=K`^c^hWSFdu\mi[cG#0q&7=_K3gNI$3Ou%ll@I6g+g#O0'BFqjEaBJPnGhL^UAM8-)
%f#ZN^>JjP,f"%lDYG>KAqliP@=P$J9XYoDK8MDQ=PhbcX=7n`:.lmBXJ5XI!.l?JR)pm(eX-f6W)keQh@G@4Z3h@M9U4Ftg%2BtX
%o,5%[,q6B.:::h;C?"^(Ptb;'@p:r@lX-YENG4nJ+I#P9W/Bh[hE0Z2Uti5s)W[r8V[uf,'f;oF4"/Z-=PI9X`O#2Beg!U\DVjaf
%.1]oWmJ2N<.s/'W7#?PaRa<5'(>hGu)`i<unA,.TDNh"8J?pa/W?g^74]"7p`-Oub?21&sC6Y'l0ubV'1n`X*(R2`N8Q!"ghh?rq
%\B];k6cPi78cdRo%M`RU<@^-_+j#M$!bhq]8g'*:+I>pp3qe.4W&SN=8%iYHY2]L?g?H7CE_1^.<?lMRq>)jjd'ct9c@'\!M2K6-
%1-B,_34miV$'?,FOLc);"hsb@!*ZYta<.4:CSoB4^0GL)Zg<3gTarcOn(UA1T.dm?SgJK&P\SO@f*2;O`$*%[*OAeeYso@"Zphp0
%>m5(#Gp?M09146]85S%I+d@9f2=&3`'kl+/U$^R&g?Ksg0^;Zu+nGH;TlR/%[T:YmbI8l"R8eXVaGo3nMB[6m^o.aA*N:HKK36Ge
%OB]I`9IMR.erSu(_`i&!@1+ok[^"a%Zpl!VPWuIP.sjRef1u\l?bNmD.S9$LO.@%XCkl$oN._Lo:99;f\:HcfV]IAC6j!MXhJdM(
%F4.CQHccTFcSuDLK46Z`92sEmolqoWY8qqS?.PlO-<06sf<6,k<)ROJhE'[h\Y>FbMonr(_gP!c)N#8#8Hb^6B.^VqODYboENp=e
%",DEF&]E2M)UqGVSen3O18QEj<_sFPBr+kO+5C?pPc!i>osjD7A0-'1Vk)69%9Fmc6HS4</q(RE2\8u*"21mORip4<pU,]joP!2*
%k$F')WC0e\[%0cgl4O:.aNGWaOFsPu<[qoELb!UHFqg<"3l83.iYVBUUBI"oQ9DnY&,ae%i1gikCBhOh99Z]>kRmZ[-7Q?LSIu#I
%fqQ9@>TCP\85KaQNfn<IdSh.#2Lo%jrfDi@$"Z^;(qhm=&Cel5AW(Ae"q/pk!liqP(QaLmjFdjdRau8DR@>=1ajkQh8b=W7:#>"I
%%Alb#r<%Jcp+[XWN:.mN`\:B7$V1:!W#0BtL`hF8)D$^Y+_[/kc(Y%L]8f]hZipVD/If[INR;(u+\pDMeIHlm7[Bg.iD_V!YO,p^
%LB]6[1njXI`>kq36;9%:UJhQH4GQ_j6.c5rbf:067n,%EH=k$4W"_Xh6)4a%M]SO%U2*8PDQfU$+B<7E*Q!7[3$W>?iL>e)$0ksp
%r#"MY@i;b?CqH(Y[pXSG%Rihm(VQK&Ht9qNmF>'^N)t;WJ9>O3"?sOG\\0[77Ie$eMIpWI>:N9(e6CZ"[W[Y.'XP0iU;$<UJr+k^
%/SJXlnoe6kKdA/9bsk:\GA87fSBn,g.IPGY@'f$>XZ*-a\)6c!h`r8po<$7UGml:Lnd0E,0DrW&BbDIu"NoT(LUf&)mC"V2dV75o
%MXI#^JWb$8Zl>J395Dc.Y0Gon8ESG_blZ$N54l:,Xikj*f>3[01h2<^lr.gN:6rfS/rXp#10=fpV[5_[PtkPEH(@aC!SQ)BC"_hX
%BBuPQp=g-SPCT.!5:mhWFr0jq+h-MG+UtI5m(M@4H(lo4S^-T&LA.L'4!!kG@/%sFf0,[5^4T3o(eWP:jn,12\fV:CW'jjt2='UC
%[,jXgh0(R5V`sR-L53E+*FV&G;KR8tNSgY_&Z2LG!\HMZk;`NOSMNU?*B?GMa9;Y2LD-d5Uc0C,W*E<:Ol-ouD]dX0$GU3+4d#JH
%jeSj=9Uqd1_V%#NpUJJV9IPU`&lbrkGdOO`T?fH]IKXKiVd8AtUBX\e3pCar\7\")!<;?Mm#_b<m#oMn.cPHaK0+sh5(hD-4#+_B
%nJJ4E`RE5s):E/1]7AHS-9.pD\[<;@Vu6)c@2TM-F'B4L#p#QdoW#N/7lPmA9VJr(ch-l[5%-R)MD'A/["i1gMgJq`Q>`B0,</YL
%neb`Ql!sWYhEQ7k5p$"h\9<ag":G2=I.%,Rf,,e3KLg+g#`c8]TYekg:d>?aRlkP_a!M/=j/gf1i,,Y([b,JYb4?=/ahA#`_ZAZ;
%&QZldYYdtI8CSG'W38Xs3Q^7!6AXo95R@#pW'.]g[kSS6&YA@e@A#a`ODQ6fjB_1Mo&Jj"9HUS5g52Na/O'Z<*3(=L:`Lh]H:c[`
%8V+W9!IsY"O2&=%[s@eg?iKSVDfUHrr#b;Zs5n8"FRb.TqM?3lEu`HRQf_//q]Cju(fUCPYCHR6`K"(si8_(lG)5&/ci)e./\qD#
%`,&&RYf[ZprSX%5s1U@qm3A&`r54BD4E;sWp%838+Z<MCm<.6FD&ZRj`P3.m6Ta)jW^FUmd^n2EEK=eu^PpfQ!,\cQ`-0Wjc(P"L
%Ys1B>m*#)lCbOrE9$an.U!Gr:/\l-Mf[+<#lda9M5Zj5Z$6mF^/tPT"co>MKgI!CV<PKWKn;*t+'3fo12H9N#@N53`)uJ)/Cd3_p
%ZYS0[Bhs%Z_o9V*ak>/bn?FfIn$H7\)Qr!B8\R>0*cR6K^3o\Oj3KCSj**`ch;=XXr;<!ZnrLQaq<*glGJ3\#dsq;ol_"1Oj'TS#
%pkSnGqd8.ns38;&Z/2[SR3o.o#_N(U+[O]V/1(Z%'*SR8pnruV3i&Ar/Ed<;M;lAuOmg(71Ap:,j8Zi@pT*&`ri9UY^YR>&C35D/
%%]qK%Xoj8)M+:YFMlbp*9pEV3P9b.1]JhifoZJTVmr*]`X1SAKHY)!_q8p;Ig\.iNhQ[%U@a3*2HhgJ;ft@7-ce9Ij/O03Yhu)i5
%Ue/f(Od1mZaBP^l)2kLHp^[s^;]?'6,:S2p3)=lm_U]c)NX'/c+(/E12CfpA*6\O%[((se3Q!F<2RSnDCJ_US$u:(Iru]rP!PL[E
%_7;`X#3B8?5*,620s^:n$hX"-mho",(PN)EBERh4Q1uC>Hi*u95i%7ur-iV;0N4%M`[:id*0Tqr9%D<mpi0]K./&>TKg*Mb%=!2]
%AC7Gp2\fQYlka1K]#iD`18$$Ll&?:U!B-p>cV_7Z:[*],"UA+N_M:,IKc1)(ES](H(k_25Lm#(iaMnQe>!VR]Z4<T@%Y7L($GWgW
%bhSoo6gL\Q%>$2l_2.9'5\@k9M_Q:'3KZJPT1M/o@/[>Z$>Nt'\]\<"3I(@iW\kkp=dXR=[A[at4]>TddtdK;1'e9*N+/kU"763o
%!L#Qrihm*aNQp0Z').B=V$<D-/&_7C<N:/K;+:Zk`3.Ppo]Z^%Z7JGr2SbU+b<je2#5:"j03i>r)tn!!l<3t:[q\/N=+FEi>3[FD
%0lJ`cM@.XZTNYtH:-mn!9!79ph$kr<H8?.m`ccH>pJ[,1d;d)od4_tk]_`7lSN(AukSkBcXW@sMVL.;fmgBJ>Ie>bFdD@b%[=GA[
%R23["%pn$M[gj-Y4+pL!NP0B@fBCW!&+A<n9tG6"@k3EMS)d`uRQK0)mh[0i2AJapH?TW=8I$6k>bQSDRiI$\!1CVS"^`Bs9E>L-
%Y0d7YW>Js<f0ZYq9K[rY310L^BqJd,NC4a>?g=PKPUe%PCFHU+E,g*oFb)02qH(0B4#dpW*+V>%!(]p!;!*uRZuHOA<*9808>8?T
%/kuaF-8\d2I.s\7&Y.,]'`02Obg6Ce.SqCii;EWZ0u$0.6F\XU@j/5#dA+[$N?M]oM!=_)+/do/bW'kF*IT%<ac]T(6?`s&l!e?k
%Vh/a5QV$./O/GJ\Wcf'!"JVqgp'rS.ig(JGI77$(>=tU5/R5&@$TM?!8*$s`"%g@BXE2U*!q.WF`O1oaCARoJ*=_qn<SiR:3?S]\
%>i3mq9#J.Mol>`1h`>cf\?2,RFQPDo'"*&9T:10`dhJW3@L5/"9=r-U=$%cRYe45m(1(u6hFFP4q`Por=elst.GS4u:!JjZ'VBts
%&9OU;;'(8pN(p$N/)?7K>]55b"N3(T<^^mn&Li?mB^PXaE!opk^B[sNn=`,EKn_Eh6#B"6gNY[uAYLlT_CO"1^A09ANSkInT'YV[
%^m[C67/3tW2=Pj0;%B8pe;6<N\3NeTCLua]>.f>u@OtDSM%+!ek3OB7rV`bLkACQdTFO,2-t4Bg]XS*lF\m955^EchGBkk94<(6P
%G#Yas?8VQGEPn1+K.mPTrU#`i,OjgqBTdBEpntup9TrtNC'SRJ>.lDueVCu?g#ikBTC$V)NE]@/O(n(A:arsYQAJ(=X%<pqC,/IT
%pkN2%q@Bhg^u]gFq^C!niCrTtE$ATiba\oPU^<:a\+kiI.ISM:[=Nf)%^&pHbTkng7q@COE>b](<J!^rI;Qg$;EJ]J*$>%[;HKe8
%Gn5(_CpCiu+NYD`Jddh8#4FH(6VAP;P19em+?5>h-q]%NU;"so+h6.5#GOL"HFY?\D/Nd&FXhGt\&D3J`*A4>K%h9jLWFRPMF*E#
%#SeHSc=MCiX'A8RTn"C>TBqRrd@b\9ocAYI3^u#A,Rlq6)s#6O4*g]>RU[OcZE0-%8iGpLbXc-8LED[AmML1!2Ft%\DrjFI8*q(b
%aiYRG,2&*a,3U6GBLER^AG@@k]KJiX+;rC%cOoad$0kd[.(fZDh97f,d7,c[_r('.:aIh3Id>pGfd6_%GEKooJm4dt2>&mKMs#EJ
%mEpmE;FQa$ZM0lP^1KMZLK..i]H*qpqNeRdb$1umDW6Q:>>cjp]t+QF5&Q^Bl97Wt";IPlAg!J^M$%FKJecTn5ULJ,=%((Q?7-lM
%#c1WiC/AF,VE@S8Sk(gQ/r<aGKCYps,Y_/]")_BI3._3HcXjfY4HAMt^.n6Hjhk<inI;SuM=)Njl:(#LRoNG]o*kLH[6sN7jJ]E!
%q.l'o@0*DNBT^u-bIg0C(T;7`6E`^,;f,AGX&&T6gCb$76oks$ZE@NH-"!jSs2Lmd^]$=>[LN>]j8]p?6>Gb/GSSoG,,@^^3)g6Y
%$I^iZhOAMRCljhcUU(sRX$eH,N"mH2$/%@dmT$#k8U"D:hMWVnLjDHrpcRZ5<R_ROOGXL$K-?gV!a1A`B`,7E>")8.%MAloA$(@@
%[2u`-4BXRW-pjs8KJ1hKDcr4\:>ig<eV]$Pkgtk*oNK$F!8`Zsd)Q>e_(4k!LH[BlOoBW+obMKbA3M<Rd]$-$;1i!P[<%O</kC,s
%,iFk4)=SP*gZ*JLE2]T9L3O[kT_"?,'HlGp"GH(q1*9?^7P#31?UR6-#E+pb*Ju14SQ%$P1s:fTipL:ej=lPRXFdg7BN<,HQ"UXg
%pJ9OYec+"MVXe8$0ti/-A\(U4Xu/['cOPgXcu,+0F:IW#"@$T6&/peYYT.L>>p,;&ZUD-uDkKhPVcc86ps@EaDGl&:Lji2lL(OIJ
%J>"?PZ&LK9/e0iDe6Pc1o8tJ/7kHj`N"]X@7k#!De0bi9/7K@1UOs5R#q7`V&)^cVi<%Hc7ZRh`/g;I7p'$PE]7D],\5E>f13WqB
%W.R7\Uf&Kq%rBL7Z*6RBc>H:A+)@"J)TV$Amq@j<_?AQR&T?t(E\Z;rP7o]Gd*6EKIrYMtH6sNcll^m@*Ej-(+M=C;GYmAP)g/u:
%XFJbd\0rMAEN7_04fAZuS[t)^/qWcpfqcm8T9UT=3%p[ffr5]dJerjTX,PYbXq3<a,B4&?a*Y)ASYu=#;@Y"u6;'_AbE^OjaX!s2
%VBoOS<FkZWQ7/\n9qI2UnWXE!-75FV=)%f\f$2]4CW2'_RLmM#OUc-7nbH?(C0CqeR]1S$m?>Wu7>RlR$Wph:I1GR^kUbGDh%0[*
%euQ>%38rY++V-EK"'s[[-L*"b9>6;q^52QHO#puKG%.pMH$r(=.'QP`MXb:Z54>URR@^R^2\F?Df9_A2"tF55VUZK2bOmrJ)&pk^
%^>%bR^PN*VYU`(BNZ,J!B_CG87gajLg'aVXnTrV;:k0`l6a'IOp&SA]%/g[.7W$??3?h:"a%GtEWiC'ONMSicf+C1%ZL_t9#^1J*
%!>LZt_=\I=R>XBooAPl!TQ$i8$\@CmG^X\,ps(aL,@^qF'=hmdNY=;cpq0*K0[Y0^$Wr)hU6M#W47;l2kj?or^a(Go1t-VBaCtnt
%`g6Mj*7^PJ99NjV>WX,^cSKu%F*Zr<b2^=]M]0JhW[RTu-WHe22c3ne6)TGrCQXm\niC`Q9LP5AeD,OD/I`=X6sY\YRt\_>DX%k4
%i'[OoagIFs&L?sl.,%FHcN5_P)+Y3b+X/]e&Z'5uo-t)Y0&h/V:L4?M\?PngbHth7L$.[m\SZ1acXU)$\@j@co(jg;s730tYc;i]
%pM.!hK#OR;Y,sllY)dhEH+CZDZ-N:P8?#7^2''sb\Z""[Z>+G*6CV6s*.u7jT::9"\=nA.7SP5sQj@b&fpn_b.RoW2>Up5UT];'6
%G\M9]fr<M71Y?mUpo_n,%#;26n0@7\fKSLg&k0N7oF7aQnT[M(fd`%X0Um6XXH9D*j@s<"+JS0RFu81LpbHtY4$[d=dqCf7\r=:s
%D\?Y&C<H/2,P(]pA:en[YB,Nn)#;pHaqTn3"sM96I!pS]*thj9@UOpR:Ce6t$OB$@Cobb)J^1:l!e(n+JXjFg%\#_Zn9:$D-##TG
%GPH_o%&hMDr>5KQ@N8n>A<"+]X>;h4L'=RgFgQ+I:+a,.D8_d7^K[_,%2!pIMORGh2WBJ`o5A8o1XZCkcSe'kQSbGa4'J?V(EI$=
%;@WLgeOif.H#KA"2rfXk>?:t,>adN`7I`-Z>>a$,Tj93Q,\idkR1t'N4<YR<b0^GV+\(K=oY-tp+U52Ab`4lRkj%Aai9;F]OJP=o
%8.K5"E1fkQUP3K*mgr:G=S<5uVQ"S(E1fkQUP3K*lO_8iR@U-%N1fm_WP\h/Rm(#c7b8.-H-e#M?)h'_::7/<%t\7<oM*[poFOFT
%lk#oV:T5dKOJk%u-PT`u8W(04$.Ae%"_+t^'F2Z\3qU"B];'2i2`>ONo!t)WmG,el(!2:pJUQ<l4"Bh@>oZ6ldI8,BGF<LAca2a1
%$''?b+qn:pB&Et!Y4o22Ggs#uJf)0@*bWFu(m(b0J9\$_F)f-?'!'h:^he5aR`\+k]/Etri0*Mihl9"q9Z5=+eKHCWfn9Z$Of_oB
%XVB=mK'hEXiH],Y=]8+;pn[p)_\Rk(M?Fd2_C1MQ('_-tVb'cI!Q8l?NiS,*+@d5eUbIA:P\4Cb:^P<-ZN@\Yge!SWTX@*W,Aut-
%JWRt<;gRbh6@qIt.k<mJ1P22T1Enp9YGUe\;>=qKoSFi#?e^eWLCWCQ+=Bc680[O)mpX?qL@r<cm1#SuVfG%'2E=]g__c5g?]!8>
%:3,qe,WTIM5/=V=8K6R\((KiU%:t-gF@S<8'bH?\PBem'"AI*3GA\?]`f>c'/IL[X;J%=Z^W3\7M7oH&ZOI\INY2"Ga<@j6=Jn&*
%(QE#Z`,]<c44lIdie4))0q++C*pS"0=.XZ_Z$D_d^;mhuH)$bLRj(FXC/kZBaF0QJl3'ZHZT$!>TBR[,.0XMjRHCj=BIbRcUG[;*
%5a__81Ta%J!a"N7&8qRu.LD_dlI=cOL>u]V3p11/\/JJT`%6]XM$I-k,QVqI_=D9Y<\:[lUI%&6D`he"Z@:q8E'RG5UfIZ9CJS!e
%]q"i5-aa7f^Kn%-$1kLK@[;_Kghtjl<EfN&W-RL0;.e"oA)Cpp1.5S_bTF#q]E"&,&P!ef0rUI6Y[klF$pP&e`/n@13t=eHp%S"D
%5)(,.JQ*+K'(C6-1f5HMER)AM$]0O6ccs;,Mcnrr#dh5Xee]l\AuT)t8k.-3/7QMOc.In(VI3H&Rn?RJM;07&j+F?E3$/WV3"Uqo
%.\HcA.+$5u,[mGQKIT4m@qc#"2ZZ2kOHPL@*q7Arq/o`Br>`3P4:5N>ampi[!!<GYCR2Jb=60lFW..U,=`cc/M)k?g3\-b6rL#/a
%[Grr2kC$L]_tW'^9PXl_XnFHQ8=#=e5t4H^nK94e+32TI0H)&s0m'Ma?/A\7O]`pCn--RHa;B]oak>u+:+*-=T\_hRd=lE;hmOh#
%A'Q4A.^L4Lo::X0e6<o:Y%:'ujQZ20B-&ne-Ga*ebT2tkP4Vht!JZN!*##r;gtB/f9A0'\qgg4:]!"90oY5;ahhu1fSMPm%RUh:_
%+RKkEh@]-]n1Wr*5'?j#\5$<kQAHcI3/pqpf/CKr@>R!(3PC7U0dFt65buDQFq0AJ0fcs-"G(@k%Bj@O(+]`'`.Lg2Q/CQFH=52m
%Sgqjp>Gm84?Do]Uqf0rI"tp>O+Ro3.:UI:L6:T_04,D#STpJJjIt^F^icsAf5q(YJU(>\>BqF/(dVD^CSqllA;CQ)_oZDqs;cre#
%s*mGe=?\AWOdItQs+er/'F$@D?VhN?)Sh6BJp[^83]Mbn9.qJ'9$8@-*`Tg`]AQ^NjbS.GJr0%V<Uksr4K.G!A7ndV_*r8-mGB4_
%U>6a)j.)68]`_K`1/!AZ'r)btfq*<'-&JTW"&CREAEKn4b9[oS@"=W0#Js)pY.m:!Rt.!\2CXofE3,tb#:jFM.GGm_eQi&?!g/X*
%fC7M5.eVGSW%tX0$790.-<*"3D3Cmi_2SA<OAQ7GS<6r_0m\JH6KFCog)7p1/?<5g%[,#+,s6E"^a"Z`[![\B\A]oS&3mPnJ=jE*
%f)hc:4nsbpp<31GnX*Es8pX%ea,F4,^7+Fs\+>JIJ(r)1XuqP3A&j9)EQ)^UU+JcMZr[k,!m(P<JBXotW@k5>/B_[*#!`I!%BKI2
%JcVkDg<TZT3/B%%HQ47STs9<5)-,0@aCZ:m/.c<An.J6H-FMU##XV^FW"5A5'.\n`5E&)DL^Y;IZV3F?WT$V'9"&",#057Okl]+[
%TEp6?3<>?Z0pS_q9ZAT`%Gi:/0n*Yq4^8V(!Mh)*5_jN>8/4!IXJ2$2&dlR'a\L+C(^/+W?qLK"C=++mpi3%`RYA3dU#M$^R%sGY
%h%iPPXNMrYTXtjtU!0$8J.S$@hg.kdNB/W[_]V?K@R(]I0L0`E,NPr9`<0to5nF`B;q-bI<lToRH-c`I.V^@um5Z[%W1fn=/YL']
%10OTQSnNcg$HM;)7[lhh,n[O^bDciH.t4I7C5@;(qASkUi?MH>Qs^Q*ea9.r$D*>6O9R,LL65@8B<MfF:qSS/14q=U*M%G-?<X5(
%[q)UeX=Z1`1\AI,8fM\5LXaI%3)g^&4_>3,%Itc]/.qju:lmcpMA9b-:9]9r7-Lr+m3t?Q+sM_2DZ'c-0AMBreH2\VCV>I<!OQD"
%.+f@#rF)Y[5tkQ-!ptOG.jf";BM51`Zq`-]ARKNm#oOL^+r6Xa)L`.2KY3S;?P*f2W#7b8VkMB2*o$fgarO`0j8^n8"N^^X?dJYu
%mI3Qb40Y_O&(Rj^eG#8KbZ*a^Kc%O`0T@mE(Y&T^+_&kFUT$a7+79//;6J-9M>cAGmNA;<?s5R`8Ufi)hMOj@;^Oog!hebYl^um9
%qPS95-UdD(9E.2G+@ND+Y(+KJ<FJE`%66/i+Ifa8fF]K]pGrdg1e<n'KO-qa4sEb:CU[7gOr5Ifm@!;8d^d)+4V@`VM,*6d]VM_6
%A0Xa/;V79"4[>R^T>!UW^C*>fR?suXJ>-QTK\'&Kld>B,/^C,fBS[j0M)c5Hr>Q%_a_.PV!;hQ`f#S^kJgL$lYtC2KA$Q+;GB9)C
%"BT*T)M@\FP%'KNj=gh]k9(p:n:2('_&n><LXT%WP<L1,=7X7FR*E0-_AWlH7rpm4I>[;a'-/m9)`VI"-:;/Ofa8jhe-K3P:kl3V
%hg3BhN=-#gV?o8\5>6%d#39h)2F:E<2enJ^R0JP<,'S$7L(2r3d#@H0YKT[LGq,rbhqH54Cf""ZNc2TrOa=a*m-pG;T1)YHT-WT5
%8nXBI@U987^\=RJ1KUDn"i;s@q=-89O-'i(6)Gn;PhY,M,ur-UOdO8lqXE"Wb`&-bEQB=2.?OA0l(s=ATM?=PN)ZC"9[)AH[NMn=
%np8:X)F7X'0Z&jcGIEjVomuuRS-?G4ERA0%<I_tS*p4Di7dp(o>+%g$HsS,#?$/[QCK)%L6qC/m)f8D_XG!m:cBdo?fU?g;MI'Al
%\@D:4rM?"gmB7<9!^/:(To,FD?J&4);aJUfnFf:Nc;dliGdgL*c.<a7Gc.!E>aN+2+HPMu,PsT.GAslCT`=q+]?(.`J)-Z&JGZrL
%X[\G,&ceZU/*2P$oOgVL;h:BJ#s8eC\P:I+5TI4s88/JX#'5O*O:@q8%7PEf9P&^;,mj3P"XT8@(C5FR+^KH9U/Z(n)cXX*??=VK
%1BO.oE2oq3.gM95Y.Um\H+en@SDU#-qr53\`ObKK.^<Xikp6Y>BtgWe1*"1ZB`Q-dZtcQqbE0gi)IrP0]#Mu=*OT;n,ou`(n*Rpn
%q8fLTXW*lQm@\A*HurmgG7ABq'1R345%1Bf@pJ;2'uSWo#H94F0Je@aK_@e@A:S:rWZ,p](tG6HjjZg;<E76*!gP6kGG8+Jfl\$4
%LO6X*Ier5G:`#1Hl?&B?9p9^!R96+'i-beAh..c\IXHQt9clSI.hcY90a`_48Ll*gOJCDO*cZ`))+8jG4NaSEkEk-!q%$8G\$Hhb
%'G_G_>BQ^A?n5Bb_$K]e"aLcW34804Lm?X1S&C\.'SN!=geDJbjP87LG(@e?(1*$PF]eOf?_=cW3C;NFeAhfQ]2>E!mMg72bRPl[
%rW@e>Seu[KO,`Y:qc/PM>.u_C9EcJI*[6Id;(o%R,A4B(57B(u_6s7JRR3n9;C,>b,22f7[9<#.X&d[Q,GMO6Nh_:ADdC('&?H,K
%joHSmX8?+F%%7@IVg7V8h?_W(KS?(#=<ICg%Or`[@-&0R]oP;Me9i[o-;:HFmr3j9cp>hm*\Ma7D_IqhgN3Z'<bgk<1E]d4RuD<n
%Wa"ZM=b51MJ;UahQnZMT"(NcE>-PF!"46I?9*_>hI%)j]ajIK>FJmIN;Af;e*$1CUB"`tl.^%clMA[]\e=ZdYG6.b?YltF(?9U%J
%]e)5[-=^>-JEaO)L(42+oP4kdJ3Sd6],8-Gaa"jp:ZI!TjmO_N?:Q'#U)o^7\W&`C2C*6GG:PBc4Ni!Zm$Nd@49OsL[Z[NOM)l)o
%'4jB&kr)$1I\o:Y8B"uSar_@FE1FtX=4m04Z-u`4EG4&pBXC>dT7pUrZNdCQd""Gg3crDe('U!=:BZ8J5B,g_K4#IB.%g^Tgd1E_
%%]H%p5Xt^q7Q<d;<#&OF$:pnAZf@,)3tp:GPhK:F60qK=1-eLT,#a61#44M%7c@FIF0X'UErdBM.I-2"AW*6,([b'_]HO7a-[hL>
%c+3C'@0feandSAc9TJ7LKKuhPT;`&</D`.*U1:Qb6B9@sk.uP\34'QX#S-q'&XoDA@*n.Qd!Ea:G@;t62=r:!pP`j=RGB;go_rk\
%f-:;'m)m]-Z"S.[g4bGA;=-BhpC-VdGi*GQUlo0)DF(_2b'+.9+Hb3IXcnnGAV4_T+WhSaR5/YeI)NftUsqq3L:0<C039$&.lfN'
%4gXR8>bH^8'Fei^U2gke/>*eYmC,`g:QOK8,MI$7%!Kk\7#`OVk!=n9-XS?cn?t^"2*S,$KgPa*6,8,neLm;9jR-G39&pC*!\8r\
%i9cRO-tn_j`?S8BCK%1lmAXak!iXM^-db>'&-gOdBO*+F=9s)0%f_12X![+Z&pF[h@_V0hTi+;MOa8dOP9i;^V^99\D#b)/\r*tl
%.n1!q$[ueT@X]6J,_BGR?J,l!JZ,D2]LC_n:]MhU<o;Os'b"Nc/2Q$aB:0%(LZ%=Qkn<0uCm1X8!72q"Wj\FNSaZj.%72S?J0$'-
%!',d&S_ABGR1eQ0PH"np$*%OQ.pI/KeOpoBZmN1;ks5gQ"3sYGNaZWYBV#d0*!L%(>Uj0uFd6_P2g%\G'&f.r\h]/V&^.2A'.cJi
%1]!e8Bpa^TBNd,YiQ9!QZkucd)S1n&QO&eS9F=g5aICO%j//`N:J0%;/(b'M`0SK(J5L?eBXEWra>t9'W#%SOB-Q\?@QsER.WW=u
%`2i-_Q$/jE@1cuL80<UgEUr\5BX\5'N+/.5]b_5/Q<oYldJ&9SE+WeYYR6Z;WOo7@En,V_23-FIj1$fniaP?n)&ObfIjsN/[7W$3
%di"9/,*iPO/J=^jMA(6t8sWH>Ddd=ZS^R"QQ,H3[B^8'/*h_8]8JGfD<"'hG=!5MNj)1WS%5E6L&4LnOn/h\L-]]K0Z9$Z1<gti?
%Na2][hV3T_mPU]TpsC3j&ei=e^sgV-PW;V95,IdpIstrCQ4J"5];2j5ObEg+TT,[HFaU)u.M++$@g?<NT#D3X+WMb?*3]8[qE7oU
%BY/hpg-NiV[8BY\'%mc(@M)(!(KtQg)FH8pe$Op]Eob0]4X85p@Y8C'+?M0Dqm9Wjngb\"g&dtm'VIcV6LI>2DfBL\[@1u`%CISl
%B9m0i@#NR%-3baq^nX_oH@T4fgnW`QN^I:a'3E!p7kMG7Njp.+@Q/,L-#26_e9k:)EYQhV3$K,Y-ePmc&$SP1po:!hXC@)hQ@<T-
%!"220IQ#,0[jO<aSN2tO;OJ:Y[q`NL($'mdTGUqlWK1Em`:C8,P[RR6Vq2,?8Vn>0)hpki=3tR1`YQNX&HcZO+==)8W)cL1NlIft
%@2RNOBWH5*Z[mi6C%E2"m=c,WpmH^+4.8!?@hOcNYbF2k7NBA,)cqVKh'iG"0Hd>2m?4ipG[;Yl.$LsE?U:)L54B0FF7@Pa_kmQ4
%Nl!"5gMqLE'26/:eUagibi2LY$WNo?mY#/I]aSl8E?a=$GX;X9MKT4I<%0!:5O)btbtJ-7RV>?ueFH,X$qip^86>8\"0W]<$u#R;
%%s^"<cV(4V7.`HLdr]5]j5dW5r@sLlieXijdm`+CqM'qN[@;iG!CejYd"a<Z50hPLT?6;4RdM$>pe`.(BP*mgPI1bE<)uV-9\:O1
%FVBS\A'T7gAe"#TSYKF2PG/_npnH5-rAY/9<)=@XLdje7Ld<9$JIJs?P5=hfk[@SZc(t_t"iW_WkgBLkSW%@sYo[!ns-C]<`*;:&
%&DiT'eA+I86\PLkona.d1[(OKaJ-&"0'Pc4&5t7F"-!)BmN@TZ)$i\`>Xgsc/_aR#IT'FebXaT6>Si]K?s`!eb1rT1+&GD8de"^:
%kDp"(GCm_S/COKm6e/t%JFoL9!4.6=1"fPM@@?tr9YU_I9G'ed#Jr4NjKf`80+`;7HOieeX*/b,Jg."2+7#VQSn?J:4_EN>hahfM
%;l`Qn=#R,4A7]1-A+j!6k+M#28(lCnV`3ko%d[#S9cmSb8DLCPS@(S+N:X@7L6PYS&b//%jU5'g(9G)%!;qMUa.t`WI9VbuhC_u]
%lXejI`b:/.I&Jb=OKoT''t7Dm15.aBgD1?PP-r?^$<DI\PU^Sq[caEi:P\:j'Hb+%#BH$5YSP(UmfJB0lhEBU8)MSYmuu*3aR\&_
%aWZqs4uqi\g^ZYW9&&.:dW1`P7W%d?DG>Y[Vn"O_G?sBdPa>D;qspjK<6TDFc(WGm7SA^W)fpX"b(.9Q*Ypg5]OC:I2.`<uZ7\PS
%FH3`_`m"TRVN+X-aT9UGDj03#29t*rkB1KfT0o4iiojn-jp"uAmdi]C%CNqm@+'A=bN.TW[SAH'."3$U&fKB.bmi9e9AA6ZA3QKs
%D8Ka[\nL^4,]n'e1#-3.*'>mnj_p^qJu7nKRW,s!H(,c\_5d,R]u+?]enHc#f<R6_4?I3Kg7Ds/^g*5ZZ+cIIF8PhcqWo=RSS!YD
%eNQ(X,h:o^,4+$"LCUJ1dE]+Q5@.N+#:Jidm,6*S__sTT8A`$;iAYFlh6m30(4C@6`9J^jbcYX(Sn0*;CDAC.Hf<#olqjZiSK3*I
%_TWdWH&;NCbO"/pjnq$KY+IeiXb`B9F8PhcFES^c^rEO`oCT9CpceV*WW/JSd9VNMFrmgABr8"f2f,&2*V85;^Wt-RX)XUL.N$ZH
%G+R7+B81f&7A!l:#jPuEW'%<1cEh7_gd"tMBXj[I8(GFL>Nec/Ea?'X\<C%gH$0K$*k0CSU%EL,(AEu_YL:lNFEVoKer=0c\;Au-
%<qGh'5"uM):em3)E9`r(4W<s$AdkeG_b)KOj8apODLm7FAc8u-C49oHT0o5SJ;`''M^,K8fJXj/!6/o7M:X8aa3@P8o!"pXXoZ,(
%3a^po*1!s;irQ?;[#$2-.7+`=^;[KjkKE!EM*<qE7%PaGo%;\Zi#J5p`FQN`D/.;`\r[Z\UNL=-kr;BH_LC2aPVtW>*1Xb)V6ip5
%T7TfiZA?[NTgT`Nb]]nXEgT)9%1;`MDQ!QuQG\aF(p#^:(L]9ZRt(PofM+V^o8$p`(uIAG$8f0*c_8Z:,+Z\rhOmIHEP'WV[_duk
%$eY0=%@`"`)=B:ZQANXpILoq)MOT8#KnW*<Rp:W+G[C#u)p-=ub\7]&^ULP5n^DpEL(b"!eS)@"^]F",TcGshN<G-#:8$a/[S2K,
%T4:uP#2Ae":B+,W9+A41XCKeo*%er,)QC'(N]J@B=<5`_fbh"QFILhI-Yo`s:JH?rmQ!r,#D@dZH"(:1h!bj\.n"[DCbK8U7(H6p
%L63U_,`+KgUsMYj7Dk"UpcG/,6BuI8n-6YMa_PsoVa/:$/h$"[QONHUCuYNcm(ol=XHd1h)C25.cr`Yc0d>9sdd?A[-RhrEXGtc&
%5"-J'M0OV("UT-fJCVq=WQGl`\Iq4PC(6N.E>gSp"HQq9-:p=cjoW)dnkE%VJIHq'6/2f9>jn(Y=[8%,?>so1I"ai?gtlC[KP,k"
%$860R1@JAHjrY,U(C1=temY=_%0\,OZ06jiQD9ni(rag.Z"sf@(`VE>=TM,/N>o2VWfeCJLe'Upoqj*GBYTPrd-.p`/=t>3\`M?'
%MPtT_poX-_ea<W3i(T\EKmn\Ko4]ksacJM>C1rBQpD%c_Ap.Or^IC]q4Z?GROG>]V6tG\fUK`4e'^.-0(9Z&aL$,7FgU1&Q\:Q!Y
%rOC-Td78<R/9R$B+0*ZRK)pP&W#9)J(o$bQQq"FHXIW^l7gn4GW'uR\IU![nd>*YYq+Yt<n;sa>$"S`O:d#E[)I:J]M02h#gI;iF
%mlMGq0%/1`-.p!4p8]*o].*(l<:hO[Q/haSGWp&O&^3ijW-:Y2-MC'Q?Mo[AHCn%o%2^[])M>s9Y2H;0<At@oBWmmeTnEad%O9KB
%MKk?C-28fOc"b+,/Z;P+,;JeXjZS2HnT_c-Ws7M!ngjeZf>[%[Y%_?LGOS!tGFcnGgE=%"">YNs&97H%RFnrP9Zu0U&K[uVKmhLo
%JZs'YU9q4[?4;5I.9'^57l"Vu2[mV%]]L#`A#';LHIR"X/<h\<Z@F&0YaBJ29bXa!%)q6qmRe<lP?(s<&9j@@'d9/eQdcdfrGZ^D
%W14$*iBbG<-;'H:88%-Q<g`'h=3%rnTl2FZLD878j+Z@<*j/`iFZ_5RC0@koki/;Y9id1$PP.*TYM,ofE.l+5af9q(12nYXNeQ_X
%%pT0(TGD[Ub>J6!)i:Y4_?EBH+/>8V;l*$9k=kn;Q?S,:aP%(u"Og>VMQ8m-'\%R\d_QMa28.$/\r;5b$scL>_GB+j)q4@>`]e0C
%ZGX*P'TL2O.%cp>O=]p;$mqk(Lt"[BpTS("$rC@X*(Fb=At)1h%0jRTAq_j]0OG\8#o?3q,jpH/QkfLb<Ke@E,nX\P`;2W?+t(OF
%LEJd;$Lul('GN>q09Mu@N9PDb[F%qS"gN?'Wr=J?#jA<C_\rZs"'Y;S+)'PQpWK,[=V$D1-0-E7?_%jk%C/&`X\$=:f6$S^;'.&Q
%*59Qu*YY6&E!N>=?\SHh'`4c3`JO@CY,I?e0G5H@;MK]FgfhDpM%"3@1)=D(k/K4$)hnM(:deb/(NC[?N+D:Q5O+AcQlfkbAga<=
%V_>CdVXDW[e1kpjgQon$;eTJYH49%:,Ts,l+IhIsPV;Q:Z^<4Nm*+^!A3\L/Jr(c!Dbm0Y*Bn+cI`_a-`GF):b*\ttgHhVXpDWIe
%nApdu`$O+V\6lYtmpY*k%kidC13,f;8Tl%$`<A;:KA/kkWE]?f=%UN"%E327@2+]fRS`c-UR%#P,L[Y'!:;An0AGl(IQ*mkRYJE-
%\o#N5RK]ffMiB(J'/n@=/$,ImoWrEpT0!fipB%`Y1jEG!@6_T9O4;lA.25l`'fc;#)QmIoAC)tr=,7d<Dm>)Z>Fiu#Aqb,hZbC2q
%l=6qmr^4=GeeL%,4Z512Th:?*::$bj@ON2VH>qMgRbUi)$TX;a#"GAE*-f2-bHBp19Lr8uEqIJt@ohf:3U<S8f?49XHGc;?8SNIT
%Su5T'hB#+#DK-V`/>S5nL*D=$\_TX?+'//MCjSOsqq(;(1S*.nbR8Gp[d3V"g^"_NA_U;@qC6gk`2[UHUhRg`,'N2:[kfF$+#C6=
%`cl=pdGoEL.7,LXfnZ6aI34i5osAPekg@6XkO>YMLL)a[D?E^W)aFt6rNpLGd%c::Su15tT7k[Y)'Q_0&KC&Uj53cf@4EWb1"E*(
%Jj4JGU5FQD6]^F-e<YgV[Yc30\#bpd;R`]XHoj6=;:9Z>8]@33WXMEgRPieFG`(m5j-;h%o(fQ.IG/>ipIJH)e7I"L7UB+b'Y!Z(
%$%265`cCs@Q7QqF@!rN&eH.Dg5*%*D68f>u<bCgm"`5.2"3@?g?R)9"9r-8Q>kb[=;:<Mues]D_a5A<`@,$"L'f:L/C+Co[)Ph+*
%ZV?!h5Iq,kY8X@<0;^Hpd!i5qfQ`Aa$:^c]KS2d<@[&:HH#mT<-g%?$/&='NHL4O(-`D2dA_1F`;M]'.0N"1g=RQ/S'kK*MWFd3*
%2aH`"$`RLd7FBdl]I5B<E&P!ba]!<A';;O/Ao^(G4a.h,JM8WJKal1]_Hict$q?A<*(m<7-Bs+?IZJcLCIunHphk+oo`t;?(>8ha
%$RcR%H6pY,-&:sk0o7beRD)%\;?h8,09c]#d3Y(A<VPFN&W1rfCKLeY@mFW>]]QG>7<^`NJKu$GS=_?JUG?kCC!Q2lJFjV=H5lnt
%CodC:$8V>5R>JNG=2fNWCTUI,NP_aFp\P&8R)k&f1`lIK<?+;$-N17TlJVqWqar-5<fS`DN)P9DM:PR;rZ1s*JHLdBnpE27T;4@G
%+XX@E2bS]f9tusX:%3"7mpX7gk`mIRR,n`S%bF][)R00RjVr:gOhsYa#W3_?3u"8K$\nn7b+*V97H8gG$Ai^1chJ5Gi.[*jiSe+L
%/nTc8!m3@h1LRNRK7m6C]`oCOaHGj_qD,?/3iSpH@ZD,o.f7ME\Gi^l[.]01Kf39dbA,O?eDrIEP*+H]?(42\'D*>Ho1(Pp[hhSq
%U.'sBWadYu@?Nh?,9EqXESaP%QBd0*&KK)*_pgA>V/q0D5HCq8,7,XiB^?)&Ln0TpGp\]Pg<"(9ikR+>RQQW`>>jaSMCbr2cDe.H
%;[g*(0P8[h8Mdl3/1[M`1!JY)J1<>H;Loh23)lY\]paJVEPX?5iq/S/\+f,,4OqKD[qP%5-&7r&&\4e(-M0Ks0]A>O<U]MW't,RE
%Z1XY"(>NS`1qk&5e0@0#En8@T$&2Y02;a4Qo+Stc!\^3WQet*R)=#Z(!GT$H_FlosIc7,ahAf-h3'2>bLn<lq]^`UD&u2k`CkYH\
%2Vc&`<e^^1A/7VOSn!7uH'Z*udTu:8%dE\jVYc25%oGhDKr)<^dXLlD"1=uJ\(Vfa\rl5tlF0-,gi\.f&*M&KF/Sg`+d,1sH0$1Q
%Wl^;PMO6Loq'VJc&L@2'+Z7=f:5J34CpA-Y*Sefh[K`IS^5A4rJ@&M(D8FC$XS1jVO]NF&%W2,[Ss;3WRcs(DEo,$ojt'!7O/jU)
%dDu+&WJ,-[B]4_Hl&Ei=IFSfRV5!^>_mjOZU>9b^XSRcA6NoN!HVZ4uURrYIjMV_V!,gUeRYe$&9CuoU=p6X/YOD4&_X"9%fHnMJ
%Md:@W*\I:D(\[-[]_?=9]t.nO:Lo83>_LUp,ucsWpB>)p\i[OL>bT6:(#p/h:#'9McBu4$LHSq%kVa<'1<`a$D6t#a&3+!`A>5^C
%]:^;^2ka+\\TG_B<bI,L$B5E1=JL=ZbouDhg+B#Q5"+#']q^)eoBK#AUYJQL9.)MP"uClmkd`RAg5.RO2q473VqZ)7.sTe7'LVFH
%0f"`#)e;j8qjrp6`#4c,/5=66k:R"IQI-.VTj56;IL@Q'B9teoBFJGVFi8?:3is&mPZj?g=(S-B11(_o2KBrqBCX.p+;38ubl6&f
%!qfDCTZh"^:$0*14%QdgZ'-`S=)K@/TG(\']3$3sapN11F'C]-'33P!&Y_fQBdHhg16rPSEWnLXfm+G80o,&LpC*$9cCiHoDG=b+
%GMC6I%WRR<JT?]I5<ajUa,&-<P6FQKIc:Ho5qf@^eBX;h%=@="Rdgi/SH6in]+Gi^2V.$lU6R3.B'luR3?UGbN-M?'%"muAb:uT[
%_",%t]$@3MK84(n?[G?-'C-l[`hhDL;E8bqTj0!L0%;W-H5ig>Jnbm&ZMMI,*WV">8O1t.l.oK63XjNkmSje0%PF$H?HYA,5O:\!
%hsWitc,4$%&iDpk*[Hu:I\I(h9k4p<og"Ukc)\gUiQls>kuX_M&X5MRHdM#i]`.ru;<#%G3d[)>EBiV`;SJ\laW:TTADO]sHXj-C
%HZ`7Ab*WfVqlQNM.<1Mmpj3-.PuOQ\)==m1NNp(YW::E9bCM>2!/K8;%*iM`'@J608rd*]!DTDdrbY];aTl.$`ct@63'$r_P4##9
%TrXZA<jL3f9e[/88smX2&E=la,58B$(88jd[jW1/'h#GuHl;!'K/Xg'50c!2IF^d7+btj&X$BR#,7,rQHI&i?SN"iqWs/<F$%WQ&
%!$cId$C)5\7YapGK!r.Pk7=WV_/E/E<nYh9YrARN(7eu-(71EA*!K?rSe'7f)^+@\?]!Gl;=>sEcnT,:,m'&cZ`^URY8=.1jIp)W
%pNZNM.9*h7:`C!8AHA&iSq9:_X?D.<E*5XHUne79S@%Jg#DbE$J9$MC_o-q)B0&7Y08_`&)-`n`Q0,$c;i2QpU\=r2VG!or3*Ng]
%V\X`C_bqb6<QpU6EpGE?&ud\@%W.>UDfZ<<kg@7+ni38]L$Z,q^eIa.oH>AA9Ale'0+6*.eqUiuj1[E>[ilpHCN=dbQfur9[jN]+
%&Ts[o/?GQVQi$C/k\/qu_D?Wr=W9^VB<kj:)d+8dCW,PfKUjHIDDXZE]9:HDm0Z![q"F$2b&h5C@Ro<q>`KR@UgI_n0tMWupf:MS
%CFD6SM4,^ROehOWBL[60Q2T^B$QUg^@h8\cibVae6_o,=!+$:u"TrL(_Guc4U*'5YEOdU6KJ&P6T2-8f2.Gs<XB0mumRs[q'(B@%
%Ju\RG@u;h"&i/m$oUDM[=$\4nd_t@>W!"<F9Z]i`C+hr/-Nbi)Pq'aVJ\\UH[E'W;&/MG.oY*Z]B@S07-OJ6:3L#u;6-g>F2VtTm
%I0t4DDq.;m^Bc=RH"?aK.&0Aa`sDq1=:Bk'&ZSaMR$1G%CR$fN-4eK3Od(NH<<8*PX+-$LdS-g!cR"a9op0\A3CoK=UF^F]KMWq#
%8[=lQ"IWSKW&bpY[<%ZP]U0Ki7;HYp;7un,!'n]5,W!Z907AtG:^%'"bHNCn1sp+%5R_(5,F#,t<@+@`iNua[!KLTh</S$'MH%1V
%9XmXXZCqI+=$>PL,2YGL_<$ejmA,aRC6Y)06*$.c'UdB$I$]rb=%)8*144==)*GW$!fO!JQ1Qk;mS9W$n7qJ!/7MM45nVGsB70N!
%#gtFiHR'bT8)[oqHgU=_F%"j,Z]rG2+\5gL8*",5)FYu];.UEUUUR-j\IB,I#goho$eTobFJ(n3AB!rJP+A!"-Kt,C;nl$;>sp)4
%Qk],=WM^"m?<#jc.$?qcgaO/dZ\RuX2#kdP^`?>Fa^^]//]ha=0NBd:heh71.*%1MVbHRa-s04(NT0WjIYBaAb.T2<84Jm;%HCR(
%?:85pJ)dH@-Xfa%C++'*efs-K/-Uh/[\5o1N0Zmr(f4\d:*#k4.]@"V2BjnMHj^RFn;./^7$6)I6Ru!ZP&420>sX1R1PM.q#u"2q
%9#tTLUWCIn`)@1l_Qbg(?SM0sg)IP/[JI7g(`iJC%P=e1feNYh(%3Y%O'Gg@b!&4?$hqhfmj%ed'.giG!-(\;fnZ\i4*Ps-ZBka6
%^.9fU2Gis%nXPI.4^&DPC5I8]c"OuE$])@'$$i`3"r>_jA:8r^_Mc(jjj.5p(qn8Ef]P"#=eXU3Un8DY1,[<;cM"m[,#fd+4V)Y3
%VkPu<OFIDPJg[K>e#(k+$E)+%SB/uP(2C.`Eo!^O6u-\:VTr]nYX5hB.=XDuqh+9^>%K#@[N-E*Rd8ekC.CEl0M#EirXbKU7!EdL
%HS8pXU(JX!(_s`6@a@3k0dfk;;c<8(b$?[jGq5D.bI4BFlV$mLM,h<0`Vo^mH>3kO\J9"3E(L'heet.lg;e4?NmBY1)nEYkc4o)\
%6XoP*Reemf[.);8`S2VQ^'nKcAWihAP_KJ=R6*&<IU\9TDWMKH"PU)"j**2^iOLO@^F_*/T+Sm@;KC\XOQ1WRQ2s?.dar*1qC6;h
%(9':1LUInS1.DZrkSI:Ech*-cat`0-MQBYhWM,TmHP5phQ1>2*ouTAkTmS?R@.D("!U$TtK@X/&OXa"k+Oh^$?dOfV8@9]kgh(uL
%<Ri$0_pch!?l+Wpa!?htpPr8qL!sSW8-?VW#%<pj!mF?W2^Sr?Ng2&(b`G1hd/?'9+TVfcBGs=FK3F?3M('.h4lAW?m\4B0qY\?B
%boGVjV^dFS@_t2PT)BLN'$lbbYhSD7U@WM-caj[6:kAJ%ZB9kf,?uUU&&JCq0MdIj1!)0oY5X"SO+Rjg0[NDO/-h[sfG,X4mSLMs
%7$+b).LH>Mie7FWc&*ciEMub20%)G1;I"Gl;K]j^>XXu=&J]icN9,cr`#@#@g2M(Npm*$5.EJ,YTgQ'(PZSZl'j)B+4kmCi+Xs2(
%9'XFj%il<3iuu=mEgLdmN'8;P&;R/B$AZ]t%c6\5F<-=jFb@/GONjE:>g7mBL!\CKLPFNk7Uf8c<*bC[XapA%jPUZc_ZIk,p5RSl
%XRh6&)_6Ji5b4FLioHdCMAE0_"KE/@q.CndI\rKuna43#?Wp.h.5i8Ib0%l$TE4kuK9[1BW.jKV_'_DMXeb)?TNB[>M#6l86hG5^
%eg:NjlA(7ZZ\cu-2oRU\Aa*-e^6C[gn\\iDUUbfQYKD\m)VlFZWmtm8Y.`b@i_F0bOIH>T/>Hn=][W58d&SQ0K1)(J5>4V@AXDNh
%8A!C]h,-ief@81f/g\HY:Ao?,2l."'r:$(BDs]Aa,siIef2.qRRaR6IM?!nNpgU'@$)(l=NX`K1A]P@$3%uUV3ZLB.#k/I,6uQsp
%ZsWBW"&2\(DJfqETrDuoqGi@M*WmBH4Jjj%43^k*\gJ5XK8Z$D[MLdJmVZu0'npC'23#,0F@=Xn;*pu=hf[2_BPiLVmAAm9##"V,
%g75>(eEsN<oC0cgN_,2\::#A?F8)A7K@?1l9H<nlN]u$rbc80/3.:hEVT]DRXkA#!o_re<<t1d+rH:u^T0t=,N^3SGa*J&@Jm?uq
%$Z]gdCJAJ'd%c.bnG*":Vu-7c5&Ib-f*BX,3JrmnZoQFio_m83DLKCVF7(0g[GL:S7sEAKC@M)TRoUi13(ZRVfS'TR-"pRWA.[S.
%bS/t0Kl=(AGYsV=C]KRJeSETm7?Wb%897[@`b*^?Y_CM1Ap$0NCPe:7?tAf-+D&^ARu!\+C/Em#Z=MB%@blQnnoP\SI@C2ZeO.be
%UXuF6WZ3W>^tI8`!V(<>!/VSu9fc69;)gqg"h0^.Y<gHq2/"Et-4710Xcc\%XNnq9.TtsYEsMB:,r%gB!](OE**=3B0#/!'3K'E4
%)[K6Fl%K7e/a?4\0!e6!+ZVauYu+XUX#*bg^.fPrlM>P+k+0S@IL#iI;"C^1#p`Khh1rf!gc%I!B<X;s/;WGP+iC+/kZ<tC5_0F[
%5g7i/;qiZUnH8GELre)s5_%udUBRJ!hAq.#\P]sk6ETbpAAg*lN!1BSp_gC:Ms/0lLB14^_)qV"?r[JEb5mOO<1o+[U",@-kT/rm
%`'!*t5(TL?[Ipg6.>EtJ0%`dmgSZ):oZOAEISE\s4_,ni!f\M,8fAboQro^"J0LrDM[6qHRTAU$FDj!3$R0s@=G929W9kU4"_D])
%]?#Ak#p_bf5-"&q769b*&<->S%;!q22:jUC2`D#DDmA'X4cEGFI5Q/?e8d6lgB:pb9HYPlh%Z(;I$taiG$+a?7KH@s70H$-((p>%
%dE9[RI>!>sO4[l#]6bVr-;aD6PZacm+_k%fV2J$M6[B4u@t:EuHHe9AaEfT.7Fk'2AD?s'GI["?[V/<u*u81$KYY6n"u5Ul&P26#
%"19]?9%5rMYh:4B_3InejlG?p.Zin53g=6?!I?.8kXeiC<4]G<TK!).kkdBA<M,p4>:``k.*>p/at`,U0D[+D?R!YZ)X(:cR%+7)
%PR0?Q%HKIP5sDDW&?c]7"R2,c;^YfoX+?h@)7X4-JeuACq*7/%oO3t/9[u200nXNK6A\eeihhTM>CuV*8^^^$rHKZ`CaY`/=fZ?)
%DsH)V`#6q(/,?a;Vh4u%!1sH#$M/$a12<3NX!a-6@:1'7[6D(5C^#gFKbM<t.hG'n(FTuqgA_=N5n0e@-?)2NkM.:1'$W9BXpg`B
%1?AO5lEaG_VsM0S?R@87H9L#aAZP+/"D<'IZYo/,rOVBj<8\K>S"V-N9Me?gl>Ds2R,f_JO,=#NqQCl6a/b^cnW5+:<&n1HF[RW^
%e^sZQ^[27?1&K(8-<3M%>YKo>bfUc)?>r/UH+7PQr56DHN6\0U#nGOMkc6qFX/ZMQE0-qNX:q:g'ou<U.gol5UXi/I*5Xt.Ma[3Z
%"f7HoCef&iT]7U'D%X9+N_\ZUJ6\2U+PaL+41tL[JlXng1C>c`QC[\";d49d^G1ZL-(;HZ3?\9SG%P!Zh6QKce3d`)H5:9\9kpj%
%hi@'D_2g\S_9ZYqJf0)/"7gK!Gti=sQ\3CG\IB`)p"SCQ%!X,qd2rih3S"%E*V'5-AQG(V:$B"qc=ah<lH<RrYmbP_+%u"VQ0Rso
%;L/++DhT][BCIIc_:df]8l,H4hl"mYUC_[l.]@(<Ig;;f-YF"TK&Pf#pR"XoM$t.J":`F-[YUVY7C(nT2=a*KGCduW;VXB<W!`\K
%L2PcC/h;VQq^U2&cfJQ;JXF#2_V@SCDa^0j"V12&32#1@+<#X[BnT.3:#76kfK_pk]G*GL,D&E'[MULPel+"5U[f/P\B@\ipqH,-
%!II,8roSO1a'WF.'.%7F)=+&jng%+4L5Ifp'^>uk:kHkpi#)M_j#J6ZgB*UIV0LP`Y#QF"&Y'^Mlbrqr;.n#/3i821l\a;QX94[,
%3;tNc9S7&_D,uILUCj2d21H*+>i_tsfRm^Zim!Ai*akcdGD8B&oBEmp',f2,EX>fHW>9i<Kcj*]R37FIgY+=W<$gK65fpY@eC,Ip
%:Fu`$Pj@JGVI5f%6m&>o6CbhM!Fq70oil7N3!=n*'fBY<FO)4;F0DU2W(FI2aQi's2"S1I0[3ON'2\Agj8c%Y,j#S&Ups^uQ>UGM
%*"WmL"oVDg[=F4_,K.:s<VdWZ:qL6`59$nr<@CWTP@J!#]F3GR05i8+.5dG9o"$,Um!*Pd2/kq)[(fOo[hs26gO;'8hA'ZnD^S-!
%ZR3/@'6KEOS84XEW964[l!1\2SEO7@<0E-#6kOhlceeq0A/8X4\9touAqE3bi(fXfTJ44hqjV"SE]$4qLG5<Gr8X1;X*bjT7eMRq
%\+2UA70>:ZT@nc()2;g7qd:`b3K5(H1,qO.;(#QDn*hqW,'shnKe"0?2BkcYlKO+_/06QmnolJt/IW16a*<OjlCZ`Jpm:jF,a=)C
%YsR<E,emhX>Q>h-aZq'9Z&am??RG^p#3D]5Cab5uM@]%oOK6F!m[J_QXT\jN>9R,GG:;PBXU&`.&I0s#q#DOnN5*mbZEg*8opm:t
%PUOGm&?L[AN?/'`(iFX/qQ)p)aB?O[;T(U(hLML?r(s58'N$]dhk6*S&:f(&gG:[!;*T1of+/Y48)jX?\0blj_M%X#-Gj(ZH%MIA
%8ikpH"9gF52B&7UMH)Ll*D2nGO'0\dq<J%BA1&Sb[tUdt5s>B`=@0kn6.+[Q0:I1;D2A:?JrkV?,Njpu?F]ksXsb9"Gpu$Dl[hC0
%nlEU8RN&t.>U!]_>(;;ELuO`O%S44^:Ckt(625+&R4jP,H<'0/1td;%j+m6U['eA!]6+o]Mg2;]":dAl),3rjnssFS[8%mAWXjn>
%8;1qe!A%JN;:Q"BDPQ`EU%?Oa`JeaaWY8RPqZ>dF1?t@U[qVO2itt:A<*uD1m\i<RFE6F5M$1MQ1TbP]'O2[(hCA_(o)QfE'eY_Y
%U,l;9">E:WhUF&de;mu=EEVeeGVhm=BG]YWZk6)2-(^*1q&K$KId(BpNkm9>%!lY_B/]E4aR+j7:GcXRjHu!hjHtjPI\?_mh"/!F
%ZJ.`J]HmUOREL*0#M!kph1,;"VZY`BU&-q>U"coTpm\r#=co)L@Rq7V4)2B<T`K#OQD>0TA8'rN.8Q\&9!Ok9FoT3Q^cE.lC\HE<
%_[GUY>5.bflTFP2F+p!0pYk=>]oQY\C?e9?Ll`u`o`_L/AS3'#6d]Yc%\B,SC#GDL<*_KX#L0LGH[eenL/ZP9I]"-2C:AE.eDG04
%&B5CB?#te8CB0]u&I"Ls_`5'Y4,a`Mb2-Q[Y>s4:7&[@Qr9'rF3q>]%;nK`\U_0kILFB5U(6H)EW3/m2dn+Z.-Zj.5GDIf`^@!!s
%WC>T(Ci=;jf.Tk9(6_LH5.0-,KGiU!]u0CaQkMnEP1%sqAN[s0Bb[IW[6JmDPg^[jN&#Tcp?3%7ZMq60.r6auR8;)!__.N_#8\hP
%)5QI9CU[s]M5h`MN]OB;'EhCn"&:6e.0miX"S3<MRl/q0j=Nh931(@U[?[hPZ/pLDS`U$6e]`StW6(uW!LG"t'lZ$kbbl5;;s.:$
%cFujHOG_e?Ya6V+PrYs3@>E"s9Zq>$19PR$UCB$f(UO(1A$?K'F/H,ta?M3.)(gPsZ\%ZLldWrqc#)/ZFD.>teZ9?hL!,:Z8eR>&
%TU@.dOc\b6a!)6!1JBig>qPUn9Z'O>"&hFK@t78(4P24;k7tpDKi97l'7b>.851N@`,%L"-g;H`!OO3-4(5`S>TR"JC%#SI0gUg"
%<9.BWMUm<p`Q4rl"!KdF.Bc/L?H!tl#kl\b4YeT&Fj,TS5[FNN(+<sMFJ,K!>063PW]NE08\lH8M4>]X*VmUiY\tGkh`)n"[YLh4
%dDY9G-b_o``=Fb=JBS""+kkV"[,%d'7YLUNBOl!9eT8Uaauteh%7k>Q@-`F@If'[PN/2NZP]Ka>1e(59,+s`\#9put5b,2]&TZA$
%A;&.HLTjVfNR<T#[4l#++QjT.%Ws9Y?B//-Wp:!;8!+di=8*6DQ93(p\\Ka'l;7ld5EGDEY(>W,Kh#K;iPAeWIgna%GDmu&r.G-o
%11b"U$V4$I9u.Bc5UL0t&8maO'_OUZ8VToKKbL0PLP'm`QS4_&B#uAR9BbKZKPHYd!o4;rK$4Ci7<K'Ba(tcA/JF^9(/;rWR65\`
%LW-;D$]A//RNm*Kdqr4Ge0+u$6Kd;Ffrl14B.]4PU-?X:9PF:<[g\7YcHk[@/hp%B4s73LE;^'3<>7"hXIh$7kJ=,>*SCi6:bdmB
%cuA,D5YLI6bXBR6h\K#`?)anD0LI;R*a;LDl$L6M-O0n1>bjUFLpoNIc%/45JY[MZ#_Qg1b6S:!WTZkEb5q-Je!Q'rjmE:"X`==[
%M>HuI5T^1rH%=Thm,\jrS3S`#&<TJ\n!:TXA"p1U"Gp;gU"P0Lj^F5)KObb16T1"Kf:+OhpF[Q_rjh:=c/#J+TU:!K^VD1tmQcII
%*PHuP/(>;3*krZdG-JgHOmPdAB04?MHX<k]d.CRIpq,W?3i<<PZ(^m(?*(QZ\OB%FDh@hQF^5o@[Z^-sb>es@LEnl6X;-mJU`+6N
%f=7Pnb-7SmR6JZV@$5]miUapE"$9D:n*P)D;?7uWcrMuC:&6",2A-+D7>S\npB$NT"Xf=0@[70sCoptOTQ:pQMKXQc$'p^/:Mpm,
%,[R3AK'(C@"iiG!XWi_=l(WaM!=[C6+rU_C64fu\!!4d]Wcq>*U($T)k1">+=Sc=1/CaV3!okq/^gI$7j6nW"D-h\]Q[eqnS*VRc
%s$ut0^\QVK?2WZn^.66D*1QWnV0USOreKMuqF#i'leh_;TeY^:HecDL#Pakgg^cU'!hs(DBL6fYYNhQMh1"idq0roHrK&X=7r%pW
%U(@:.O]i:l8o$T]s'UZ]\JG19M!Z82o\glM@Ol(rLtrs+58&>1`]p3^_`t6;l5.`1')N'V&K]?li?'selOCN@S!WgJ1W4ajob\du
%o\glmB%$pUL"KZ8H:7,')rbok8CM)h=5&9MqjdWrmHjJ$V@W]G+uVm/Q.RQDrr9I6]l1h[8<.MTbS.I'nfsUS:P^GU)aPU*h:N">
%>dc$""Ra2+)Ig%'5UleWce9[Rb4u8sjgMfJAX?^"s8*<H$?6u/)`\&e\bpr3NS'$7o]*]R'=mYW=SK8<3<$b\D/+P_N8"s0GoNp.
%rQCPr?@VluQaGlk`-4HDh;=XXr4GgEGtILD^X^(>YO@CcI+K<U*W=%9^]*JY5Q:?AO+6r.^]2hYn_a6pP3;eTp1+$lRsYk"QWL`U
%5P8;G#tiCa>jh6VqDOruWTA74r$T8*A]*phF?tE9)]^%#jB)2"J<kEU`UXW&>Q$M\*<5cp]3jCnoj9<Jjr]rf_3.;c%s'U+&l%4E
%8cS6tIs!gB?`\0mq%$9)H=:.ZD>Vq7DqP);BtX?#^&4f.CgR,'BC1bpQCn0=DgqCU;V)sV'-F>if[UW-EC[([I,GYF`?_Pc#rNaB
%-;(Zs/>4VD4Wq/t["C17n?/]CMPd,fXh``41o\pcE\^eRG&u8hD<nEV?(9!^2RSb1D7@mJ/u`uCY(I)(;H^O0IIA`"=*6Z&]Hu!Z
%da@rL+t&KuCn+_>7ZS<KSNH,;[^'Q@I3ErNf/-5L$W\Q-NB!X+"[uF&e*CM((-;<c1KKnM_L4M'&k.f]e!M<$hTlH@(Pl@<6E<)=
%]IbOjlR7uRp!H9T0qHXYeA(_@5H/6Lj-9FU#H_Q_TW#,lL8kO__bX1'a>*C%=J],XLpbtBF;+,&OI_lf]6JY_i9GssZ;E/c89\G=
%![1^TjsW2cMaFIipl9G12.qhXAMS@7EQHD\2Ec+d(h@>F+<&0*ZBg4OjfFRGQT&kR4UYnAeeV"dW$4\UEmB*"(%M)"`G!pldEBJc
%c/eS;&\(qo-[X^fmO/gjEHY!ag;.T^aM7nsmR@IBK+8./pi/%%_dOi\[m9W-%X"F>;bu8h^0+]8&(07NgPY^-!nK*gGsLQg]H4&G
%hg6JB(>b/#Tlb(mSQ;?TlT08,;!QF1N.H.Zek`URYt?b2B&Ru-#]Ti'TsB8hgSkf!3INJ*f#l1c#Af;LJ:<F\Y23=I4<;?-kZuQV
%quOk$0LG)#m@Bnr\k$F]1cJPF7<RPBTRK$NGk<`3E2)=YBtiSCg?4CUZ1bOe$>pR*n#t-6J^$q>$l@dS<c.WSZ9F/.\:P5BlqRDd
%l=N\eRG!C7&1V%3gJJ_s,AL*,!#Fi:qaqUaLk0QX12LMe)_4m0@tf5$FA-fQhU'[spi4A+X!d1e@Ke[$Qn_na&4;='dqB)TFd?Z$
%c&rS!eqA)*l*3r]a>fr3[sH?0=O%bM%NL-%q-)2LdD*tVW,aDLh]]h:4=is;1W42(df[!AM7Z(@GC5-rIHjdn=7J03KBkakB:qti
%VYW=d17KsMfc4eR3Hh'NPI7nfoG6YGTB);<Lpnq0IC\H$H5AD!3tHl;BjukMaU3#Eg>[kD<tk\fLj,:K&Q6i*&O[YHqmZgBX4Of*
%:WYR.5s)TLf'SWTpE^U=rE05.J1E=7*5&bTmJa3cE%-+JPY'`W1'n"a.?b%HIOp\qMO-krHX[UZ*$*C*Y"0rjn0W$S-'GH6-I.J?
%$40JgA0'dNFC(RkD'8U.'U@Sf!K:k9d'"i#'YQ.JT#t%g,#'XoUJhObLtj>RrmhRAUr29,_gsF7Nu"nG]u/eheMSEjG;LQ/&tn0G
%4u=Z.2oHtfo-g?)AiBI4JGNA#i^MJ64W]ZZK*C7*elQHRf@RL.a.n!Lq`m%A8G(A5'N/;C5&<[VK(eI%cR0q/:<qA#?./49>^_KX
%gsKBL8mK$ClUkH:2Y&?/dC4Th;5e]E5TJ$<?q'NGC(dRWcATcQoX`\.2?Ft]mWJQNk6iH/P;C0qQZTl)-V4M0CZW,q7'hbYLZGVr
%-KIthlhLGt4W9F@2Km>"`-+_64i`d=a-kZ9P?GsI8nbcs*u`=Z(K_U=4_iD',S8(@SG//Q/MN*&PBILCXuY+l8]s1:-m!C&bB?+R
%%Z.H<Z,\u4&&gT#rf95'U8pH@3j+g0$07!K[9GN'$;qcs0b2SB91P=LT0$`SUfs/h*_s#RA_YQ](;r:uQmf\R?R5*W5BO%"+0o:Q
%O='i17I)e'O(_@16h>gIe;LX[hVaen6kEi@4/.a\M#+0CT/k7,;(e\i]i663Rg%fp'ts;Lr]o^)DP.ktOMoAj<k!n,9P/l('-I%#
%MC+;%n1kM<d4"a9$%7"PW9l_!cg-D$DEZj#Fso5e5!7)$#uhs'E(=PH%H[nTWaSKd!MX@,#,HqR1G\,sf24&lo;WWoF,nph!3nQV
%gXCK]/\7W-MJ][[EH3uDc^!kQD/]U!XtPN<<XGL';hTouXTD[I+hV&RpXuV;m\1$%'Ib1jOi4Y5/D<-q=L)L)+V,d5Z?iN$b,XKu
%lR=-CBRs"G8JG5.`G63FdGIt=3C)PhIWT%],nKO<a(RMe(6MS(KKPrHK!siYQp7dUGGp\49b:eRAA$]lOBL,CT.QqC6U>9q[KtGj
%ZT\YVEnM\,BaurH0'N*,bcJL$.8>]$E@<ffB61GC<,+m"TEn>`#$L!,lQ-gtP!5hA;%[(#W*5E'&Cs]..Pnr2deku&69=;l4sif*
%F-CN$oY.&&118@tW#8taNC%=K)#.W\QmUJ#T#f:U37I2:8]<(!1TU=%+<X/hTLJ-(IK[f0O(grL.s_K+EspU`dDBt5>d01P<M`H@
%U#P+dUS?L&O;h6&4%BC>i:6b%.,OB=Uh&ENLhc!KqJ2g;7lM=kR)5,W8>Jkamt..b?*s_%B#$rT=fTEJ*U:BSN@:k)[\=$2_i52p
%<5T<YOdT.RMWfW4N>P-F)3("M+[P)NYTite9,2Sgg\:n?I<\LJV@Um'b05_UAd/to.S_Zn,E3hE$e.QXG/J^O4HE$@L3Qa&p:9<,
%Q$qc;;L!IB+e4["C5dF1C<Wm*o#sLq7Nk,VPD<H!Bd@N&>)spP>I7BTBZAb7)Mr%0"CrN#,gKfo80U&baFCgC2%Yq-lSQ/("T0s<
%c&'^Lb%lmLd"*lUO9+m^6V*u;Yup$ZYK?SIWte;Yr-#X=DdQW'q_UE0f!.s10'Pdd#pUPCR4'HBh..$MLWDbp[!/o%([H7X^r(_U
%[L+\B.Ml:SnLl:Xq%(e5Qt_MMjDi)g&W7Sj2[Zk7Z?hg897#lKbt@%A%"tUCG*aV8.hG/>"A(Etd;V\&pPGbCZS+$%:kE]iHk)[2
%Qh(dF\bqWi12uO8)g1d%#Yfeja=^6Jq8dGD>B9/uCd=/pS2^^<jG\4Er_X'T,(H=cP'\QJ[^.MKb%Z]YKIL\'&%5umKuP*0._uH(
%OJqu,/;oY]F:+E1^D+(jG!7p;qF'(31'`,C?tJHgf2GG-0='a[WHETSL[R;c"QttnI?MKdQSLWkTsIS,MlocX43P,mOaNqIC=VVV
%^HD'\+mtWe.7f6T1M<f_M2EQH(ULh]j\\#&)n\CVr[M;IDH-%'VOERGY%='d184FW/]`#"]40>Hh=ZYsg3o9sEX5!&dd>S6?<KA-
%:$@!o/IkY17&^FTdDD+6Ue%3lR?b_+?_p:rk)A*$bQu_F!^A3JR54AK$<U.?d^'Dke)qs<!T]pl@V0_-KM<kR/TQuuSR8-QV"mQj
%3P^oJ_e>)GLo;Dl""l(=KNfCOfK!@;TaMs8[Loi2c:F79TFM,?M&PNjaNS,;+b5F7\!D0L,^GIsD">g<bJZfI#9RsDR6Hs?d80uS
%3ZUIc1,Q>9\X^qRitt^*)']H!E=R&$`YQo'Z-,\K,tXC3AP`8hVV`d9ZF(c_Dm\,"jjP@Jo\7_J_SfgCe!/p;#oQ;i7qX+A0F_i)
%k7F$4MY`J!qIJ@Zg*qnooN2NkK$p2=8M8TWogoL%?[>iZB(gH)o?4J=$VSE,]dl5#$)r>>r<Z?"UMMI*CT)4RrMTD:&Fg;UEGq$<
%^X,H^6>sSi<PY'?rZj6iY*)RbZ=D@''Yf6kn>:@R<jr=&N'=e7XHdp\*LXPeeP/`:aY?iKSO5>C71!?l`aP?b2h:]l$*RGV,q2gV
%>K]Y]K81rlDTEsu%`o@5i9d4-Ui]\4eF!=TZtGOF580^>K%gKiQKfo.%FZXAC/3lF40?>I0ak_m'&]3L7WP:+6_PMX)`3it-M0Ks
%-m%>)r>LI4N3"Oui+L/__sA8!\1o:7F&@sM1X,E?*';=D0#f/@qOd`^R=YX>30l(.nkF`%#A+H3hFL[J7IN$i6jtAWdYS#a48R')
%U?$6@pDp1iaNt(@>p\gSdFH4'\iba)&+/&dZla)dGt:-%dh%U']gtnh!MZo8Kngh.*qXXiU]\<PFjNu92%8nGf@T66pCEG!5S@#2
%9<U$,QU-mmWes[.F.aC]n,Y+;$T]u,(piLX`C;-#-rCgr5]II;5Z'=iq:Z5b6+d1PJQWH:1]g'\Id1%p^gLSEl#(uGP-d1-H?_Z4
%bFmouFQ+S/=jWN^9;'-MEi@sFYOk5daM*WB0Y-@=F&3hgP*+Z[C.%:D9"drlPUHY"DJHSB`kqk)oto?CoI:bJT-VCBU3AnU,[&,5
%<AjFQ8r]0dRJBIKdUH;CD3e#A!A^)h[POBE6p3(o'(H'"c1\>"784i4?KcHB*b_KoC5=MZ/,]6S%Y^.@Q<.`I!r!8krWr=4dL<M-
%,WKpm3a0$_V\YkjY82m\b6uST5#AmHU[jb=i;rQfS`b68pO9VT^7Qu(GaaAm%sst3`B`K)Yb2#75&d`D!`Bc3/U\>*lUpE=6hK@r
%idX,i&<?4BS9Zs#5jXh`nUW<G3K79l(D=Ucl9;%q/lS39SJ'@W_8J3*.EFO&V?Cf;=-ar&ekUB]F#,YMFJ-gA:*[NG4WrYN9becu
%)\Hsi+0(.Z\"boA,ods,o(]gd7go(7G+YY4*\F.U]G'Q%r?DLcD9"<tB]!d(\,58(Sh6L%pkX`BQ(b2K>oD)<s4uP@m+RUIf?FKk
%5Fb:UX,q^m6[MH1$m]3k4RpL+**:;fcBX?S+7S0WCIKopbiDc(pYB\"TM_7`GOlP[P/1PE$4nc[r<R].ROT^WcTk8nL'!ufn/d_K
%T@^7V>U0/EeV(<S:H?N%MP)CXiL&?7OQ;UB<"V:!8)LK,bn43g4bc#c0gG(W#kr"<!9c]^S!$'Yhi#j<JC$Hi9S%"3O%YD7##[&1
%b8p$I*?q<->2+_;=VdPVnr"T1+4/_nUsQEL.eG14qWQf2Tc(eIm5`n0]qTO#(Lo7!cQS^n[l[b+K6`i]h9!NS!Oj-A&Lm>bXfONd
%56lKA)H4^MEFe.+/bWpiJ_1pDnV3Vcg/YWoV"eU+*+SZZG".SFqXFr<b)j[=[&akVB](>Af2dXXVYJ%J7a].CneFIPqfYIKnjEM!
%bU7Jfg;Mj4/bCJmW2$cnLS/m)W9^P16>T^t4Tis5@/(7:S]]26/'+X\G][m%Cl[JSlS2LaiC5XQq5Y;\/?!Y0=ijRJGLlha?hEG,
%"_QsklOT,&0;kX-$XHXakifRV:5<JNSPh/t)aBg%\E\AKG"NnuHlPBU:^"Xa];,<G(e"dSfQ7VC2g=Hsj8XX9U1%'aRD2SK]@'UP
%;T*/\$^:iEi"J9B.$*Sm$->=]9k[<,oTHInY6TBR'P2MjnO3`3`)BjCXUJ:k.,G/="ZhL.rH:[5kR7LbAe^C1YB3KA(d82s\VaM:
%7DttjPS'Ajq$,66rOE3?_()HnO]!';/E74Qg/LVFStgdmI`^6^5Xt9T\.,X*2n:3U*4D!\f<nMsC=<43'rN.U5$7o7#o^dcGR:-s
%QBa,1Qb4,j9moW:K-n]G[\D3"e&WB&l&A$%CX3`$=56f'/u38((?h3k"dPK5eVt_:-"\7uVui(Q*SXQrS*Kj;1XLV@4!$9G;-Ur-
%<!t$$'jGRMR?Y<``L[^m`X:$eHBU4R<tpWJU"c%@'Zjj=i'u,(1%)4jBKShan-r[8,bp'_MiXo:DD)*LhQ@-*a.278fIZtJSUei;
%li$/7a)7NSEr3H;ACIhQn\C5TVsauo8%1cLn1([m#+Tn2:r0D/J$\U:>/AgJNeWoS4"e3l%d*@E0nFZnOS-jS,%nLT,tAWP!eXN/
%_$eG!oa!%2"k&J`rbG`Sf=NhCXDTP36((6hjibASnCoUCIn/AFqm83XYP6!+hQh8H/#;4M'%t$O0-bg5iS2KT^BAWk<]3c$jl"T:
%dm1^N`^8U)OViS+3^e[ZQe$b/\$_3GcJ(o39^Rc_T521V7>9NFdSdZn<N[oj/.ao7.:iaa*WK<j0ga@1OMb"SDnGXUQB!4R#Y2$B
%h8mEKNu*,F-k8+/"D)?#UU,\>C34u&M_>M`mAEX1D/c5Xl<2"G>oTl$!0$U-?pfU-]/M]H;miT5O5:c`N+ZJOX*eCK\+U5FCVD:N
%JkKnZb<DJ2[YGs4DSsq]P!i=nVr;#PB]LNXP.Z_O,RH<Db28P'i#?,Xic`:C0Z9u,TQicF8ShbT(*R6&dMF$b[i]lX@lfd7=YT=s
%fHTt6_J()#82%]LKB,$0TEeh_;kAM/D`G6:($TNoKKT@kpXBW[1_Gf8Hp:8%JI5<Ogch*r?691gR&*Ud_8V0n`^D/,cL;h#2i)L!
%Cc&gIaW#nqZNqs0#)"8uT4pF0&OaWba_->j(C8H#@eQmA4nK!?b76`4,(6L1GT:CgC3!>h,](K58Z38\/T?s^Lmb$]gd$1&d"Wgk
%Bn3lTLF52UK/+ePgb"S,D>IK9@hh=k)C3A@[i<s9;:B7o6qWopQ(Eg0*jd=0Oun*M8]jn!;kS=k2<5f9=PlS(o.JRMAY`(3^\\Mh
%OOFmjprZDKKEf?UX3W&_.3pU^.r3A6p;I4]d4P$<-m8mGA]2._?^@i-i$!l&gAmmo?C`)ZNo"PB"#R;KAfHgA4@CO]IUb!]+:@D]
%1A1Q7DO;uoH&Nl[9RI=?'6oQ"_nq-"$K8'1e.Mk:i/idIfo_CmJtI=@qc[@VrDWF^6,?'RQ0esI=rVsGKUq*&%,Vk@9^OnUgfNFI
%i`T0W"eJBb:'T'\_NcOu@&DSe)u4l.I[g&m]Z8b^pRp0X&84UTa:g'9a9+RA'G%R+]S;mop8FqkH6XDDR*^qa?LW'WE6NF?,r3hG
%:`#roXt/`@r*!<PTT=E&qo+W7U+mO3e$H##NPa##'\0Oo_Bs\g6Yg%^.\GkhQ%(AWll"/0,5*,OT'm/Gr6\"<XMkm:eIF9VEoGCZ
%b+@PrFV881Xu5Rnq^G8a5;<W^qFY=5'*hi[#!Eb:SkmFZGV1l?;,bAn0+Y-gh7kc:S?o[aM1)B;r"AKic;0NCpqEc^gMiulTq$do
%_4VZh=:#C<^^SO%dfeH,i1b/$18)sif)tsa<8PB%BrEk_TNl>9W4=hO;fHjUl]19*7MD*smdf,fFamAS_q#r]4Rh:QP3(6\3!2>4
%qbV$j5^QP9"\ng%o;js>_/`M,TQZ,QXUF2MWWkU&Zl_>#_PU!1>L8VTmbC#Uk@gST<,0kD^m+).+fHLqk`Z%GBj5hflT65^P3HX^
%(rsd_%;7q)jTtXMgd)/Vr>i@E5^g9:$9<*6GOU-BLN^\HK!Gt\Aed0Ha1dk8!T"k/qWGhme\N?:A2S0\ci,)*j\S2/INlalc#A.a
%o_-VW5PM>AF6;9Dl:+`WN^XK@-2h"4>W7bFa>'(tFka&&k!&Y_MZ)reX%8p[l;jTh$hgEJVZA/,9*/1#=@(_=iDFfVC*qGt87`+F
%6\G7g/ZM?`hD\5`LK"9]np+-s%C^)M?q,b-L6PGB!l2A#,mC*c*o8/>[hR&X?S%qR?,%k3,VfZ[?"T32(6pgU0&bP$WU*\S#$i:2
%H?En/d1#<'SsAO?f'1QRFqTCseIAUN8_joG'@UZJ2Tp6e!",^S*O)%g5QGJ`YR-stLn,Hs:94Bf5a"<Zp)+!M5c`6P,!%$Nb(C[7
%L#Ejaoi9`(b-1:>rfXr<d++R[]*NdCMZbBIIQ=eA8<(P>FgLMm^!lp3#1M`i'^^(Y+BME.-]4S`rW2[f"(>^9]sn"*FNF4BD6_G\
%mVPrT?N[,Q3Nl*G_b&L<R*cF^D]W>S:A0R(AZ.KOKpj?Hkf<WU'tG96aM[7#-1RY$=obZ,TUJI&98Gc/dW'8sL9$0D2V?t:qE9Y.
%BEQ(U)<"i8Rj)r@A7QhrqGc_'@g:dOcgOR&jkf%7B[?R-rNY-r,D^+$IlX;n%<A(l_`e2rh+B:k$GhC7N(g>U`(o!$8YW77#e,6X
%TLT@od@S!Qn-5HlfM>DTX./sj4njrOF@-YaYj&Eegb@m;'X\"h-8q$5D<:NK2.JS;JCKgh.i^luH@]E)3f0J*d(qU9TFe^"K7N8,
%'YX9*gsAE5bq/.A`O!b,[,DR'PWrtk'Y<\"MOqGr]NJ>ZXq9`9VG<HC#Z81^?Kd^q*[OG^MP>W1%(aiqlLGBV<G[.#`Sp7X3.`X%
%VkWXQ>/Sr4eY]X6a4Uqc`q+!2fq0e!d!*D`m.3f-]G>)*F5WbP8fP?:BUSa9FL`6EU4KS<PTfXR0F;%:6)e`gg9-_^BLIB\s01&4
%FVq]qBicJ6pdYRm+3n;"eNLqLAq;"JQp(BD\Lq:7I5h[e+^X&WR)QS_E?uJ*\m6?PIBT7d<3A,`Psr?q&K8mR>2OJ>=VJI/H=op(
%ML8<O)uW[]G$aK\%e@;"KI9`teU0krngm;Tlc1kKF4e^r>L4(6s(uoSXJsp'HYrk)Ha%1;^M)^&I^D!cMbroJeYj;DJ6pb$D\mt'
%5^QiL[6MhTFkeDe=-(tAf5KN4.3'Ur53.fcrAY*_E,gYrdpmpk!d\BmY'StB`OFbVrm#6VE@[bn.,`qXK#aB>:@QI'1/[YG2(R=2
%IkC!0Q<qJW.lm)YLI6855#&*B4:5pbG'f(aZ!d$<BZ")=E_J"YXRsbQ&RIGrk^C!!$&<>=r[A&i11WqKhJePBa0g-h'(KMdlY!'_
%?AEIg1U0+]%O.5J`>Lt\LDtCoSW\Q\e@'W'G+$t]C/?<:LgN=sBNcn0r1"QOi,M#hctA^EjaG>bn[q0*OYrl_RLKDt^<gKf4ZY*<
%'<Su9Q34\Jp+qebb&>jUgZIfR[\"\L2)HeJ-l.pr[NmQdF:CVB-<h"l/J3^I3?1YqkUC2$<3l$K_#os44iGsD"J/o<G]rWM?HNjD
%NX:nD@uRo)JRRm@n1"'2m(eCD>g\g/`&F^XYR1!gN"!0(K%PXGK(a%)8SO?b5m#_PocNd]&p9$FQ-);<K&.cF?+_4lIan:Vi6N"C
%d-k^)FqADKa9\M&;T`r]LQ="u9u-l/.1^bBSlq4sC3Xu-U[uH]E<ib[I9.\9a@?84#$(1TR[_7@,9@]Q-U(dI%D2'Tap2)U?<IDk
%E*UZMjRPS/G7=*C8[tPl<"]i;)DiDPU.r!Th6lMEf#<7m"o@TC+q9,5W@u90A0E<'g@l%^SR&fqIMeW51h4'VL@`>,APBe'V+ZZ<
%0db&M$!XDEr&R./ko9F"Xt>Dmq4,!OEVX9E5Z+V*kTV)C!Kk'I6UBeBG,Nm\Y0X9R:^Mn@-lfoN!r69db:SrU[YPe?1C$\bWNO2p
%F-oX3#`8)?,eYkKWE<'In;!%=CJ@K_kU<6WZknL62/q6l@aJU?N2WU7DFK)')DMS,JoVGUUP$l=B'h=oP_?:L%Zg!ro#!4.lEHo^
%.A7d#W<m*cp(LeC;>Q(e-/+%Lb0'Z@6"B'R7&Dl2(5=&afsuq?#a2j#,71PAJ@s[m?se,pLPt#r7'erQ4nqD$A9F%bSgFUZ+%V8U
%qF7ih@C'f%MgI`elYPrT,o"<R7S'*dJ4^Y?d0^P47(hfYZUD-W5e8Y45?*/I"ChIdm0JYO+fiosZKH3@9sR<b:oA]`-CWXj]$06N
%+,1rajKQ=J(W6LU<DF]rZJ7)9Kb$$dg5f[WMLD%cfAk+UDCg%^G=@S^l?28`5p?kbcRQ2Uodu<*^*j?3![-r'!nAG)1Ui&F(8lPG
%'?+`eO@4IHMD*;__4*\3K'>saZ>Mb1hf.YmI1FTN#J:(hk(\F=*H\n^BLXeKS$Ia`J"tbr73aR+M;,$rZU>t*2F(FH6i9l;Dt@.T
%Lm)aVd!PeN\4Tl-+ni(2$'8mC;"4m<dR%1McJV*B;iBX7#PIAYQV)8;m4W<M7(VrPJdZbY0F!p!lICQ(qdF<cVU*`BC^2nV0631E
%*hmuJjJS's\AQD%AE7L@0kTqI`)*RDj:*m$jB?dha.$>MM3RfB?cCtf*<mdK(hiX@!M4L3L2E@r_D-HnZ8MS=Z8D_(`>@2u,7ee-
%Fu!%Mp78?3T!q1t"rtNu#i7P,70i9Td6t*Q.u5%'I$8ED,Iq0Y#*u&0//'ude+5YGhE`1UCuQ)Qm#.".l*leW);lpWa@7(nM!MI4
%iH1\Q^bAsb)i6;&iNb=<nF-Mda7(.E?GhaP4+jc:epeM'mnQ.hq,o<ack2/-9rnW4U(uP3o8`[eOkVd]?t\lNPpsfJqaqR0N0!0P
%"LbRtenZd'Og"_=$:@h-$b)!dMJZWGaE5j(iuH?LBP,lu>1mTf/&[J'7'#Ns7ft/_f/EJ"aa^C?+gd,-_4,*Q>t)Oe2R7XG-280k
%^M]jom\9)UnUXLMdlOSb@.Kr'<9,B27;pUSeB1;9=<VkM-=0-e3uSX#S_6QK$)`il2hY6%.X2W1U8o-``^X:<XV;l:Ka0G4LOQk1
%"hl[fFThFQD-_HJOB&pq?,\m%,G3B'$F)CfGR&QOd?o'"Ag8J1qQ]aKcm%<IY2UJc.L*>dOk4A!`M[r$4H@iq]FGGObI1(/6Z$+U
%WQ7fHMVc:PW0NFPYsMTm>;tbk8!DETR>h=fKpLR,>/dQ#9tZ@d@UL,oH+gXaI#8a..]qRHMq@p1A)#T3A[Q:=g.OkPi`5Ut?:CuD
%[#Gf0B5Z^/oXprukj6M_@e0&!m1#ah]F*N6X6;#;[]ttHCFdB%GX:eo0(',$&4^M?O!)H!<kO=F`2i)r]S]ngBH&J?cJ6@=k]o\;
%?>CGc5:9^ZD/U+l`N.ok]S`k$?lL&1]s^gdMDl_[i3&4XVUf"JMg1:l<O.22UoW]R\r'\]8/!MjY2"]2k]o[>e[_)(Qu_t(B0,-n
%'<PY$aU5NbJG!h+p"IRW.9JPjVRnn/0[UFIaf=+km%OJ=\I*QpX+45'>/,cu,<)kWHJVN;org0<iVU8_EE7;IAMk%3$!,GR/ne]=
%WRk1":VjnmFPN.d;LUfEc&5sA)H7Np.WQ3)U,UaTC8I\BXR]t9DSfEG]VD=fgrp'-S\W9,d=bQb.X7/[U8r7c`^X:<XVB+Ma790L
%Cr#hjIO.eP0Q$^Gp(t$<_inG)3)[/+SJ0T<Uq>C$341JL4`"E-e^gR?Z#`4/!UXT4]+=$]DQAueI=7T=j0%HXA^Fjb0-WM8alOF\
%MRA8(*nV=k)@_m6U3B@pGUr\%&[?k,<?u>-E.CI;@hmE$nZ<1\V^WEeD+=nc,3)LJEg#ETb9g"<G9iod<Qb#NAep2"K^>0FAFQWH
%);=H@!n[grE$E#Uq0N&:JbUKMMkqYsGXhHRT'K=NFap(IJg.1Ab\]<aCCPX?eF4M3]1n[O\*pa"^#%!POC:/m;V?dXrj[ar/q*6"
%B^+qC<q=qKF0/l3Y2+M-L1*3_<lm.b&1T7.]Ks@62te-8"HM$*&1Opg-i7+5+n.9V$ur=cJO%L2^3pb#?[g7p`drHaJX\R=-Amk)
%G%O"kgFBml#-*\MLBJ^nAr=U7!0,u(2MQZu"`gbfQTqcNOIE#m?R-k-MWC@L,TN+%<7,bQ+e'm"PGX'tC2190$(cf@eL,]IONZ+1
%<kP0uOf?Fa#O]#M%oh%t-DWi_XXucejdL4s^Ld0mRB1$G$cLnL9%eb"3Q,`Vpa5KnA_L/JFe<$8\+pI=Q1r0\+kPG>BIS=)9aF]g
%ACMeE5K%W,j/9V6JqB-rg>a->Sj`DJ'd<%2O>-?gUS#^BF/'G/pro_1":k]nA0AHgJ7",9?NXm&O]J=4ht$#/>QCorSpc!SL!?_H
%MYo3OHGsD*Zr`6l,?1=t8"3kk9*2XJ.>8K4eEruhTQ'j<(.)kBh1W.@/NZfOUOM]9*M.V*=P?c2AS27O+54PFFcZ'AISVhJ5J[r]
%!\]`<`<2NLe4D]sXE"`j!_V99fKf:$7Q`oj246/*Oc@A%=,S-bdq_,<)u/+(9bZ0O[0sPn"gD51*p#\,6d:HRf;Pr\bLlEUJR7[9
%WT^pAg.c_%;;+`EBB.dmd8"soW4!`U0AlboiT33207b`+5nnLAX[%b9a+9D0Gt],<Eki^j.`V323+BS8_npJaeTHUbT<@]kLr^#M
%rp<LbL3#eCqnqD=ObX$kp:Ne'Sbd-XhmDG,FuW9CfS!Muc$,W'4fi8j"$5N\oHQh0_,IXTp.r-#EhoQtqOB2>!u(5J;(ulb5RO6s
%JM<!";L%n$[u#K)?;DZN2M,9;Q@bqlbDu"aITXo3UoA.XEth[N$D8chfJ4IG#mq3i"o9@p4AJJi'q8ah6Z.f96-L7)kFr9(mWFO*
%[q("^6K$Pf'Y+7,O@=bbqeZ?R.dhZA*:'rVS'(Y0-G<G+^_Vo0od`C_DA!V=Ju8bmGa0UuSUq"GP@1Q2-Kb]^)cG;idKHcd2Im>A
%'DiED15"gko'./D#:Z?4.cTKrZMP3Y>NVQ%nHJEEMFiPM6VN%d^&^?`>6>qK9)+-d@XpQ4o]jLO)!T-]i4!t3M0S7q!tcIgF0bCr
%TR3TL!Pua>i@>%nWh+7OJV3f7b_e)?NY``![7hi,/54".;2jW9[mC=$>.ppJds<%;JadT4OtT"bN?*$LWCPW[2ZPSjb5dHPK;Q[6
%KYAoQ+U>YqOk`,m??eb,D@_lP@uJ!KAXlqjq>`=PV["M6Gs7HX]Z('k86Pe?SNI+60D+)G9=fC34-T$_0-TRqbUkK@\39?RA)\Jm
%"aOWE.Q49^6g:AJ2)*Dg'(Uk6.E//\crn#>p7.P3hN1PTQZ4Be.,jMB8\$1(X^"Wt`/%Zi;*TD4lB.k)8E/7T(E-EHEP2r#9LX%1
%RPKWWia/e<P^H_%6uls!0%^U?e%CE&Z?SYc:<X$76P?2qFJ9p%kUNn]NibK7BU1BlU9fH9VDRI%[M>KfP3KI59cRG)OV/**`dKZd
%0^^=bqncs;YQ\F,keEg)0d^.*i?/U!E;H@NLG^@@JUg_!Te]Oi=c\YH'tOCZk>@=1oEn<o@u+%0CHUg:OX1edo7$Ck3Ljg\#\)cD
%#Ttos[0,Aa0C]6YT-+Sn0,?h2*?o_;F.d$QgiS$H"uTdtou+n+gD]e>&-W*6L1;\9H?_mcSu!Dh\e)At%a>LfM2A>9^;R=5@2'E1
%D]&&M(").n!UE9nLC$:8P@VJr.XK\$Zq*_ZZS1+qMQ5PVT96eI65'A_>[5Ys'l'b6nm9,=Vo#kF2]9./*0LS&&dqVK`7L,o=/doM
%jJ<f04OO@TGHFGd=@IMNR?H[CZj!"^+6%'&kUO@44fI8t\beYLHEN0I$U,70"p&/"VTTY%`X_KC^^Tr<5<`4%^'/0>573u-=9Sed
%nskEc#YD+ri+YJY,j!otMf1m[r&salhV8YlJbGHVo%O4HKGjujkUoQ,LlaouR,]46]*Wl-Lu`oO^IljcZ`WIYZp>J?^aq2BVQ'bt
%Qu,Y#QFj_NrT`\E<RZALDtAg_1F4hY0>]MQiC13IahY(7A`2eIA7S1qAJ_>AfO#Z+Zs4=`@#F@R@=pUO?dP7IVus@h"]TTtX6Whg
%a01s"itKfp:V>l^P@KVu>r2/H)+Up[@[MRTYaL3Si%4i("V+k5,P\gQ.JIiT[B?"T"Zl.8<b8YP5d2g5Ws<a8^b`jDfE@g35)/2+
%I+i0;GjbF65-k+]JcrV`NO$+'jN8TQ5=>rXn.[X!kF:g/'o)-0J;>7\,(TgO'felroK)oQ_D<2FoMkrHL$P;+2U4+m7jUjA5TES!
%ea"P,?p@;P,p%BKdcKX7`WuC9`rKcgK&hDIWd$N.rlU\a90U`snlgec/q*,rhaWOhmRj5!Z.^i"hX0uTI+-nGpaVZNm+Vtb#`kVd
%A!T548FTJ:r$E[=ML=\l--D2BR@KLC<>NtmC(!KT9iD]<5XBCX%4^ot4k5"@T@pqO<VI)S^@V7R7J<i!e4Ek>Z\b4W].F&Lh-m2I
%HO_QiLHUG`s0otAUu5rQLH0'dR"qL4(,X!U5k+9.q]b:"GZA?p(dR07D-<qc8Zi4NWq(`L\jTH^##&?.&0r]k9]-SkfCuhfm(a0c
%L3hO.!]NX96Ue-30H7gYpDh-K<_Z":OC\4c)8%`^((;QO*65Y+HF72cl,l^H_Y_7O5"2Q5=ZtoN`\B8b\e&Ro3MCD=9Y#P<RNf7o
%]kL7CD,5M$rQ:'gCV#Moo3)n<rl%jT+DGp5Yegsr38\[G59.2`)/1%(oh^=>:');gZTge]1X=WQPsO&s(;.EbgT@F^&^+"*ArDOo
%8lrE1k%@cY[As*@5Mph-hk(4:2mN\m,PF>L:I,:uFL09^5=9>_+s(4nC<61:AB4aHohQ/>6\pV<*,jel$L[*k5qI@[PJkkiY)>HK
%_PE.)+1)U>UJ1WBr6GqA7lm3<?_M5gI%jVN@E+OZacp<F#D^3f*4:Qb]#q&DP't\OjE%g*[Vn2kk01-"jcO#,K?AW8?nHh;<e6XB
%n.983KT."u`YDZ;'FVQKV`rEP6-#^Q8rn165#Q#S1L`JGcNB6m"=n.e?4qMmA@<!o8qO6ATV)[oL0S-bChM<#/=`m6:sQ#'M3U,f
%&+Ra!2%84EU9=C^1T@=!#867.])qI=gZr.C56O>,O,S0p@KF0's87H<='Csm>sNZ$Os8&l=:_@tp^qpj'"=G0n`\EeII9mmFC=*K
%n/TMJR-S$2HrEl.1`/o0:#f3U_HYBOhS#`W.g]b."c7XASeJB0)GgFFY\Ch3cu]?hcu/.kio1cID,ahkC)3rp,\>&CKr\s,]J,lQ
%:7PiF3R-VBV!n'ZW@H%F</AE@'a5@or-uX9oL4fTD=eG@E<dhb"1@^MJH;)L5`9Sb$Aat5j;Yn'mZn?>m843D'&6;l,t#@VXFQR:
%WNu%TbnoSsm8+XF.Or57R3<f[DKQB6HjLM-&j0&B82LB@Q7/oV?oW$86/VBGO:AA/fa?"=^m+O*gh^N>ME'k=,9/6kI"oM\G4I\T
%i*!cJou!JfU`@*S>H$365UkZg@;pLUXV2Q9^>W#qNh6S%D-[]p8-9#K&6pMQ),Xi@oqK3Dbs=pYqM@b_"[$S._0CUm/gm2<E9kpq
%Mpi(-E\DMJ\Q)X>Tng;Ib#`C^q/\tfQ_&L%!c<6DT^,+m3VuOd%-JU\%F.9OQcMB8,tZ_2JFp0(.RGup.7j5k"iuOi,hPN[qF(gg
%M%S>BBeY,h#8@npY6VC)/>FQT3'4;C+\N":+?Xu#E>g;Ec6b"N#VjBYbS<phPsGC'*Y/6lM.?*^jEXEQa_5-(5ZXQ>M0t1cNpC?I
%:SIQfFT\V>-:OXKoeC,-mR#L:5%[8$Doe6G5'$qP%Ip8KT*o'GBS5O("<J1qDA!)S\-T-qRimINYYJna)eC%AON:!TlF.&2nWJJ2
%@`%a>Z(NaJ<3$Om+3=(@OdCG)g0Y$V'@C6JZ?,55]`m&Ff1p)DPnp6(aPA=?$d*/Q\[3977.:U8g!Pa84h^r(=)!!9+7s*kR6^<q
%I?Dt21<:cd#o[M]d&U*N<e!^%l@kA_m&uQ6*7cN"LT]03i0*4iC+;qk1QK)%Oer:nZlkKfbq(nroI)$*PU7iK6<p>n&)3po#Fo=^
%]I(fEQS9e#KP<^imATuHa41D>bLp)Eb;lLuFq.bm\%j<5LWnn5pH''3VOiC*L5S]djKIVkd]Ml_`:+QYr3b?'6E\<**@ud;PGHJ;
%6gR(q0-t?jbQ]-%YZG7PiDhO'F2GrdNEADp*O1-)JR5=Oa+BW9MaZ?FEI\%OQgucf;3B.]:f(UG_lll.CT&p;2K84FkHq^SH?bSB
%QU*O.4GJ:nn=[RW"@G.>+:]mKEi^?:HG.f12Th.`?ie=.1RZI+4s*&rLR4]_r`YnSKESWrRBdX\\h"(t$R.SJAMP=DTP\60J1]i@
%llAgI+bY$#>$IYKhaY0dq@kq><qVPUg.)h>>Ot:_-hp!q4\%Xk&&tN"fd5&H2=QLFQP=OAo"W*YUhh0;)Nc:GY;VpL4.*Z!G/du\
%'30Hg1`mF*m$fJ58i&ntXulmEn<$<`$&."jh`dW!ppI+#1Bdr!MD"$jh3qSZ#Whc";\#Od"?9r?F!rk:$BaSK8gI]i?ql#q!&Aa$
%4@57!#SPU,&5ep(m8oZP0YkIQVDceITW4O#q'SHKB8]Y!aG>19\3`1VZ#N=tRuF:i/:K_%phgu?IR3^C0\GVF6Z8Aj&UmW#.!l,T
%T/\omHn#S>iP_iNqf#t:NUQg.NpH:E*WaJc$;*k!/CZNQdm9/h_&alUAm^n[lfcWSbX4h.lKgssIGF't/#^*.ai,o_XB3<ap$oHU
%k?h`*p^J4bA?^,qh`Pr>o,^$&BoP!*hKE8-Ln7:>`q'cHht:11RqMQa1rBWK7n#>JN&TS3lCljNpVVKGj8(7<"\i\M(&5\d%bY]"
%@g@T2,^IYIKd*PTB)b-C<]LRX6fu_F<!MHGAn2E8(_PdGN0pVM,*O]&&/!(GB\CL<%&*-^*\F<8dH6K+F(Cr,BEcLeMHfPs=Dn>s
%,OGMN<qJ3YB*-IRC;#GjNOR3c2oS-HbMh8Oq\j[r%l2esKbI3oGeoEiHUMYmLX?(A-K]I)((nIR7BD@O*6]Z+P+:=R]ZQ9g'iO_X
%0:&4ZrW/V&3>las5GF;"I3_[#YZ-G%#kTHcR54?uKRm/,9CTml8:Cm>(@ZNo>,H9BMg_:!aX./\K.V_@K0C(&,?dAWPK[ut*(`e3
%>UVpZMj\/!=t"TB-H#EiB]O../pq%lm`6etIn9PS"MHe_$6JQ$r"06Hqp*SSkL3KJ?XEU/#J=rq&ed?SmfdTG^1]J,N/:+1Fi6X#
%3$TY/(U)WiaP=nVSXdt5ibrKp%MOqKQnHiCYuAMJJe1brP9:tdL.n@n<#l"E0J7XU9f+_]K8LO\f!l?$hrF;WhU#\QJsH3sV/)=Q
%\9\\)99Ko0o&MQkZ&-:--.L*J-&&h$?VD]c>*:3.''XHT,m.0^-R!khSJF"#gap)ABBa3`/+VE;Vii84J'GnM'LfHBT[K/L/jkYc
%Ttmaa%ef@mg"uqro##pGeN''8D":]WOq:Bm%O<\Ia\oMMJl%+r8:,Vc$qUm)kAo+3oa(`RebfDRHo[:+%SR'S@i<o=X]GC^dbA(`
%CsDpiP5aRdT=m?gN/@M7r#81IXo&L\jA5+hIpuG,XSO*:pH>Z%5_'g/O9[*4DDf]kEk=$sN,k3>@A[l0.d0,.\$cA.(;I:50N7![
%\q+a9G[[>UNK@U5`9!m5AnrAtGM'#8fQ'>]S+4S<QIf^QAucn_GM'#8&F7u&qMd]kZnpBI#%jnUATue/)'%&'XNeO8HC^E(fa:6k
%*Hl4o+_IURN?H<LY0t!;>NI9F_q&F=LKN!+>hX4afTsM#5/@%-2(G,mGM"JESrN6Br/Z#?)jA;[IjcnY@cr@9XkPr!_72bm8B;mu
%1Or[^r;?clHq9(;Bg%R(gVZnslbh.eoHN5hZ&P[?%K`tl$[@etSUYGs"'[[OWP;bNGF0gPKq`@HoI=jR47Zf_HNUTic]gAB\)8g^
%QG<[RgkWTA36+Ej\!OXR[@ii#A+qITmXdqG36&6pT;44tAehm1o_SDY8$jiQT/U#%OD:K?2BI":p_FilT&utc!=tds7hFj!rZA'.
%dfVZ`(A``uNgF!&]>J765>!8.^7j7mJsn!%1DaZ']ZTZH[@+b7,[f(X"6WuO7%7d@bZ&kQh-ir4TMJ,<:Mng"n17a55-\7g.D,h&
%/`A2Eh9loL/2:SBq69s;[9)lMG\[[^JZdh_JepdJ\$dp9<dPS=K"&1Wjrdg\.dDVkZupr.g8jua>heQD>B'1<g2bCA]aDT+VV51#
%$SH:uWTnucr,O5!%%hNWh,+on40!qH6NXW-fc;uo>5\]b!JoZ=RSdm8-6km3?`VsjZg?*K<+a7T40)=sBr9%4E2dl5c*Fbq%gu$4
%>#ArnKQ+/2WkGIo%_IVtYc["b6QHh1Y?`.#\N`2,\4C[EZ$Ung`V@arBpYLh$79SaHdW!58SR6pINX3lQgsW&fV@fbjaoqXM"a<C
%hu.?,-H22[#VB&ZE-OMQGDK^j?#0:#d\TG)<>28OO$N/05.9I/(!W]>$6kUu^"E$&]KWcI(aMdA>KFb#BQhn"p*DhB4Ub(=g5Zr<
%eAc+.1Mf4V?`STkB11KVg)d]4Vnqe0eU,sIm`*)pdtW+I9f4o<WB(qO,Mao7g/NEq1obj>4sJ:kVWu[.HLO@p2H=l)m]&AC'Zh&e
%-Ik::RT-Ue.N+C_;cWAh!\`DW8rVn&Vg@!pX'UE70-=AL<Xh8H^;fBj88;_=F<PMlp5O;*HJ#3L*A[?9_(L%VY`%mhYWISlSSZ,a
%YRB`((PDqn%X&9JV2JWL/p8P?Mk,),d_u\[=*1^je&;fh"C:BTJjgJ;$G?`hKDa"NJ:]CsQePeS(,<DQNMQ8eYm]i*kOLU!&"g2>
%fX:8#>)//EN#"^?1lK9Ud`9X--TeuubN#fH)<,2)rcGQI!_k&SC?A-YlsSVHP?i&o$JkaW7]M;Nm9N93]%Y2kWXS]arF@>?Q]GEN
%p[@'56Q`oqI)=AX`e"Z>8o_N8oA^P"]:_oB8XpU\Gj"a$,I).g(SAP-Gc+;b&U@CG&sb6^38Pr)?4t:?ot/Drn#dpY^/o4[opnHH
%-f+3jT>9Q3=,2Q:^.*>9JQ:Lgg4te!R7uV\.]Yi=[t([jr>ME%6FYt`IQ7?lG_u9&&.(]@fFm/70'ooP#9f/J!)EtX>XQ4<;gsdr
%$Jo?:\BtQ],pT)M+l3%,7rKXIFlFQKA&*QVefG9>m1HXt.gLSR^IMo?mg)S"kDCjIe\Hi=EL>8$qa2&-7F)];P&T7BAd)CXQJ]9W
%s(H(M(R[J8paZC1L%1ZGG7!=uKg4r3_NUMm)BbVZ&"]YLXFs!)Vr%P]]-J7#2Ol=L=k`5Ql&+/."7o!f?8C/+e<C+MGa!B,o*C(^
%XIqqL7<B^^K>G!`et3t.Xi_i(n\p(e6Fi(eLh;5>]UlHY)#W!'%-3WNfA9gu]1-mBAJ)BGg.C=P\g.2^@T:'OE&MZtPPirP^,6>;
%)rPEr#;_Qia^<#rTIKjm?>+R+MF\_O4=+/@Gl!@'4VuW?_pkn\9au-DPe04_$UPWhAp$)#UB+-u6>,`\+MC39koF@C^Epkd-$<b1
%Wp5q('c4gGTZh7cU*Q7L[qXTKVS&d;*\4HP,Xjs_K.#>Nf-]F%L4AKT&Bo%,T*-&tjrYo0r[9q5A",^pd`>jAJV\U#[lW[ah+09h
%;6Ad3ebZ_l(3su5Sj`<8jK/\S!BF#QB[V:V98B.t."?,M<D/VqM.pi>d&8rlmGj,Y(:;=LCXqQ4Edn49CMolDB)5ZZ7rSjik+8te
%Wl(RAfQ#jcr0IrFY)oLSHh97Wad-:GI#n9HFeD)bGN41AFl&5prMJJr<ips0;5F$\C'C0ahP4*hHIhuFp^CSZ3J?V:TXZd=\Q@NL
%Dp_G"\ZPVr+kd-[OA+2G*UZeZi3V:\Ve@$>W3(@ud624`I+J1q+!^71[J[grm:%e;fV<r9^haHlo(V@?Yp@>Fc`J0^lacPd#$+q/
%SuAu3CSigTDd@nfl4NJjfV>d-kEEiF.UKU?@]E',[o]sLO72?j0[Ol,@9V>4>[,_-n>>%$!:)QA-CE%ahE-gMPobDW4"UZJ1oL?8
%Zh,<0jla8DJb7kPkQN6CHG/>R]p3,IqZ1E-WM1It32$jF0Fch[UmY[^nSjPep5$*:Od,:EM:U5m9>#TR$;RNPi1a>Vn<fYXVX,$5
%pa7gKdMTXk2!9)i%fH\B;babLk]iQ\?/ECskdc-JTe:8:#7PgGZ2SK_:$bgRS,KW#hVVo.36/o/HkMSG6'e)*)NT4lkU6l!O\LQ'
%/H`jd-NU4O6pOs`;lH>T*'e9,>6MNW8;f<-EaI\D<"JpF`7Ai/SrBp.T"pXlS^KJ!adW2s;Uk$'fg5$`+Gr>'Pe`LiJ4U7O1ai3I
%*>B%Z^^G>;!oTfkYR+!cLRGJ(F%R."nO"rnh]t[>OSmspqacstZ`>%i[EBAcM%5+]H+ZF#/R/0-TGPXg->YkL@AO6Y$KU2_hu0@4
%n(s'&N,s42B),0QUWOQZ+u8jW_Y98JL)!,G^*a9nm&(9'O34jH(_<_>N>T:'VcW=]r=F-^<Kt(@=+GrK?g!X"lkXgYP):R9hGPJW
%F913>a9'rJk5mlC<BPDD+=e2Jm5X(GE8]i7L]#+X?jq6aa65at`/-E5>aQ`PSo=ma?j*YbI:9WR`WTmm&-FL$YN9%@GoWkZB@iD<
%ZVNr_?C=A]j>fA29BrG)(Vq<>4lf,tgN,m+.qqBZSeQW5"8U`rb1C5)HIp&C[E%F^2rLl;PBJp:/a5pb5U9_a_D2j>?]S(7L5L1^
%G`\.p%.a3UNUmG\jA?[YA>:&1nbTZp:Ep1G)LJf3LjY/-*ZXsDEF`,/VT,K>7gq:^&nH%`,IK_`(j(3]cU"2s3MWc@-6n;uR;qTJ
%ME3kh7Kt7EEDn+d@2:AA=:fb!BPJ8_nDs10M(KRKJ+1\dD'1*j+lH2\QjL[)'=&5>HSMmc>@eMS2$dNuaLT4N&)d\Us%h9.)]uEW
%5U=%&FP#c#SYFufY!EKc4%PCW5T7/2&t(tsjMmS-jqiil)WLkb-M=u.%uQu_X?\D:.LI6=DWnX(E!j6/47/Y19b#HUOYJ%Xf!`EM
%mc_3SLpK[QZ-=3\kcI/"^N/!HiRpGTB2]\\:reMY1)-f"DS6C+WBDd'Qr_S@j)C)LB-D4J(JPb?m*O4soqR7%H\pmN^##I@?LIF`
%p9@+X%Hk1V^W+g8f6nX%=4LKQkk=&.IGUWlL<'7/TRXTbk%\iIdT*][B5LN#i3V:\e_2opXAl'3A's#)[_ZUio4hRZr^t6:qhI&f
%cPa#o/^#")k\hN1X^RXr4o1Z"`#/$TQ,?sV[t[P74DrjF-fF%-+.Kja0'8*5H<'HRYIZl;g?Z84mI5;DGB8uG$a9B4L;/J\HIi;[
%ntPr>RV$68I4R:h$-qB&._L=5o:L:d\)t\U`)m]4Kpm)@._il=D,npo'$p&$OuK03oW$i[JFGkO']ZOp(7`AD.!`#o[H_l5EO(CQ
%dK%&GTd>A/",!@MDQ7P#378u"OOSa22+)s2oC]&]TpRQp2b0n4aQ+Xh<hRZk99Aq2\Np+L9]en$"Wo]>,dV`i\!Kot.I_$VUt?J>
%RRP>,U)8,<-#SmY$e54d*)B!J(BoG;M#`hpM]m"Kn+s,3Lug'_AM&$5Z\0IZN!fliDh8<$_Z1ipq!L67,Ri1LA/F86[L9SgXjCn+
%T[oCGAYGT?T\2o',%<WFU4GoR#M>AH^B8b:+=r7@>oe5$8&om[n'9kX/%VRaI#1;>F%*!VL94mFc5PP+k`$im%!Dm[f0Q794rbs`
%U-Xoq]6PPX\=h$WDEoim="BGk#l_"u/34s8)MLDF.6C#;Z<&7Q2-lWseRqh3+0\TfgPCDM=#T)e\h9QRp32#Xqg\5+dsq2*J,$51
%+9(^^J,8E-%fH;jro*<qq+lM:_gh^_j\NYgS%o!$5Q'tW55t$^rr</R0E7gIe&UAGl'HnrTE"\a?U"JR^]!3m!J3X>J`$M,n,C5>
%qq^0-5>&L3Hi~>
%AI9_PrivateDataEnd
